

   1               	        .data
   2               	        .align 2
   3               	environ:
   4 0000 0000 0000 	        .long 0
   5               	 	.align	2
   6               	
   7               	.extern main
   8               	.extern exit
   9               	.extern monitor_begin
  10               	.extern hardware_init_hook
  11               	.extern software_init_hook
  12               	.extern atexit
  13               	.extern __do_global_dtors
  14               	.extern __bss_start
  15               	.extern _end
  16               	
  17               	.global start
  18               	
  19               	.text
  20               	.even
  21               		/* See if user supplied their own stack (__stack != 0).  If not, then
  22               		 * default to using the value of %sp as set by the ROM monitor.
  23               		 */
  24 0000 207C 0000 		movel	#__stack, %a0
  24      0000 
  25 0006 B1FC 0000 		cmpl	#0, %a0
  25      0000 
  26 000c 6702      		jbeq    1f
  27 000e 2E48      		movel	%a0, %sp
  28               	1:
  29               		/* set up initial stack frame */
  30 0010 4E56 FFF8 		link	%a6, #-8
  31               	
  32               		/* zero out the bss section */
  33 0014 223C 0000 		movel	#__bss_start, %d1
  33      0000 
  34 001a 203C 0000 		movel	#_end, %d0
  34      0000 
  35 0020 B280      		cmpl	%d0, %d1
  36 0022 6712      		jbeq	3f
  37 0024 2041      		movl	%d1, %a0
  38 0026 9081      		subl	%d1, %d0
  39 0028 5380      		subql	#1, %d0
  40               	2:
  41 002a 4218      		clrb	(%a0)+
  42 002c 51C8 FFFC 		dbra	%d0, 2b
  43 0030 4240      		clrw	%d0
  44 0032 5380      		subql	#1, %d0
  45 0034 64F4      		jbcc	2b
  46               	3:
  47               		/* jmp monitor initialize after making up  bss */
  48 0036 4EF9 0000 		jmp	monitor_begin
  48      0000 
  49               	start:
  50               		/* monitor returns here.
  51               		 * re-setup stack for C programs.
  52               	         * See if user supplied their own stack (__stack != 0).  If not, then


  53               		 * default to using the value of %sp as set by the ROM monitor.
  54               		 */
  55 003c 207C 0000 		movel	#__stack, %a0
  55      0000 
  56 0042 B1FC 0000 		cmpl	#0, %a0
  56      0000 
  57 0048 6702      		jbeq    skip
  58 004a 2E48      		movel	%a0, %sp
  59               	skip:
  60               		/* set up initial stack frame */
  61 004c 4E56 FFF8 		link	%a6, #-8
  62               	
  63               		/*
  64               		 * initialize target specific stuff. Only execute these
  65               		 * functions it they exist.
  66               		 */
  67 0050 41F9 0000 		lea	hardware_init_hook, %a0
  67      0000 
  68 0056 B1FC 0000 		cmpl	#0, %a0
  68      0000 
  69 005c 6702      		jbeq	4f
  70 005e 4E90      		jsr     (%a0)
  71               	4:
  72 0060 41F9 0000 		lea	software_init_hook, %a0
  72      0000 
  73 0066 B1FC 0000 		cmpl	#0, %a0
  73      0000 
  74 006c 6702      		jbeq	5f
  75 006e 4E90      		jsr     (%a0)
  76               	5:
  77               	
  78               		/*
  79               		 * call the main routine from the application to get it going.
  80               		 * main (argc, argv, environ)
  81               		 * we pass argv as a pointer to NULL.
  82               		 */
  83               	
  84               		/* put __do_global_dtors in the atexit list so 
  85               		 * the destructors get run */
  86               	/* 
  87               		movel	#__do_global_dtors,(%sp)
  88               		jsr	atexit
  89               		movel	#__FINI_SECTION__,(%sp)
  90               		jsr	atexit
  91               		jsr	__INIT_SECTION__
  92               	*/
  93               		
  94               		** setup argv, argc and jump into main
  95 0070 4878 0000 	        pea     0
  96 0074 4879 0000 	        pea     environ
  96      0000 
  97 007a 486F 0004 	        pea     %sp@(4)
  98 007e 4878 0000 	        pea     0
  99 0082 4EB9 0000 		jsr	main
  99      0000 
 100 0088 2F00      		movel	%d0, %sp@-
 101               	


 102 008a 4EB9 0000 	        jsr     exit
 102      0000 
 103               	.even




   1               	.extern start				| extern and global changes
   2               	.global monitor_begin			|
   3               	
   4               	********************
   5               	** System call numbers 
   6               	******************** 
   7               	    .equ    SYSCALL_NUM_GETSTRING, 1 
   8               	    .equ    SYSCALL_NUM_PUTSTRING, 2 
   9               	    .equ    SYSCALL_NUM_RESET_TIMER, 3 
  10               	    .equ    SYSCALL_NUM_SET_TIMER, 4 
  11               	
  12               	******************************
  13               	** Head of the Register Group
  14               	*******************************
  15               	    .equ    REGBASE, 0xFFF000 | DMAP is used.
  16               	    .equ    IOBASE, 0x00d00000
  17               	    
  18               	*******************************
  19               	** Registers Related to Interrupts
  20               	*******************************
  21               	    .equ    IVR, REGBASE+0x300 | Interrupt Vector Register
  22               	    .equ    IMR, REGBASE+0x304 | Interrupt Mask Register
  23               	    .equ    ISR, REGBASE+0x30c | Interrupt Status Register
  24               	    .equ    IPR, REGBASE+0x310 | Interrupt Pending Register
  25               	    
  26               	*******************************
  27               	** Registers Related to the Timer
  28               	*******************************
  29               	    .equ    TCTL1, REGBASE+0x600 	|Timer1 Control Register
  30               	    .equ    TPRER1, REGBASE+0x602 	|Timer1 Prescaler Register
  31               	    .equ    TCMP1, REGBASE+0x604 	|Timer1 Compare Register
  32               	    .equ    TCN1, REGBASE+0x608 	|Timer1 Counter Register
  33               	    .equ    TSTAT1, REGBASE+0x60a 	|Timer1 Status Register
  34               	    
  35               	*******************************
  36               	** Registers Related to UART1 (Transmitter and Receiver)
  37               	*******************************
  38               	    .equ    USTCNT1, REGBASE+0x900 	|UART1 Status / Control Register
  39               	    .equ    UBAUD1, REGBASE+0x902 	| UART 1 Baud Control Register
  40               	    .equ    URX1, REGBASE+0x904 	| UART 1 Receiver register
  41               	    .equ    UTX1, REGBASE+0x906 	| UART 1 Transmitter Register
  42               	    
  43               	*******************************
  44               	** LED
  45               	*******************************
  46               	    .equ    LED7, IOBASE+0x000002f 	| Register for LED mounted on the board
  47               	    .equ    LED6, IOBASE+0x000002d 	| Refer to Appendix A.4.3.1 for a way to use
  48               	    .equ    LED5, IOBASE+0x000002b
  49               	    .equ    LED4, IOBASE+0x0000029
  50               	    .equ    LED3, IOBASE+0x000003f
  51               	    .equ    LED2, IOBASE+0x000003d
  52               	    .equ    LED1, IOBASE+0x000003b
  53               	    .equ    LED0, IOBASE+0x0000039
  54               	    .equ    PUSHSW, 0xFFF419 		| Register for Push Switch mounted on the board
  55               	    
  56               	****************************************************************
  57               	** Reservation of the stack region


  58               	****************************************************************
  59               	.section .bss
  60               	.even
  61               	SYS_STK:
  62 0000 0000 0000 	    .ds.b   0x4000  | System stack region
  62      0000 0000 
  62      0000 0000 
  62      0000 0000 
  62      0000 0000 
  63               	    .even
  64               	SYS_STK_TOP:        | End of the system stack region
  65               	
  66               	****************************************************************
  67               	** Initialization
  68               	** A specific value has been set to internal device registers.
  69               	** Refer to each register specification in Appendix B to know the above reason.
  70               	****************************************************************
  71               	.section .text
  72               	.even
  73               	boot:
  74               	monitor_begin:				| start of the change
  75               	
  76               	
  77               	* Prohibit an interrupt into the supervisor and during performing various settings.
  78 0000 46FC 2700 	    move.w  #0x2700, %SR	    	| run at lv.0
  79 0004 4FF9 0000 	    lea.l   SYS_STK_TOP, %SP  	    	| Set SSP
  79      0000 
  80               	******************************
  81               	**Initialization of the interrupt controller
  82               	******************************
  83 000a 13FC 0040 	    move.b  #0x40, IVR                  | Set the user interrupt vector number to 0x40+level.
  83      00FF F300 
  84 0012 23FC 00FF 	    move.l  #0x00ff3ff9, IMR            | Allow UART1 and timer interrupts
  84      3FF9 00FF 
  84      F304 
  85 001c 21FC 0000 	    move.l  #SYSCALL, 0x080             | Set the interrupt for system call TRAP #0
  85      0000 0080 
  86 0024 21FC 0000 	    move.l  #INTERFACE, 0x110           | Set the interrupt subroutine for level 4 interrupt
  86      0000 0110 
  87 002c 21FC 0000 	    move.l  #TIMER_INTERRUPT, 0x118     | Set the interrupt subroutine for level 6 interrupt
  87      0000 0118 
  88               	******************************
  89               	** Initialization related to the transmitter and the receiver (UART1)
  90               	** (The interrupt level has been fixed to 4.)
  91               	******************************
  92 0034 33FC 0000 	    move.w  #0x0000, USTCNT1 		| Reset
  92      00FF F900 
  93 003c 33FC E10C 	    move.w  #0xe10c, USTCNT1 		| Transmission and reception possible - no parity, 1 stop, 8 bit, al
  93      00FF F900 
  94 0044 33FC 0038 	    move.w  #0x0038, UBAUD1  		| baud rate = 230400 bps
  94      00FF F902 
  95               	*************************
  96               	** Initialization related to the timer (The interrupt level has been fixed to 6.)
  97               	*************************
  98 004c 33FC 0004 	    move.w  #0x0004, TCTL1  		| Restart, an interrupt impossible
  98      00FF F600 
  99               	                            		| Count the time with the 1/16 of the system clock


 100               	                            		| as a unit
 101               	                            		| Stop the timer use
 102               	                            
 103 0054 4EBA 0236 	    jsr		INIT_Q
 104               	    
 105 0058 46FC 2000 	    move.w	#0x2000, %SR		/*USER MODE, LEVEL 0*/
 106               	    
 107 005c 4EF9 0000 	    jmp		start			| end of the change
 107      0000 
 108               	    
 109 0062 6000 0002 	    bra     	MAIN
 110               	****************************************************************
 111               	**    Program region
 112               	****************************************************************
 113               	MAIN:
 114               	    ** Set the running mode and the level (The process to move to 'the user mode')
 115 0066 46FC 0000 	    move.w	#0x0000, %SR		/*USER MODE, LEVEL 0*/
 116 006a 4FF9 0000 	    lea.l	USR_STK_TOP, %SP	/*set user stack*/
 116      0000 
 117               	    
 118               	    ** Start up RESET_TIMER by the system call
 119 0070 7003      	    move.l	#SYSCALL_NUM_RESET_TIMER, %d0
 120 0072 4E40      	    trap	#0
 121               		
 122               	    ** Start up SET_TIMER by the system call
 123 0074 7004      	    move.l	#SYSCALL_NUM_SET_TIMER, %d0
 124 0076 323C C350 	    move.w	#50000, %d1
 125 007a 243C 0000 	    move.l	#TT, %d2
 125      0000 
 126 0080 4E40      	    trap	#0
 127               	
 128               	
 129               	************************************* 
 130               	*    Test of sys_GETSTRING and sys_PUTSTRING 
 131               	*    Echo-back the input from a terminal 
 132               	************************************* 
 133               	
 134               	LOOP:
 135 0082 7001      	    move.l	#SYSCALL_NUM_GETSTRING, %d0
 136 0084 7200      	    move.l	#0, %d1			/*ch = 0*/
 137 0086 243C 0000 	    move.l	#BUF, %d2		/*p = #BUF*/
 137      0000 
 138 008c 263C 0000 	    move.l	#256, %d3		/*size = 256*/
 138      0100 
 139 0092 4E40      	    trap	#0
 140 0094 2600      	    move.l	%d0, %d3		/*size = %d0 (The length of a given string)*/
 141 0096 7002      	    move.l	#SYSCALL_NUM_PUTSTRING, %d0
 142 0098 7200      	    move.l	#0, %d1			/*ch = 0*/
 143 009a 243C 0000 	    move.l	#BUF, %d2		/*p = #BUF*/
 143      0000 
 144 00a0 4E40      	    trap	#0
 145 00a2 6000 FFDE 	    bra		LOOP		
 146               	
 147               	**************************************       
 148               	*    Test of the timer       
 149               	*    Display ‘******’ and CRLF (Carriage Return, Line Feed) five times       
 150               	*    Do RESET_TIMER after five times of the execution       


 151               	**************************************   
 152               	
 153               	TT:
 154 00a6 48E7 FFFE 	    movem.l	%d0-%d7/%a0-%a6, -(%sp)
 155 00aa 0C79 0005 	    cmpi.w	#5, TTC			/*Count with the counter TTC whether five times of the execution have been per
 155      0000 0000 
 156 00b2 6700 001C 	    beq		TTKILL			/*Stop the timer after five times of the execution*/
 157 00b6 7002      	    move.l	#SYSCALL_NUM_PUTSTRING, %d0
 158 00b8 7200      	    move.l	#0, %d1			/*ch = 0*/
 159 00ba 243C 0000 	    move.l	#TMSG, %d2		/*p = #TMSG*/
 159      0000 
 160 00c0 7608      	    move.l	#8, %d3			/*size = 8*/
 161 00c2 4E40      	    trap	#0
 162 00c4 0679 0001 	    addi.w	#1, TTC			/*Increment TTC counter by 1 and return*/
 162      0000 0000 
 163 00cc 6000 0006 	    bra		TTEND
 164               	    
 165               	TTKILL:
 166 00d0 7003      	    move.l	#SYSCALL_NUM_RESET_TIMER, %d0
 167 00d2 4E40      	    trap	#0
 168               	    
 169               	TTEND:
 170 00d4 4CDF 7FFF 	    movem.l	(%sp)+, %d0-%d7/%a0-%a6
 171 00d8 4E75      	    rts
 172               	
 173               	****************************************************************
 174               	**  System Call Interface:
 175               	**     Maker: Morris Kim, Rafii Hakim
 176               	**  Reviewer: Lim Liang Sun, Napat Limsuwan
 177               	****************************************************************
 178               	        
 179               	SYSCALL:
 180 00da 0C80 0000 		cmpi.l	#SYSCALL_NUM_GETSTRING, %d0
 180      0001 
 181 00e0 6700 0022 		beq	CALL_GETSTRING
 182 00e4 0C80 0000 		cmpi.l	#SYSCALL_NUM_PUTSTRING, %d0
 182      0002 
 183 00ea 6700 001E 		beq	CALL_PUTSTRING
 184 00ee 0C80 0000 		cmpi.l	#SYSCALL_NUM_RESET_TIMER, %d0
 184      0003 
 185 00f4 6700 001A 		beq	CALL_RESET_TIMER
 186 00f8 0C80 0000 		cmpi.l	#SYSCALL_NUM_SET_TIMER, %d0
 186      0004 
 187 00fe 6700 0016 		beq	CALL_SET_TIMER
 188 0102 4E73      		rte
 189               		
 190               	CALL_GETSTRING:
 191 0104 4EBA 014E 		jsr	GETSTRING
 192 0108 4E73      		rte
 193               	CALL_PUTSTRING:
 194 010a 4EBA 00FE 		jsr	PUTSTRING
 195 010e 4E73      		rte
 196               	CALL_RESET_TIMER:
 197 0110 4EBA 002A 		jsr	RESET_TIMER
 198 0114 4E73      		rte
 199               	CALL_SET_TIMER:
 200 0116 4EBA 002E 		jsr	SET_TIMER


 201 011a 4E73      		rte
 202               	
 203               	
 204               	****************************************************************
 205               	**  Timer interrupt
 206               	**     Maker: Lim Liang Sun, Napat Limsuwan
 207               	**  Reviewer: Morris Kim, Rafii Hakim
 208               	****************************************************************
 209               	TIMER_INTERRUPT:
 210 011c 48E7 0080 		movem.l	%a0, -(%sp)		/* Evacuate registers */
 211 0120 0C79 0000 		cmp	#0, TSTAT1		/* Checks 0th bit of TSTAT1 */
 211      00FF F60A 
 212 0128 6700 000C 		beq	TIMER_INTERRUPT_END
 213 012c 4279 00FF 		clr.w	TSTAT1			/* Reset TSTAT1 to 0 */
 213      F60A 
 214 0132 4EBA 0030 		jsr	CALL_RP
 215               	TIMER_INTERRUPT_END:
 216 0136 4CDF 0100 		movem.l	(%sp)+, %a0
 217 013a 4E73      		rte
 218               	
 219               	RESET_TIMER:
 220 013c 33FC 0004 		move.w 	#0x0004, TCTL1		/* Restart, an interrupt impossible, input is SYSCLK/16, prohibit timer */
 220      00FF F600 
 221 0144 4E75      		rts
 222               	SET_TIMER:
 223               		/* D1.W = t (timer interrupt cycle, every 0.t msec) */
 224               		/* D2.L = p (head address of the routine to be called at the interrupt occurrence) */
 225 0146 23C2 0000 		move.l	%d2, task_p		/* Substitute p for the global variable task_p*/
 225      0000 
 226 014c 33FC 00CE 		move.w	#0x00CE, TPRER1 	/* Let counter increment by 1 every 0.1 msec*/
 226      00FF F602 
 227 0154 33C1 00FF 		move.w	%d1, TCMP1		/* Substitute t for the TCMP1 */
 227      F604 
 228 015a 33FC 0015 		move.w	#0x0015, TCTL1		/* Restart, enable compare interrupt, input is SYSCLK/16, permit timer */
 228      00FF F600 
 229 0162 4E75      		rts
 230               	CALL_RP:
 231 0164 2079 0000 		move.l	(task_p), %a0
 231      0000 
 232 016a 4E90      		jsr	(%a0)
 233 016c 4E75      		rts
 234               	    
 235               	
 236               		
 237               	****************************************************************
 238               	**  UART1 Interrupt Interface
 239               	**     Maker: Morris Kim, Rafii Hakim
 240               	**  Reviewer: Lim Liang Sun, Napat Limsuwan
 241               	****************************************************************
 242               	INTERFACE:
 243 016e 48E7 F000 		movem.l	%d0-%d3,-(%sp)
 244               		
 245               		/* Receiver Interrupt */
 246 0172 3639 00FF 		move.w	URX1, %d3	/* Copy register URX1 to %d3.w*/
 246      F904 
 247 0178 0803 000D 		btst.l	#13, %d3 	/* Receiver FIFO? 1 = not empty, 0 = empty, yes it's confusing*/ 
 248 017c 6600 0020 		bne	CALL_INTERGET	/* Basically, this checks if it is a receiver interupt*/


 249               		
 250               		
 251               		/* Transmitter Interrupt */
 252 0180 3639 00FF 		move.w	UTX1, %d3
 252      F906 
 253 0186 0803 000F 		btst.l	#15, %d3	/* Transmitter FIFO empty? 1 = empty, 0 = not empty*/
 254 018a 6600 0008 		bne	CALL_INTERPUT	/* not equal to 1*/
 255               		
 256               		
 257               	INTERFACE_END:	
 258 018e 4CDF 000F 		movem.l	(%sp)+, %d0-%d3
 259 0192 4E73      		rte
 260               		
 261               	CALL_INTERPUT:
 262 0194 7200      		move.l	#0, %d1
 263 0196 4EBA 002E 		jsr	INTERPUT
 264 019a 6000 FFF2 		bra	INTERFACE_END
 265               	
 266               	CALL_INTERGET:
 267 019e 7200      		move.l	#0, %d1
 268 01a0 1403      		move.b	%d3, %d2	/* Copy lower 8 bits (data part) of %d3.w to %d2.b*/
 269 01a2 4EBA 0006 		jsr	INTERGET
 270 01a6 6000 FFE6 		bra	INTERFACE_END
 271               	
 272               	****************************************************************
 273               	**  INTERGET
 274               	**     Maker: Zelal Denis Yildiz
 275               	**  Reviewer: Amira Ben Youssef
 276               	****************************************************************	
 277               	INTERGET:
 278               		/* Input: Channel ch -> %d1, received data -> %d2 */
 279               		/* No return value */
 280 01aa 48E7 8000 		movem.l	%d0, -(%sp)
 281 01ae 0C81 0000 		cmpi.l	#0, %d1
 281      0000 
 282 01b4 6600 000A 		bne	INTERGET_END
 283 01b8 7000      		move.l	#0, %d0		/* Queue #0 */
 284 01ba 1202      		move.b	%d2, %d1 	/* move data to d1*/
 285 01bc 4EBA 0104 		jsr	INQ		
 286               		
 287               	INTERGET_END:
 288 01c0 4CDF 0001 		movem.l	(%sp)+, %d0
 289 01c4 4E75      		rts
 290               	        
 291               	****************************************************************
 292               	**  INTERPUT
 293               	**	Maker: Amira Ben Youssef
 294               	**  Reviewer: Zelal Denis Yildiz
 295               	****************************************************************	
 296               	INTERPUT:
 297               		/* Input: Channel ch -> %d1 */
 298               		/* d0 = UTX1 at the end, we need %d0 to compare when we return to INTERFACE*/
 299               		/* No return value */
 300               		
 301 01c6 48E7 2000 		movem.l	%d2,-(%sp)
 302 01ca 40C2      		move.w	%SR, %d2	/* Save running level */
 303 01cc 46FC 2700 		move.w	#0x2700, %SR	/* Set running level to 7 */


 304 01d0 0C81 0000 		cmp.l	#0, %d1		/* Return without doing anything if ch=/=0*/
 304      0000 
 305 01d6 6600 002A 		bne	INTERPUT_END
 306 01da 7001      		move.l	#1, %d0		/* Queue #1 */
 307 01dc 4EBA 0112 		jsr	OUTQ		/* Substitute it for data?? */
 308               					/* d1 is data */
 309 01e0 0C80 0000 		cmp.l	#0, %d0 
 309      0000 
 310 01e6 6700 0012 		beq	MASK_TRANSMITTER_INTERRUPT
 311 01ea 0681 0000 		add.l	#0x0800, %d1
 311      0800 
 312 01f0 33C1 00FF 		move.w 	%d1, UTX1	/* Substitute the data for the transmitter register UTX1 */
 312      F906 
 313 01f6 6000 000A 		bra INTERPUT_END
 314               		
 315               	MASK_TRANSMITTER_INTERRUPT:
 316 01fa 0279 FFF8 		andi 	#0xfff8, USTCNT1 /* Mask the transmitter interrupt */
 316      00FF F900 
 317               		
 318               	INTERPUT_END:
 319 0202 46C2      		move.w	%d2, %SR	/* Restore running level */
 320 0204 4CDF 0004 		movem.l	(%sp)+, %d2
 321 0208 4E75      		rts
 322               	        
 323               	****************************************************************
 324               	**  PUTSTRING
 325               	**     Maker: Amira Ben Youssef
 326               	**  Reviewer: Zelal Denis Yildiz
 327               	****************************************************************
 328               	PUTSTRING:
 329               		/* Input: Channel ch -> d1, Head address p -> d2, No. of data -> d3 */
 330               		/* Output: no. of data actually sent -> d0 */
 331 020a 48E7 0880 		movem.l	%d4/%a0, -(%sp)
 332 020e 0C81 0000 		cmp.l	#0, %d1
 332      0000 
 333 0214 6600 0038 		bne	PUTSTRING_END	/* If ch =/= 0, end */
 334 0218 7800      		move.l	#0, %d4		/* d4 = sz */
 335 021a 2042      		move.l	%d2, %a0	/* a0 = i */
 336 021c 0C83 0000 		cmp.l	#0, %d3
 336      0000 
 337 0222 6700 0028 		beq	PUTSTRING_UPD_SZ
 338               		
 339               	PUTSTRING_LOOP:
 340 0226 B684      		cmp.l	%d4, %d3	/* If sz == size */
 341 0228 6700 001A 		beq	PUTSTRING_UNMASK
 342 022c 1218      		move.b	(%a0)+, %d1	/* Put data in d1 */
 343 022e 7001      		move.l	#1, %d0		/* Use queue 1 */
 344 0230 4EBA 0090 		jsr	INQ
 345 0234 0C80 0000 		cmp.l	#0, %d0		/* If INQ failed*/
 345      0000 
 346 023a 6700 0008 		beq	PUTSTRING_UNMASK
 347 023e 5244      		addq	#1, %d4		/* Increment sz and i */
 348 0240 6000 FFE4 		bra	PUTSTRING_LOOP
 349               	
 350               	PUTSTRING_UNMASK:
 351 0244 0079 0007 		ori 	#0x0007, USTCNT1 	/* Permit the transmitter interrupt */
 351      00FF F900 


 352               	
 353               	PUTSTRING_UPD_SZ:	
 354 024c 2004      		move.l	%d4, %d0		/* %d0 <- sz */
 355               		
 356               	PUTSTRING_END:
 357 024e 4CDF 0110 		movem.l	(%sp)+, %d4/%a0
 358 0252 4E75      		rts
 359               	
 360               	****************************************************************
 361               	**  GETSTRING
 362               	**     Maker: Zelal Denis Yildiz
 363               	**  Reviewer: Amira Ben Youssef
 364               	****************************************************************
 365               	GETSTRING:
 366               		/* Input: ch -> d1, head address of destination p -> d2, no. of data to be read -> d3 */
 367               		/* Output: no. of data actually read out -> d0 */
 368 0254 48E7 0880 		movem.l	%d4/%a0, -(%sp)
 369 0258 0C81 0000 		cmpi.l	#0, %d1
 369      0000 
 370 025e 6600 0026 		bne	GETSTRING_END		/* If ch =/= 0, end */
 371 0262 7800      		move.l	#0, %d4			/* d4 = sz (Used to count no. of data actually read out) */
 372 0264 2042      		move.l	%d2, %a0		/* a0 = i (NOT Index, but head address of destination) */
 373               		
 374               	
 375               	GETSTRING_LOOP:
 376 0266 B684      		cmp.l	%d4, %d3		/* is sz == size? */
 377 0268 6700 001A 		beq	GETSTRING_UPD_SZ
 378 026c 7000      		move.l	#0, %d0			/* specify queue 0 */
 379 026e 4EBA 0080 		jsr	OUTQ			/* Call OUTQ, puts data in d1 */
 380 0272 0C80 0000 		cmpi.l	#0, %d0			/* If failure */
 380      0000 
 381 0278 6700 000A 		beq	GETSTRING_UPD_SZ	/* End GETSTRING */
 382 027c 10C1      		move.b	%d1, (%a0)+		/* Copy the data to address i */
 383 027e 5244      		addq	#1, %d4			/* Increment sz and i */
 384 0280 4EFA FFE4 		jmp	GETSTRING_LOOP
 385               	
 386               	GETSTRING_UPD_SZ:	
 387 0284 2004      		move.l	%d4, %d0		/* %d0 <- sz */
 388               		
 389               	GETSTRING_END:
 390 0286 4CDF 0110 		movem.l	(%sp)+, %d4/%a0
 391 028a 4E75      		rts
 392               	
 393               	*****************************************************************
 394               	**  Queues
 395               	**     Maker: Amira Ben youssef, Zelal Denis Yildiz
 396               	**  Reviewer: Moris Kim
 397               	*****************************************************************
 398               	INIT_Q:
 399 028c 48E7 0078 		movem.l	%a1-%a4, -(%sp)
 400               	  
 401 0290 43F9 0000 		lea.l	top, %a1		/*top address is a1*/
 401      0000 
 402 0296 45F9 0000 		lea.l  	inp, %a2
 402      0000 
 403 029c 47F9 0000 		lea.l  	outp, %a3
 403      0000 


 404 02a2 49F9 0000 		lea.l  	s, %a4
 404      0000 
 405 02a8 24C9      		move.l	%a1, (%a2)+ 		/* Initialize inp, outp, and s for q0*/
 406 02aa 26C9      		move.l	%a1, (%a3)+
 407 02ac 38FC 0000 		move.w	#0, (%a4)+
 408 02b0 D2FC 0100 		adda  	#SIZE_of_QUEUE, %a1 	/* add offset for q1 */
 409 02b4 2489      		move.l	%a1, (%a2)  		/* Initialize inp, outp, and s for q1*/
 410 02b6 2689      		move.l	%a1, (%a3)
 411 02b8 38BC 0000 		move.w	#0, (%a4)
 412 02bc 4CDF 1E00 		movem.l	(%sp)+, %a1-%a4
 413 02c0 4E75      		rts
 414               	
 415               	INQ:
 416               		/* Input: Queue no. -> %d0, Data -> %d1 */
 417               		/* Output: Success/fail -> %d0 */
 418 02c2 48E7 3C7C 		movem.l	%d2-%d5/%a1-%a5,-(%sp)    /* Save registers */
 419 02c6 4EBA 0058 		jsr	Q_START
 420 02ca 45F9 0000 		lea.l 	inp, %a2		  /* inp -> a2 */
 420      0000 
 421 02d0 D5C2      		adda.l  %d2, %a2  		  /* add offset */
 422 02d2 2252      		move.l  (%a2), %a1 		  /* a1 = in pointer */
 423 02d4 4EBA 0006 		jsr	INQ_SIZE_CHECK
 424 02d8 4EFA 0090 		jmp 	Q_FINISH
 425               	
 426               	INQ_SIZE_CHECK:
 427 02dc 0C53 0100 		cmp.w	#256, (%a3)  		 /* check if queue is full */
 428 02e0 6600 0006 		bne	INQ_SUCC	         /* if s not equals to 256 */
 429 02e4 6000 0080 		bra	Q_FAIL		 	 /* if s==256 */
 430               	
 431               	INQ_SUCC:
 432 02e8 1281      		move.b 	%d1, (%a1) 		 /* d1 = data moved into inp */
 433 02ea 5253      		addq    #1, (%a3)   		 /* Increment size */
 434 02ec 4EFA 004E 		jmp     Q_SUCC
 435               	
 436               	OUTQ:
 437               		/* Input: Queue no. -> %d0 */
 438               		/* Output: Success/fail -> %d0, Data -> %d1 */
 439 02f0 48E7 3C7C 		movem.l	%d2-%d5/%a1-%a5,-(%sp)   /* Save registers */
 440 02f4 4EBA 002A 		jsr     Q_START
 441 02f8 45F9 0000 		lea.l 	outp, %a2	         /* outp -> a2 */
 441      0000 
 442 02fe D5C2      		adda.l  %d2, %a2   		 /* add offset */
 443 0300 2252      		move.l  (%a2), %a1  		 /* a1 = out pointer */
 444               	
 445 0302 4EBA 0006 		jsr	OUTQ_SIZE_CHECK
 446 0306 4EFA 0062 		jmp 	Q_FINISH
 447               	
 448               	OUTQ_SIZE_CHECK:
 449 030a 0C53 0000 		cmp.w 	#0, (%a3)   		 /* check if queue is empty*/
 450 030e 6E00 0006 		bgt 	OUTQ_SUCC
 451 0312 6000 0052 		bra	Q_FAIL
 452               	
 453               	OUTQ_SUCC:
 454 0316 1211      		move.b	(%a1), %d1 		/* data is moved to d1*/
 455 0318 0453 0001 		subi.w  #1, (%a3)    		/* Decrement size */
 456               	
 457 031c 4EFA 001E 		jmp 	Q_SUCC


 458               	  
 459               	
 460               	/* These are common for both INQ and OUTQ */
 461               	Q_START:
 462 0320 40C5      		move.w	%SR, %d5   	 /* Save running level */
 463 0322 46FC 2700 		move.w 	#0x2700, %SR	 /* running level = 7 */
 464 0326 2400      		move.l 	%d0, %d2  	 /* d2 = pointer offset */
 465 0328 C4FC 0004 		mulu	#4,  %d2  	 /* because address is stored in longword */
 466 032c 2600      		move.l  %d0, %d3  	 /* d3 = queue size pointer offset */
 467 032e C6FC 0002 		mulu	#2, %d3	  	 /* because address is stored in word */
 468 0332 47F9 0000 		lea.l	s,   %a3  	 /* size -> a3 */
 468      0000 
 469 0338 D7C3      		adda.l  %d3, %a3   	 /* add offset */
 470 033a 4E75      		rts
 471               	
 472               	Q_SUCC:
 473 033c 2800      		move.l 	%d0, %d4  	 /* d4 = queue area offset */
 474 033e C8FC 0100 		mulu	#SIZE_of_QUEUE, %d4
 475 0342 49F9 0000 		lea.l   top, %a4 	 /* a4 = head of queue area */
 475      0000 
 476 0348 D9C4      		adda.l  %d4, %a4  	 /* adds offset */
 477 034a 2A4C      		move.l  %a4, %a5  	 /* a5 = bottom of queue area */
 478 034c DBFC 0000 		adda.l  #255, %a5 	 /* the bottom is 255 from the top */
 478      00FF 
 479 0352 7001      		move.l  #1, %d0    	 /* success flag raised */
 480 0354 BAC9      		cmp	%a1, %a5	 /* compare inp/outp with bottom*/
 481 0356 6700 000A 		beq	Q_BACK		 /* reach the bottom */
 482 035a 6000 0002 		bra	Q_NEXT
 483               	
 484               	Q_NEXT:
 485 035e 5249      		addq	#1, %a1   	 /* increment input/output pointer*/
 486 0360 4E75      		rts
 487               	
 488               	Q_BACK:
 489 0362 224C      		move.l	%a4, %a1         /* input/output pointer set to head of queue area */
 490 0364 4E75      		rts	
 491               	
 492               	Q_FAIL:
 493 0366 7000      		move.l	#0, %d0   	 /* set flag to fail */
 494 0368 4E75      		rts
 495               	
 496               	Q_FINISH:
 497 036a 2489      		move.l	%a1, (%a2)   	 /* update inp/outp */
 498 036c 46C5      		move.w	%d5, %SR     	 /* restore previous running level */
 499 036e 4CDF 3E3C 		movem.l	(%sp)+,%d2-%d5/%a1-%a5  /* restore registers */
 500 0372 4E75      		rts
 501               	
 502               	.section .data
 503               	    .equ	SIZE_of_QUEUE,	256
 504               	
 505               	.section .bss
 506               	.even
 507 4000 0000 0000 	top:		.ds.b	SIZE_of_QUEUE*2
 507      0000 0000 
 507      0000 0000 
 507      0000 0000 
 507      0000 0000 


 508 4200 0000 0000 	inp:		.ds.l	2
 508      0000 0000 
 509 4208 0000 0000 	outp:		.ds.l	2
 509      0000 0000 
 510 4210 0000 0000 	s:		.ds.w	2
 511 4214 0000 0000 	task_p:		.ds.l	1
 512               	
 513               	            .even
 514               	
 515               	****************************************************************
 516               	**	Data region with an initial value
 517               	****************************************************************
 518               	.section .data
 519 0000 2A2A 2A2A 	TMSG:		.ascii	"******\r\n"
 519      2A2A 0D0A 
 520               	            .even
 521 0008 0000      	TTC:		.dc.w	0
 522               	            .even
 523               	
 524               	****************************************************************
 525               	**	Data region without an initial value
 526               	****************************************************************
 527               	.section .bss
 528 4218 0000 0000 	BUF:		.ds.b	256
 528      0000 0000 
 528      0000 0000 
 528      0000 0000 
 528      0000 0000 
 529               	            .even
 530               	USR_STK:
 531 4318 0000 0000 	            .ds.b	0x4000
 531      0000 0000 
 531      0000 0000 
 531      0000 0000 
 531      0000 0000 
 532               	            .even
 533               	USR_STK_TOP:
 534               	
 535               	
 536               	
 537               	




   1               	#NO_APP
   2               		.file	"csys68k.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	read
   8               		.type	read, @function
   9               	read:
  10               	.LVL0:
  11               	.LFB0:
  12               		.file 1 "csys68k.c"
   1:csys68k.c     **** extern void outbyte(unsigned char c);
   2:csys68k.c     **** extern char inbyte();
   3:csys68k.c     **** 
   4:csys68k.c     **** int read(int fd, char *buf, int nbytes)
   5:csys68k.c     **** {
  13               		.loc 1 5 1 view -0
  14               		.cfi_startproc
  15               		.loc 1 5 1 is_stmt 0 view .LVU1
  16 0000 48E7 3838 		movem.l #14392,-(%sp)
  17               		.cfi_def_cfa_offset 28
  18               		.cfi_offset 2, -28
  19               		.cfi_offset 3, -24
  20               		.cfi_offset 4, -20
  21               		.cfi_offset 10, -16
  22               		.cfi_offset 11, -12
  23               		.cfi_offset 12, -8
  24 0004 286F 0020 		move.l 32(%sp),%a4
  25 0008 282F 0024 		move.l 36(%sp),%d4
   6:csys68k.c     ****   char c;
  26               		.loc 1 6 3 is_stmt 1 view .LVU2
   7:csys68k.c     ****   int  i;
  27               		.loc 1 7 3 view .LVU3
   8:csys68k.c     **** 
   9:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
  28               		.loc 1 9 3 view .LVU4
  29               	.LVL1:
  30               		.loc 1 9 17 view .LVU5
  31               		.loc 1 9 10 is_stmt 0 view .LVU6
  32 000c 7600      		moveq #0,%d3
  33               		.loc 1 9 17 view .LVU7
  34 000e 4A84      		tst.l %d4
  35 0010 6F36      		jle .L1
  36 0012 47F9 0000 		lea inbyte,%a3
  36      0000 
  37 0018 45F9 0000 		lea outbyte,%a2
  37      0000 
  38               	.LVL2:
  39               	.L8:
  10:csys68k.c     ****     c = inbyte();
  40               		.loc 1 10 5 is_stmt 1 view .LVU8
  41               		.loc 1 10 9 is_stmt 0 view .LVU9
  42 001e 4E93      		jsr (%a3)
  43               	.LVL3:
  44 0020 1400      		move.b %d0,%d2
  45               	.LVL4:


  11:csys68k.c     **** 
  12:csys68k.c     ****     if (c == '\r' || c == '\n'){ /* CR -> CRLF */
  46               		.loc 1 12 5 is_stmt 1 view .LVU10
  47               		.loc 1 12 8 is_stmt 0 view .LVU11
  48 0022 0C00 000D 		cmp.b #13,%d0
  49 0026 6728      		jeq .L3
  50               		.loc 1 12 19 discriminator 1 view .LVU12
  51 0028 0C00 000A 		cmp.b #10,%d0
  52 002c 6722      		jeq .L3
  13:csys68k.c     ****       outbyte('\r');
  14:csys68k.c     ****       outbyte('\n');
  15:csys68k.c     ****       *(buf + i) = '\n';
  16:csys68k.c     **** 
  17:csys68k.c     ****     /* } else if (c == '\x8'){ */     /* backspace \x8 */
  18:csys68k.c     ****     } else if (c == '\x7f'){      /* backspace \x8 -> \x7f (by terminal config.) */
  53               		.loc 1 18 12 is_stmt 1 view .LVU13
  54               		.loc 1 18 15 is_stmt 0 view .LVU14
  55 002e 0C00 007F 		cmp.b #127,%d0
  56 0032 673A      		jeq .L18
  19:csys68k.c     ****       if (i > 0){
  20:csys68k.c     **** 	outbyte('\x8'); /* bs  */
  21:csys68k.c     **** 	outbyte(' ');   /* spc */
  22:csys68k.c     **** 	outbyte('\x8'); /* bs  */
  23:csys68k.c     **** 	i--;
  24:csys68k.c     ****       }
  25:csys68k.c     ****       i--;
  26:csys68k.c     ****       continue;
  27:csys68k.c     **** 
  28:csys68k.c     ****     } else {
  29:csys68k.c     ****       outbyte(c);
  57               		.loc 1 29 7 is_stmt 1 view .LVU15
  58 0034 7000      		moveq #0,%d0
  59               	.LVL5:
  60               		.loc 1 29 7 is_stmt 0 view .LVU16
  61 0036 1002      		move.b %d2,%d0
  62 0038 2F00      		move.l %d0,-(%sp)
  63               		.cfi_def_cfa_offset 32
  64 003a 4E92      		jsr (%a2)
  65               	.LVL6:
  30:csys68k.c     ****       *(buf + i) = c;
  66               		.loc 1 30 7 is_stmt 1 view .LVU17
  67               		.loc 1 30 18 is_stmt 0 view .LVU18
  68 003c 1982 3800 		move.b %d2,(%a4,%d3.l)
  31:csys68k.c     ****     }
  32:csys68k.c     **** 
  33:csys68k.c     ****     if (*(buf + i) == '\n'){
  69               		.loc 1 33 5 is_stmt 1 view .LVU19
  34:csys68k.c     ****       return (i + 1);
  70               		.loc 1 34 17 is_stmt 0 view .LVU20
  71 0040 5283      		addq.l #1,%d3
  72               	.LVL7:
  73               		.loc 1 34 17 view .LVU21
  74 0042 588F      		addq.l #4,%sp
  75               		.cfi_def_cfa_offset 28
  76               	.LVL8:
   9:csys68k.c     ****     c = inbyte();
  77               		.loc 1 9 28 is_stmt 1 view .LVU22


   9:csys68k.c     ****     c = inbyte();
  78               		.loc 1 9 17 view .LVU23
  79 0044 B684      		cmp.l %d4,%d3
  80 0046 6DD6      		jlt .L8
  81               	.LVL9:
  82               	.L1:
  35:csys68k.c     ****     }
  36:csys68k.c     ****   }
  37:csys68k.c     ****   return (i);
  38:csys68k.c     **** }
  83               		.loc 1 38 1 is_stmt 0 view .LVU24
  84 0048 2003      		move.l %d3,%d0
  85 004a 4CDF 1C1C 		movem.l (%sp)+,#7196
  86 004e 4E75      		rts
  87               	.LVL10:
  88               	.L3:
  13:csys68k.c     ****       outbyte('\n');
  89               		.loc 1 13 7 is_stmt 1 view .LVU25
  90 0050 4878 000D 		pea 13.w
  91               		.cfi_def_cfa_offset 32
  92 0054 4E92      		jsr (%a2)
  93               	.LVL11:
  14:csys68k.c     ****       *(buf + i) = '\n';
  94               		.loc 1 14 7 view .LVU26
  95 0056 4878 000A 		pea 10.w
  96               		.cfi_def_cfa_offset 36
  97 005a 4E92      		jsr (%a2)
  98               	.LVL12:
  15:csys68k.c     **** 
  99               		.loc 1 15 7 view .LVU27
  15:csys68k.c     **** 
 100               		.loc 1 15 18 is_stmt 0 view .LVU28
 101 005c 19BC 000A 		move.b #10,(%a4,%d3.l)
 101      3800 
  33:csys68k.c     ****       return (i + 1);
 102               		.loc 1 33 5 is_stmt 1 view .LVU29
  34:csys68k.c     ****     }
 103               		.loc 1 34 7 view .LVU30
  34:csys68k.c     ****     }
 104               		.loc 1 34 17 is_stmt 0 view .LVU31
 105 0062 5283      		addq.l #1,%d3
 106               	.LVL13:
  34:csys68k.c     ****     }
 107               		.loc 1 34 17 view .LVU32
 108 0064 508F      		addq.l #8,%sp
 109               		.cfi_def_cfa_offset 28
 110               		.loc 1 38 1 view .LVU33
 111 0066 2003      		move.l %d3,%d0
 112 0068 4CDF 1C1C 		movem.l (%sp)+,#7196
 113               	.LVL14:
 114               		.loc 1 38 1 view .LVU34
 115 006c 4E75      		rts
 116               	.LVL15:
 117               	.L18:
  19:csys68k.c     **** 	outbyte('\x8'); /* bs  */
 118               		.loc 1 19 7 is_stmt 1 view .LVU35
  19:csys68k.c     **** 	outbyte('\x8'); /* bs  */


 119               		.loc 1 19 10 is_stmt 0 view .LVU36
 120 006e 4A83      		tst.l %d3
 121 0070 67AC      		jeq .L8
  23:csys68k.c     ****       }
 122               		.loc 1 23 3 view .LVU37
 123 0072 5383      		subq.l #1,%d3
 124               	.LVL16:
  20:csys68k.c     **** 	outbyte(' ');   /* spc */
 125               		.loc 1 20 2 is_stmt 1 view .LVU38
 126 0074 4878 0008 		pea 8.w
 127               		.cfi_def_cfa_offset 32
 128 0078 4E92      		jsr (%a2)
 129               	.LVL17:
  21:csys68k.c     **** 	outbyte('\x8'); /* bs  */
 130               		.loc 1 21 2 view .LVU39
 131 007a 4878 0020 		pea 32.w
 132               		.cfi_def_cfa_offset 36
 133 007e 4E92      		jsr (%a2)
 134               	.LVL18:
  22:csys68k.c     **** 	i--;
 135               		.loc 1 22 2 view .LVU40
 136 0080 4878 0008 		pea 8.w
 137               		.cfi_def_cfa_offset 40
 138 0084 4E92      		jsr (%a2)
 139               	.LVL19:
  23:csys68k.c     ****       }
 140               		.loc 1 23 2 view .LVU41
  25:csys68k.c     ****       continue;
 141               		.loc 1 25 7 view .LVU42
  26:csys68k.c     **** 
 142               		.loc 1 26 7 view .LVU43
 143 0086 4FEF 000C 		lea (12,%sp),%sp
 144               		.cfi_def_cfa_offset 28
 145               	.LVL20:
   9:csys68k.c     ****     c = inbyte();
 146               		.loc 1 9 28 view .LVU44
   9:csys68k.c     ****     c = inbyte();
 147               		.loc 1 9 17 view .LVU45
 148 008a B684      		cmp.l %d4,%d3
 149 008c 6D90      		jlt .L8
 150 008e 60B8      		jra .L1
 151               		.cfi_endproc
 152               	.LFE0:
 153               		.size	read, .-read
 154               		.align	2
 155               		.globl	write
 156               		.type	write, @function
 157               	write:
 158               	.LVL21:
 159               	.LFB1:
  39:csys68k.c     **** 
  40:csys68k.c     **** int write (int fd, char *buf, int nbytes)
  41:csys68k.c     **** {
 160               		.loc 1 41 1 view -0
 161               		.cfi_startproc
 162               		.loc 1 41 1 is_stmt 0 view .LVU47
 163 0090 48E7 3030 		movem.l #12336,-(%sp)


 164               		.cfi_def_cfa_offset 20
 165               		.cfi_offset 2, -20
 166               		.cfi_offset 3, -16
 167               		.cfi_offset 10, -12
 168               		.cfi_offset 11, -8
 169 0094 262F 001C 		move.l 28(%sp),%d3
  42:csys68k.c     ****   int i, j;
 170               		.loc 1 42 3 is_stmt 1 view .LVU48
  43:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
 171               		.loc 1 43 3 view .LVU49
 172               	.LVL22:
 173               		.loc 1 43 17 view .LVU50
 174 0098 6F26      		jle .L25
 175 009a 246F 0018 		move.l 24(%sp),%a2
 176 009e 240A      		move.l %a2,%d2
 177 00a0 D483      		add.l %d3,%d2
 178 00a2 47F9 0000 		lea outbyte,%a3
 178      0000 
 179               	.LVL23:
 180               	.L22:
  44:csys68k.c     ****     if (*(buf + i) == '\n') {
 181               		.loc 1 44 5 view .LVU51
 182               		.loc 1 44 9 is_stmt 0 view .LVU52
 183 00a8 101A      		move.b (%a2)+,%d0
 184               	.LVL24:
 185               		.loc 1 44 8 view .LVU53
 186 00aa 0C00 000A 		cmp.b #10,%d0
 187 00ae 6718      		jeq .L28
  45:csys68k.c     ****       outbyte ('\r');          /* LF -> CRLF */
  46:csys68k.c     ****     }
  47:csys68k.c     ****     outbyte (*(buf + i));
 188               		.loc 1 47 5 is_stmt 1 view .LVU54
 189 00b0 0280 0000 		and.l #255,%d0
 189      00FF 
 190 00b6 2F00      		move.l %d0,-(%sp)
 191               		.cfi_def_cfa_offset 24
 192 00b8 4E93      		jsr (%a3)
 193               	.LVL25:
  48:csys68k.c     ****     for (j = 0; j < 300; j++);
 194               		.loc 1 48 5 view .LVU55
 195               		.loc 1 48 19 view .LVU56
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 196               		.loc 1 43 28 view .LVU57
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 197               		.loc 1 43 17 view .LVU58
 198 00ba 588F      		addq.l #4,%sp
 199               		.cfi_def_cfa_offset 20
 200 00bc B48A      		cmp.l %a2,%d2
 201 00be 66E8      		jne .L22
 202               	.LVL26:
 203               	.L25:
  49:csys68k.c     ****   }
  50:csys68k.c     ****   return (nbytes);
  51:csys68k.c     **** }
 204               		.loc 1 51 1 is_stmt 0 view .LVU59
 205 00c0 2003      		move.l %d3,%d0
 206 00c2 4CDF 0C0C 		movem.l (%sp)+,#3084


 207 00c6 4E75      		rts
 208               	.LVL27:
 209               	.L28:
  45:csys68k.c     ****     }
 210               		.loc 1 45 7 is_stmt 1 view .LVU60
 211 00c8 4878 000D 		pea 13.w
 212               		.cfi_def_cfa_offset 24
 213 00cc 4E93      		jsr (%a3)
 214               	.LVL28:
  47:csys68k.c     ****     for (j = 0; j < 300; j++);
 215               		.loc 1 47 14 is_stmt 0 view .LVU61
 216 00ce 102A FFFF 		move.b -1(%a2),%d0
 217 00d2 588F      		addq.l #4,%sp
 218               		.cfi_def_cfa_offset 20
  47:csys68k.c     ****     for (j = 0; j < 300; j++);
 219               		.loc 1 47 5 is_stmt 1 view .LVU62
 220 00d4 0280 0000 		and.l #255,%d0
 220      00FF 
 221 00da 2F00      		move.l %d0,-(%sp)
 222               		.cfi_def_cfa_offset 24
 223 00dc 4E93      		jsr (%a3)
 224               	.LVL29:
  48:csys68k.c     ****   }
 225               		.loc 1 48 5 view .LVU63
  48:csys68k.c     ****   }
 226               		.loc 1 48 19 view .LVU64
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 227               		.loc 1 43 28 view .LVU65
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 228               		.loc 1 43 17 view .LVU66
 229 00de 588F      		addq.l #4,%sp
 230               		.cfi_def_cfa_offset 20
 231 00e0 B48A      		cmp.l %a2,%d2
 232 00e2 66C4      		jne .L22
 233 00e4 60DA      		jra .L25
 234               		.cfi_endproc
 235               	.LFE1:
 236               		.size	write, .-write
 237               	.Letext0:
 238               		.section	.debug_info,"",@progbits
 239               	.Ldebug_info0:
 240 0000 0000 017B 		.long	0x17b
 241 0004 0005      		.word	0x5
 242 0006 01        		.byte	0x1
 243 0007 04        		.byte	0x4
 244 0008 0000 0000 		.long	.Ldebug_abbrev0
 245 000c 06        		.uleb128 0x6
 246 000d 0000 0000 		.long	.LASF5
 247 0011 1D        		.byte	0x1d
 248 0012 0000 0000 		.long	.LASF6
 249 0016 0000 0000 		.long	.LASF7
 250 001a 0000 0000 		.long	.Ltext0
 251 001e 0000 00E6 		.long	.Letext0-.Ltext0
 252 0022 0000 0000 		.long	.Ldebug_line0
 253 0026 07        		.uleb128 0x7
 254 0027 0000 0000 		.long	.LASF0
 255 002b 01        		.byte	0x1


 256 002c 01        		.byte	0x1
 257 002d 0D        		.byte	0xd
 258 002e 0000 0038 		.long	0x38
 259 0032 08        		.uleb128 0x8
 260 0033 0000 0038 		.long	0x38
 261 0037 00        		.byte	0
 262 0038 04        		.uleb128 0x4
 263 0039 08        		.byte	0x8
 264 003a 0000 0000 		.long	.LASF2
 265 003e 09        		.uleb128 0x9
 266 003f 0000 0000 		.long	.LASF1
 267 0043 01        		.byte	0x1
 268 0044 02        		.byte	0x2
 269 0045 0D        		.byte	0xd
 270 0046 0000 0050 		.long	0x50
 271 004a 0000 0050 		.long	0x50
 272 004e 0A        		.uleb128 0xa
 273 004f 00        		.byte	0
 274 0050 04        		.uleb128 0x4
 275 0051 06        		.byte	0x6
 276 0052 0000 0000 		.long	.LASF3
 277 0056 0B        		.uleb128 0xb
 278 0057 0000 0000 		.long	.LASF8
 279 005b 01        		.byte	0x1
 280 005c 28        		.byte	0x28
 281 005d 05        		.byte	0x5
 282 005e 0000 00D0 		.long	0xd0
 283 0062 0000 0000 		.long	.LFB1
 284 0066 0000 0056 		.long	.LFE1-.LFB1
 285 006a 01        		.uleb128 0x1
 286 006b 9C        		.byte	0x9c
 287 006c 0000 00D0 		.long	0xd0
 288 0070 02        		.uleb128 0x2
 289 0071 6664 00   		.string	"fd"
 290 0074 28        		.byte	0x28
 291 0075 10        		.byte	0x10
 292 0076 0000 00D0 		.long	0xd0
 293 007a 02        		.uleb128 0x2
 294 007b 91        		.byte	0x91
 295 007c 00        		.sleb128 0
 296 007d 02        		.uleb128 0x2
 297 007e 6275 6600 		.string	"buf"
 298 0082 28        		.byte	0x28
 299 0083 1A        		.byte	0x1a
 300 0084 0000 00D7 		.long	0xd7
 301 0088 02        		.uleb128 0x2
 302 0089 91        		.byte	0x91
 303 008a 04        		.sleb128 4
 304 008b 05        		.uleb128 0x5
 305 008c 0000 0000 		.long	.LASF4
 306 0090 28        		.byte	0x28
 307 0091 23        		.byte	0x23
 308 0092 0000 00D0 		.long	0xd0
 309 0096 02        		.uleb128 0x2
 310 0097 91        		.byte	0x91
 311 0098 08        		.sleb128 8
 312 0099 03        		.uleb128 0x3


 313 009a 6900      		.string	"i"
 314 009c 2A        		.byte	0x2a
 315 009d 07        		.byte	0x7
 316 009e 0000 00D0 		.long	0xd0
 317 00a2 0000 0000 		.long	.LLST2
 318 00a6 0000 0000 		.long	.LVUS2
 319 00aa 0C        		.uleb128 0xc
 320 00ab 6A00      		.string	"j"
 321 00ad 01        		.byte	0x1
 322 00ae 2A        		.byte	0x2a
 323 00af 0A        		.byte	0xa
 324 00b0 0000 00D0 		.long	0xd0
 325 00b4 01        		.uleb128 0x1
 326 00b5 0000 0000 		.long	.LVL25
 327 00b9 0000 0026 		.long	0x26
 328 00bd 01        		.uleb128 0x1
 329 00be 0000 0000 		.long	.LVL28
 330 00c2 0000 0026 		.long	0x26
 331 00c6 01        		.uleb128 0x1
 332 00c7 0000 0000 		.long	.LVL29
 333 00cb 0000 0026 		.long	0x26
 334 00cf 00        		.byte	0
 335 00d0 0D        		.uleb128 0xd
 336 00d1 04        		.byte	0x4
 337 00d2 05        		.byte	0x5
 338 00d3 696E 7400 		.string	"int"
 339 00d7 0E        		.uleb128 0xe
 340 00d8 04        		.byte	0x4
 341 00d9 0000 0050 		.long	0x50
 342 00dd 0F        		.uleb128 0xf
 343 00de 0000 0000 		.long	.LASF9
 344 00e2 01        		.byte	0x1
 345 00e3 04        		.byte	0x4
 346 00e4 05        		.byte	0x5
 347 00e5 0000 00D0 		.long	0xd0
 348 00e9 0000 0000 		.long	.LFB0
 349 00ed 0000 0090 		.long	.LFE0-.LFB0
 350 00f1 01        		.uleb128 0x1
 351 00f2 9C        		.byte	0x9c
 352 00f3 02        		.uleb128 0x2
 353 00f4 6664 00   		.string	"fd"
 354 00f7 04        		.byte	0x4
 355 00f8 0E        		.byte	0xe
 356 00f9 0000 00D0 		.long	0xd0
 357 00fd 02        		.uleb128 0x2
 358 00fe 91        		.byte	0x91
 359 00ff 00        		.sleb128 0
 360 0100 02        		.uleb128 0x2
 361 0101 6275 6600 		.string	"buf"
 362 0105 04        		.byte	0x4
 363 0106 18        		.byte	0x18
 364 0107 0000 00D7 		.long	0xd7
 365 010b 02        		.uleb128 0x2
 366 010c 91        		.byte	0x91
 367 010d 04        		.sleb128 4
 368 010e 05        		.uleb128 0x5
 369 010f 0000 0000 		.long	.LASF4


 370 0113 04        		.byte	0x4
 371 0114 21        		.byte	0x21
 372 0115 0000 00D0 		.long	0xd0
 373 0119 02        		.uleb128 0x2
 374 011a 91        		.byte	0x91
 375 011b 08        		.sleb128 8
 376 011c 03        		.uleb128 0x3
 377 011d 6300      		.string	"c"
 378 011f 06        		.byte	0x6
 379 0120 08        		.byte	0x8
 380 0121 0000 0050 		.long	0x50
 381 0125 0000 0000 		.long	.LLST0
 382 0129 0000 0000 		.long	.LVUS0
 383 012d 03        		.uleb128 0x3
 384 012e 6900      		.string	"i"
 385 0130 07        		.byte	0x7
 386 0131 08        		.byte	0x8
 387 0132 0000 00D0 		.long	0xd0
 388 0136 0000 0000 		.long	.LLST1
 389 013a 0000 0000 		.long	.LVUS1
 390 013e 01        		.uleb128 0x1
 391 013f 0000 0000 		.long	.LVL3
 392 0143 0000 003E 		.long	0x3e
 393 0147 01        		.uleb128 0x1
 394 0148 0000 0000 		.long	.LVL6
 395 014c 0000 0026 		.long	0x26
 396 0150 01        		.uleb128 0x1
 397 0151 0000 0000 		.long	.LVL11
 398 0155 0000 0026 		.long	0x26
 399 0159 01        		.uleb128 0x1
 400 015a 0000 0000 		.long	.LVL12
 401 015e 0000 0026 		.long	0x26
 402 0162 01        		.uleb128 0x1
 403 0163 0000 0000 		.long	.LVL17
 404 0167 0000 0026 		.long	0x26
 405 016b 01        		.uleb128 0x1
 406 016c 0000 0000 		.long	.LVL18
 407 0170 0000 0026 		.long	0x26
 408 0174 01        		.uleb128 0x1
 409 0175 0000 0000 		.long	.LVL19
 410 0179 0000 0026 		.long	0x26
 411 017d 00        		.byte	0
 412 017e 00        		.byte	0
 413               		.section	.debug_abbrev,"",@progbits
 414               	.Ldebug_abbrev0:
 415 0000 01        		.uleb128 0x1
 416 0001 48        		.uleb128 0x48
 417 0002 00        		.byte	0
 418 0003 7D        		.uleb128 0x7d
 419 0004 01        		.uleb128 0x1
 420 0005 7F        		.uleb128 0x7f
 421 0006 13        		.uleb128 0x13
 422 0007 00        		.byte	0
 423 0008 00        		.byte	0
 424 0009 02        		.uleb128 0x2
 425 000a 05        		.uleb128 0x5
 426 000b 00        		.byte	0


 427 000c 03        		.uleb128 0x3
 428 000d 08        		.uleb128 0x8
 429 000e 3A        		.uleb128 0x3a
 430 000f 21        		.uleb128 0x21
 431 0010 01        		.sleb128 1
 432 0011 3B        		.uleb128 0x3b
 433 0012 0B        		.uleb128 0xb
 434 0013 39        		.uleb128 0x39
 435 0014 0B        		.uleb128 0xb
 436 0015 49        		.uleb128 0x49
 437 0016 13        		.uleb128 0x13
 438 0017 02        		.uleb128 0x2
 439 0018 18        		.uleb128 0x18
 440 0019 00        		.byte	0
 441 001a 00        		.byte	0
 442 001b 03        		.uleb128 0x3
 443 001c 34        		.uleb128 0x34
 444 001d 00        		.byte	0
 445 001e 03        		.uleb128 0x3
 446 001f 08        		.uleb128 0x8
 447 0020 3A        		.uleb128 0x3a
 448 0021 21        		.uleb128 0x21
 449 0022 01        		.sleb128 1
 450 0023 3B        		.uleb128 0x3b
 451 0024 0B        		.uleb128 0xb
 452 0025 39        		.uleb128 0x39
 453 0026 0B        		.uleb128 0xb
 454 0027 49        		.uleb128 0x49
 455 0028 13        		.uleb128 0x13
 456 0029 02        		.uleb128 0x2
 457 002a 17        		.uleb128 0x17
 458 002b B742      		.uleb128 0x2137
 459 002d 17        		.uleb128 0x17
 460 002e 00        		.byte	0
 461 002f 00        		.byte	0
 462 0030 04        		.uleb128 0x4
 463 0031 24        		.uleb128 0x24
 464 0032 00        		.byte	0
 465 0033 0B        		.uleb128 0xb
 466 0034 21        		.uleb128 0x21
 467 0035 01        		.sleb128 1
 468 0036 3E        		.uleb128 0x3e
 469 0037 0B        		.uleb128 0xb
 470 0038 03        		.uleb128 0x3
 471 0039 0E        		.uleb128 0xe
 472 003a 00        		.byte	0
 473 003b 00        		.byte	0
 474 003c 05        		.uleb128 0x5
 475 003d 05        		.uleb128 0x5
 476 003e 00        		.byte	0
 477 003f 03        		.uleb128 0x3
 478 0040 0E        		.uleb128 0xe
 479 0041 3A        		.uleb128 0x3a
 480 0042 21        		.uleb128 0x21
 481 0043 01        		.sleb128 1
 482 0044 3B        		.uleb128 0x3b
 483 0045 0B        		.uleb128 0xb


 484 0046 39        		.uleb128 0x39
 485 0047 0B        		.uleb128 0xb
 486 0048 49        		.uleb128 0x49
 487 0049 13        		.uleb128 0x13
 488 004a 02        		.uleb128 0x2
 489 004b 18        		.uleb128 0x18
 490 004c 00        		.byte	0
 491 004d 00        		.byte	0
 492 004e 06        		.uleb128 0x6
 493 004f 11        		.uleb128 0x11
 494 0050 01        		.byte	0x1
 495 0051 25        		.uleb128 0x25
 496 0052 0E        		.uleb128 0xe
 497 0053 13        		.uleb128 0x13
 498 0054 0B        		.uleb128 0xb
 499 0055 03        		.uleb128 0x3
 500 0056 0E        		.uleb128 0xe
 501 0057 1B        		.uleb128 0x1b
 502 0058 0E        		.uleb128 0xe
 503 0059 11        		.uleb128 0x11
 504 005a 01        		.uleb128 0x1
 505 005b 12        		.uleb128 0x12
 506 005c 06        		.uleb128 0x6
 507 005d 10        		.uleb128 0x10
 508 005e 17        		.uleb128 0x17
 509 005f 00        		.byte	0
 510 0060 00        		.byte	0
 511 0061 07        		.uleb128 0x7
 512 0062 2E        		.uleb128 0x2e
 513 0063 01        		.byte	0x1
 514 0064 3F        		.uleb128 0x3f
 515 0065 19        		.uleb128 0x19
 516 0066 03        		.uleb128 0x3
 517 0067 0E        		.uleb128 0xe
 518 0068 3A        		.uleb128 0x3a
 519 0069 0B        		.uleb128 0xb
 520 006a 3B        		.uleb128 0x3b
 521 006b 0B        		.uleb128 0xb
 522 006c 39        		.uleb128 0x39
 523 006d 0B        		.uleb128 0xb
 524 006e 27        		.uleb128 0x27
 525 006f 19        		.uleb128 0x19
 526 0070 3C        		.uleb128 0x3c
 527 0071 19        		.uleb128 0x19
 528 0072 01        		.uleb128 0x1
 529 0073 13        		.uleb128 0x13
 530 0074 00        		.byte	0
 531 0075 00        		.byte	0
 532 0076 08        		.uleb128 0x8
 533 0077 05        		.uleb128 0x5
 534 0078 00        		.byte	0
 535 0079 49        		.uleb128 0x49
 536 007a 13        		.uleb128 0x13
 537 007b 00        		.byte	0
 538 007c 00        		.byte	0
 539 007d 09        		.uleb128 0x9
 540 007e 2E        		.uleb128 0x2e


 541 007f 01        		.byte	0x1
 542 0080 3F        		.uleb128 0x3f
 543 0081 19        		.uleb128 0x19
 544 0082 03        		.uleb128 0x3
 545 0083 0E        		.uleb128 0xe
 546 0084 3A        		.uleb128 0x3a
 547 0085 0B        		.uleb128 0xb
 548 0086 3B        		.uleb128 0x3b
 549 0087 0B        		.uleb128 0xb
 550 0088 39        		.uleb128 0x39
 551 0089 0B        		.uleb128 0xb
 552 008a 49        		.uleb128 0x49
 553 008b 13        		.uleb128 0x13
 554 008c 3C        		.uleb128 0x3c
 555 008d 19        		.uleb128 0x19
 556 008e 01        		.uleb128 0x1
 557 008f 13        		.uleb128 0x13
 558 0090 00        		.byte	0
 559 0091 00        		.byte	0
 560 0092 0A        		.uleb128 0xa
 561 0093 18        		.uleb128 0x18
 562 0094 00        		.byte	0
 563 0095 00        		.byte	0
 564 0096 00        		.byte	0
 565 0097 0B        		.uleb128 0xb
 566 0098 2E        		.uleb128 0x2e
 567 0099 01        		.byte	0x1
 568 009a 3F        		.uleb128 0x3f
 569 009b 19        		.uleb128 0x19
 570 009c 03        		.uleb128 0x3
 571 009d 0E        		.uleb128 0xe
 572 009e 3A        		.uleb128 0x3a
 573 009f 0B        		.uleb128 0xb
 574 00a0 3B        		.uleb128 0x3b
 575 00a1 0B        		.uleb128 0xb
 576 00a2 39        		.uleb128 0x39
 577 00a3 0B        		.uleb128 0xb
 578 00a4 27        		.uleb128 0x27
 579 00a5 19        		.uleb128 0x19
 580 00a6 49        		.uleb128 0x49
 581 00a7 13        		.uleb128 0x13
 582 00a8 11        		.uleb128 0x11
 583 00a9 01        		.uleb128 0x1
 584 00aa 12        		.uleb128 0x12
 585 00ab 06        		.uleb128 0x6
 586 00ac 40        		.uleb128 0x40
 587 00ad 18        		.uleb128 0x18
 588 00ae 7A        		.uleb128 0x7a
 589 00af 19        		.uleb128 0x19
 590 00b0 01        		.uleb128 0x1
 591 00b1 13        		.uleb128 0x13
 592 00b2 00        		.byte	0
 593 00b3 00        		.byte	0
 594 00b4 0C        		.uleb128 0xc
 595 00b5 34        		.uleb128 0x34
 596 00b6 00        		.byte	0
 597 00b7 03        		.uleb128 0x3


 598 00b8 08        		.uleb128 0x8
 599 00b9 3A        		.uleb128 0x3a
 600 00ba 0B        		.uleb128 0xb
 601 00bb 3B        		.uleb128 0x3b
 602 00bc 0B        		.uleb128 0xb
 603 00bd 39        		.uleb128 0x39
 604 00be 0B        		.uleb128 0xb
 605 00bf 49        		.uleb128 0x49
 606 00c0 13        		.uleb128 0x13
 607 00c1 00        		.byte	0
 608 00c2 00        		.byte	0
 609 00c3 0D        		.uleb128 0xd
 610 00c4 24        		.uleb128 0x24
 611 00c5 00        		.byte	0
 612 00c6 0B        		.uleb128 0xb
 613 00c7 0B        		.uleb128 0xb
 614 00c8 3E        		.uleb128 0x3e
 615 00c9 0B        		.uleb128 0xb
 616 00ca 03        		.uleb128 0x3
 617 00cb 08        		.uleb128 0x8
 618 00cc 00        		.byte	0
 619 00cd 00        		.byte	0
 620 00ce 0E        		.uleb128 0xe
 621 00cf 0F        		.uleb128 0xf
 622 00d0 00        		.byte	0
 623 00d1 0B        		.uleb128 0xb
 624 00d2 0B        		.uleb128 0xb
 625 00d3 49        		.uleb128 0x49
 626 00d4 13        		.uleb128 0x13
 627 00d5 00        		.byte	0
 628 00d6 00        		.byte	0
 629 00d7 0F        		.uleb128 0xf
 630 00d8 2E        		.uleb128 0x2e
 631 00d9 01        		.byte	0x1
 632 00da 3F        		.uleb128 0x3f
 633 00db 19        		.uleb128 0x19
 634 00dc 03        		.uleb128 0x3
 635 00dd 0E        		.uleb128 0xe
 636 00de 3A        		.uleb128 0x3a
 637 00df 0B        		.uleb128 0xb
 638 00e0 3B        		.uleb128 0x3b
 639 00e1 0B        		.uleb128 0xb
 640 00e2 39        		.uleb128 0x39
 641 00e3 0B        		.uleb128 0xb
 642 00e4 27        		.uleb128 0x27
 643 00e5 19        		.uleb128 0x19
 644 00e6 49        		.uleb128 0x49
 645 00e7 13        		.uleb128 0x13
 646 00e8 11        		.uleb128 0x11
 647 00e9 01        		.uleb128 0x1
 648 00ea 12        		.uleb128 0x12
 649 00eb 06        		.uleb128 0x6
 650 00ec 40        		.uleb128 0x40
 651 00ed 18        		.uleb128 0x18
 652 00ee 7A        		.uleb128 0x7a
 653 00ef 19        		.uleb128 0x19
 654 00f0 00        		.byte	0


 655 00f1 00        		.byte	0
 656 00f2 00        		.byte	0
 657               		.section	.debug_loclists,"",@progbits
 658 0000 0000 00E3 		.long	.Ldebug_loc3-.Ldebug_loc2
 659               	.Ldebug_loc2:
 660 0004 0005      		.word	0x5
 661 0006 04        		.byte	0x4
 662 0007 00        		.byte	0
 663 0008 0000 0000 		.long	0
 664               	.Ldebug_loc0:
 665               	.LVUS2:
 666 000c 02        		.uleb128 .LVU50
 667 000d 00        		.uleb128 .LVU51
 668 000e 00        		.uleb128 .LVU51
 669 000f 00        		.uleb128 .LVU53
 670 0010 00        		.uleb128 .LVU53
 671 0011 03        		.uleb128 .LVU58
 672 0012 03        		.uleb128 .LVU58
 673 0013 00        		.uleb128 .LVU59
 674 0014 00        		.uleb128 .LVU60
 675 0015 03        		.uleb128 .LVU66
 676 0016 03        		.uleb128 .LVU66
 677 0017 00        		.uleb128 0
 678               	.LLST2:
 679 0018 04        		.byte	0x4
 680 0019 9801      		.uleb128 .LVL22-.Ltext0
 681 001b A801      		.uleb128 .LVL23-.Ltext0
 682 001d 02        		.uleb128 0x2
 683 001e 30        		.byte	0x30
 684 001f 9F        		.byte	0x9f
 685 0020 04        		.byte	0x4
 686 0021 A801      		.uleb128 .LVL23-.Ltext0
 687 0023 AA01      		.uleb128 .LVL24-.Ltext0
 688 0025 07        		.uleb128 0x7
 689 0026 7A        		.byte	0x7a
 690 0027 00        		.sleb128 0
 691 0028 91        		.byte	0x91
 692 0029 74        		.sleb128 -12
 693 002a 06        		.byte	0x6
 694 002b 1C        		.byte	0x1c
 695 002c 9F        		.byte	0x9f
 696 002d 04        		.byte	0x4
 697 002e AA01      		.uleb128 .LVL24-.Ltext0
 698 0030 BA01      		.uleb128 .LVL25-.Ltext0
 699 0032 08        		.uleb128 0x8
 700 0033 91        		.byte	0x91
 701 0034 74        		.sleb128 -12
 702 0035 06        		.byte	0x6
 703 0036 20        		.byte	0x20
 704 0037 7A        		.byte	0x7a
 705 0038 00        		.sleb128 0
 706 0039 22        		.byte	0x22
 707 003a 9F        		.byte	0x9f
 708 003b 04        		.byte	0x4
 709 003c BA01      		.uleb128 .LVL25-.Ltext0
 710 003e C001      		.uleb128 .LVL26-.Ltext0
 711 0040 07        		.uleb128 0x7


 712 0041 7A        		.byte	0x7a
 713 0042 00        		.sleb128 0
 714 0043 91        		.byte	0x91
 715 0044 74        		.sleb128 -12
 716 0045 06        		.byte	0x6
 717 0046 1C        		.byte	0x1c
 718 0047 9F        		.byte	0x9f
 719 0048 04        		.byte	0x4
 720 0049 C801      		.uleb128 .LVL27-.Ltext0
 721 004b DE01      		.uleb128 .LVL29-.Ltext0
 722 004d 08        		.uleb128 0x8
 723 004e 91        		.byte	0x91
 724 004f 74        		.sleb128 -12
 725 0050 06        		.byte	0x6
 726 0051 20        		.byte	0x20
 727 0052 7A        		.byte	0x7a
 728 0053 00        		.sleb128 0
 729 0054 22        		.byte	0x22
 730 0055 9F        		.byte	0x9f
 731 0056 04        		.byte	0x4
 732 0057 DE01      		.uleb128 .LVL29-.Ltext0
 733 0059 E601      		.uleb128 .LFE1-.Ltext0
 734 005b 07        		.uleb128 0x7
 735 005c 7A        		.byte	0x7a
 736 005d 00        		.sleb128 0
 737 005e 91        		.byte	0x91
 738 005f 74        		.sleb128 -12
 739 0060 06        		.byte	0x6
 740 0061 1C        		.byte	0x1c
 741 0062 9F        		.byte	0x9f
 742 0063 00        		.byte	0
 743               	.LVUS0:
 744 0064 00        		.uleb128 .LVU10
 745 0065 00        		.uleb128 .LVU16
 746 0066 00        		.uleb128 .LVU16
 747 0067 00        		.uleb128 .LVU24
 748 0068 00        		.uleb128 .LVU25
 749 0069 00        		.uleb128 .LVU26
 750 006a 00        		.uleb128 .LVU26
 751 006b 00        		.uleb128 .LVU34
 752 006c 00        		.uleb128 .LVU35
 753 006d 00        		.uleb128 .LVU39
 754 006e 00        		.uleb128 .LVU39
 755 006f 00        		.uleb128 0
 756               	.LLST0:
 757 0070 04        		.byte	0x4
 758 0071 22        		.uleb128 .LVL4-.Ltext0
 759 0072 36        		.uleb128 .LVL5-.Ltext0
 760 0073 01        		.uleb128 0x1
 761 0074 50        		.byte	0x50
 762 0075 04        		.byte	0x4
 763 0076 36        		.uleb128 .LVL5-.Ltext0
 764 0077 48        		.uleb128 .LVL9-.Ltext0
 765 0078 01        		.uleb128 0x1
 766 0079 52        		.byte	0x52
 767 007a 04        		.byte	0x4
 768 007b 50        		.uleb128 .LVL10-.Ltext0


 769 007c 55        		.uleb128 .LVL11-1-.Ltext0
 770 007d 01        		.uleb128 0x1
 771 007e 50        		.byte	0x50
 772 007f 04        		.byte	0x4
 773 0080 55        		.uleb128 .LVL11-1-.Ltext0
 774 0081 6C        		.uleb128 .LVL14-.Ltext0
 775 0082 01        		.uleb128 0x1
 776 0083 52        		.byte	0x52
 777 0084 04        		.byte	0x4
 778 0085 6E        		.uleb128 .LVL15-.Ltext0
 779 0086 79        		.uleb128 .LVL17-1-.Ltext0
 780 0087 01        		.uleb128 0x1
 781 0088 50        		.byte	0x50
 782 0089 04        		.byte	0x4
 783 008a 79        		.uleb128 .LVL17-1-.Ltext0
 784 008b 9001      		.uleb128 .LFE0-.Ltext0
 785 008d 01        		.uleb128 0x1
 786 008e 52        		.byte	0x52
 787 008f 00        		.byte	0
 788               	.LVUS1:
 789 0090 03        		.uleb128 .LVU5
 790 0091 00        		.uleb128 .LVU8
 791 0092 00        		.uleb128 .LVU8
 792 0093 00        		.uleb128 .LVU21
 793 0094 00        		.uleb128 .LVU21
 794 0095 00        		.uleb128 .LVU22
 795 0096 00        		.uleb128 .LVU25
 796 0097 00        		.uleb128 .LVU32
 797 0098 00        		.uleb128 .LVU32
 798 0099 00        		.uleb128 .LVU34
 799 009a 00        		.uleb128 .LVU34
 800 009b 00        		.uleb128 .LVU35
 801 009c 00        		.uleb128 .LVU35
 802 009d 00        		.uleb128 .LVU38
 803 009e 00        		.uleb128 .LVU38
 804 009f 01        		.uleb128 .LVU42
 805 00a0 01        		.uleb128 .LVU42
 806 00a1 02        		.uleb128 .LVU43
 807 00a2 02        		.uleb128 .LVU43
 808 00a3 00        		.uleb128 .LVU44
 809               	.LLST1:
 810 00a4 04        		.byte	0x4
 811 00a5 0C        		.uleb128 .LVL1-.Ltext0
 812 00a6 1E        		.uleb128 .LVL2-.Ltext0
 813 00a7 02        		.uleb128 0x2
 814 00a8 30        		.byte	0x30
 815 00a9 9F        		.byte	0x9f
 816 00aa 04        		.byte	0x4
 817 00ab 1E        		.uleb128 .LVL2-.Ltext0
 818 00ac 42        		.uleb128 .LVL7-.Ltext0
 819 00ad 01        		.uleb128 0x1
 820 00ae 53        		.byte	0x53
 821 00af 04        		.byte	0x4
 822 00b0 42        		.uleb128 .LVL7-.Ltext0
 823 00b1 44        		.uleb128 .LVL8-.Ltext0
 824 00b2 03        		.uleb128 0x3
 825 00b3 73        		.byte	0x73


 826 00b4 7F        		.sleb128 -1
 827 00b5 9F        		.byte	0x9f
 828 00b6 04        		.byte	0x4
 829 00b7 50        		.uleb128 .LVL10-.Ltext0
 830 00b8 64        		.uleb128 .LVL13-.Ltext0
 831 00b9 01        		.uleb128 0x1
 832 00ba 53        		.byte	0x53
 833 00bb 04        		.byte	0x4
 834 00bc 64        		.uleb128 .LVL13-.Ltext0
 835 00bd 6C        		.uleb128 .LVL14-.Ltext0
 836 00be 03        		.uleb128 0x3
 837 00bf 73        		.byte	0x73
 838 00c0 7F        		.sleb128 -1
 839 00c1 9F        		.byte	0x9f
 840 00c2 04        		.byte	0x4
 841 00c3 6C        		.uleb128 .LVL14-.Ltext0
 842 00c4 6E        		.uleb128 .LVL15-.Ltext0
 843 00c5 03        		.uleb128 0x3
 844 00c6 70        		.byte	0x70
 845 00c7 7F        		.sleb128 -1
 846 00c8 9F        		.byte	0x9f
 847 00c9 04        		.byte	0x4
 848 00ca 6E        		.uleb128 .LVL15-.Ltext0
 849 00cb 74        		.uleb128 .LVL16-.Ltext0
 850 00cc 01        		.uleb128 0x1
 851 00cd 53        		.byte	0x53
 852 00ce 04        		.byte	0x4
 853 00cf 74        		.uleb128 .LVL16-.Ltext0
 854 00d0 8601      		.uleb128 .LVL19-.Ltext0
 855 00d2 03        		.uleb128 0x3
 856 00d3 73        		.byte	0x73
 857 00d4 01        		.sleb128 1
 858 00d5 9F        		.byte	0x9f
 859 00d6 04        		.byte	0x4
 860 00d7 8601      		.uleb128 .LVL19-.Ltext0
 861 00d9 8601      		.uleb128 .LVL19-.Ltext0
 862 00db 01        		.uleb128 0x1
 863 00dc 53        		.byte	0x53
 864 00dd 04        		.byte	0x4
 865 00de 8601      		.uleb128 .LVL19-.Ltext0
 866 00e0 8A01      		.uleb128 .LVL20-.Ltext0
 867 00e2 03        		.uleb128 0x3
 868 00e3 73        		.byte	0x73
 869 00e4 7F        		.sleb128 -1
 870 00e5 9F        		.byte	0x9f
 871 00e6 00        		.byte	0
 872               	.Ldebug_loc3:
 873               		.section	.debug_aranges,"",@progbits
 874 0000 0000 001C 		.long	0x1c
 875 0004 0002      		.word	0x2
 876 0006 0000 0000 		.long	.Ldebug_info0
 877 000a 04        		.byte	0x4
 878 000b 00        		.byte	0
 879 000c 0000      		.word	0
 880 000e 0000      		.word	0
 881 0010 0000 0000 		.long	.Ltext0
 882 0014 0000 00E6 		.long	.Letext0-.Ltext0


 883 0018 0000 0000 		.long	0
 884 001c 0000 0000 		.long	0
 885               		.section	.debug_line,"",@progbits
 886               	.Ldebug_line0:
 887 0000 0000 0114 		.section	.debug_str,"MS",@progbits,1
 887      0003 0000 
 887      0020 0201 
 887      FB0E 0D00 
 887      0101 0101 
 888               	.LASF0:
 889 0000 6F75 7462 		.string	"outbyte"
 889      7974 6500 
 890               	.LASF7:
 891 0008 2F68 6F6D 		.string	"/home/students/22nen/1TE22129K/mtk/mtk_git/sofutojikken/jikken2/theme2/mtk"
 891      652F 7374 
 891      7564 656E 
 891      7473 2F32 
 891      326E 656E 
 892               	.LASF4:
 893 0053 6E62 7974 		.string	"nbytes"
 893      6573 00
 894               	.LASF9:
 895 005a 7265 6164 		.string	"read"
 895      00
 896               	.LASF3:
 897 005f 6368 6172 		.string	"char"
 897      00
 898               	.LASF6:
 899 0064 6373 7973 		.string	"csys68k.c"
 899      3638 6B2E 
 899      6300 
 900               	.LASF5:
 901 006e 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 901      4331 3720 
 901      3131 2E34 
 901      2E30 202D 
 901      6D63 7075 
 902               	.LASF2:
 903 00b2 756E 7369 		.string	"unsigned char"
 903      676E 6564 
 903      2063 6861 
 903      7200 
 904               	.LASF8:
 905 00c0 7772 6974 		.string	"write"
 905      6500 
 906               	.LASF1:
 907 00c6 696E 6279 		.string	"inbyte"
 907      7465 00
 908               		.ident	"GCC: (GNU) 11.4.0"




   1               	.include "equdefs.inc"
   1               	    .equ    SYSCALL_NUM_GETSTRING, 1 
   2               	    .equ    SYSCALL_NUM_PUTSTRING, 2 
   3               	    .equ    SYSCALL_NUM_RESET_TIMER, 3 
   4               	    .equ    SYSCALL_NUM_SET_TIMER, 4 
   5               	
   6               	    .equ    REGBASE, 0xFFF000 
   7               	    .equ    IOBASE, 0x00d00000
   8               	
   9               	    .equ    IVR, REGBASE+0x300 
  10               	    .equ    IMR, REGBASE+0x304 
  11               	    .equ    ISR, REGBASE+0x30c 
  12               	    .equ    IPR, REGBASE+0x310 
  13               	    
  14               	    .equ    TCTL1, REGBASE+0x600 	
  15               	    .equ    TPRER1, REGBASE+0x602 	
  16               	    .equ    TCMP1, REGBASE+0x604 	
  17               	    .equ    TCN1, REGBASE+0x608 	
  18               	    .equ    TSTAT1, REGBASE+0x60a 	
  19               	    
  20               	    .equ    USTCNT1, REGBASE+0x900 	
  21               	    .equ    UBAUD1, REGBASE+0x902 	
  22               	    .equ    URX1, REGBASE+0x904 	
  23               	    .equ    UTX1, REGBASE+0x906 	
  24               	    
  25               	    .equ    LED7, IOBASE+0x000002f 	
  26               	    .equ    LED6, IOBASE+0x000002d 	
  27               	    .equ    LED5, IOBASE+0x000002b
  28               	    .equ    LED4, IOBASE+0x0000029
  29               	    .equ    LED3, IOBASE+0x000003f
  30               	    .equ    LED2, IOBASE+0x000003d
  31               	    .equ    LED1, IOBASE+0x000003b
  32               	    .equ    LED0, IOBASE+0x0000039
  33               	    .equ    PUSHSW, 0xFFF419 		
   2               	
   3               	.global inbyte
   4               	
   5               	.text
   6               	.even
   7               	
   8               	inbyte:
   9 0000 48E7 7080 		movem.l	%a0/%d1-%d3, -(%sp)
  10 0004 41F9 0000 		lea.l	BUF_INBYTE, %a0
  10      0000 
  11               		
  12               	inbyte_loop:
  13               		/* At some point, GETSTRING is called */
  14 000a 7001      		move.l	#SYSCALL_NUM_GETSTRING, %d0				/* GETSTRING*/
  15 000c 7200      		move.l	#0, %d1				/* channel */
  16 000e 2408      		move.l	%a0, %d2			/* head destination */
  17 0010 7601      		move.l	#1, %d3				/* no. of data to be read */
  18 0012 4E40      		trap	#0				
  19               		
  20 0014 0C80 0000 		cmp.l	#0, %d0
  20      0000 
  21 001a 6700 FFEE 		beq	inbyte_loop
  22               	


  23 001e 1010      		move.b	(%a0), %d0
  24 0020 13C0 00D0 		move.b	%d0, LED7
  24      002F 
  25               	
  26 0026 4CDF 010E 		movem.l	(%sp)+, %a0/%d1-%d3
  27               		
  28 002a 4E75      		rts
  29               	
  30               	inkey:
  31 002c 48E7 7080 		movem.l	%a0/%d1-%d3, -(%sp)
  32 0030 41F9 0000 		lea.l	BUF_INBYTE, %a0
  32      0000 
  33               		
  34 0036 2200      		move.l	%d0, %d1			/* put channel number*/
  35               	
  36 0038 7001      		move.l	#SYSCALL_NUM_GETSTRING, %d0			
  37 003a 2408      		move.l	%a0, %d2			/* head destination */
  38 003c 7601      		move.l	#1, %d3				/* no. of data to be read */
  39 003e 4E40      		trap	#0				
  40               	
  41 0040 0C80 0000 		cmp.l	#0, %d0
  41      0000 
  42 0046 6700 0008 		beq	empty
  43               	
  44 004a 1010      		move.b	(%a0), %d0
  45 004c 4EFA 0004 		jmp	inkey_end
  46               		
  47               	empty:	
  48 0050 70FF      		move.l	#0xffffffff, %d0
  49               	
  50               	inkey_end:
  51 0052 4CDF 010E 		movem.l	(%sp)+, %a0/%d1-%d3
  52 0056 4E75      		rts
  53               	
  54               	.section .bss
  55 0000 00        	BUF_INBYTE: .ds.b 1
  56 0001 00        	    .even
  57               	




   1               	.include "equdefs.inc"
   1               	    .equ    SYSCALL_NUM_GETSTRING, 1 
   2               	    .equ    SYSCALL_NUM_PUTSTRING, 2 
   3               	    .equ    SYSCALL_NUM_RESET_TIMER, 3 
   4               	    .equ    SYSCALL_NUM_SET_TIMER, 4 
   5               	
   6               	    .equ    REGBASE, 0xFFF000 
   7               	    .equ    IOBASE, 0x00d00000
   8               	
   9               	    .equ    IVR, REGBASE+0x300 
  10               	    .equ    IMR, REGBASE+0x304 
  11               	    .equ    ISR, REGBASE+0x30c 
  12               	    .equ    IPR, REGBASE+0x310 
  13               	    
  14               	    .equ    TCTL1, REGBASE+0x600 	
  15               	    .equ    TPRER1, REGBASE+0x602 	
  16               	    .equ    TCMP1, REGBASE+0x604 	
  17               	    .equ    TCN1, REGBASE+0x608 	
  18               	    .equ    TSTAT1, REGBASE+0x60a 	
  19               	    
  20               	    .equ    USTCNT1, REGBASE+0x900 	
  21               	    .equ    UBAUD1, REGBASE+0x902 	
  22               	    .equ    URX1, REGBASE+0x904 	
  23               	    .equ    UTX1, REGBASE+0x906 	
  24               	    
  25               	    .equ    LED7, IOBASE+0x000002f 	
  26               	    .equ    LED6, IOBASE+0x000002d 	
  27               	    .equ    LED5, IOBASE+0x000002b
  28               	    .equ    LED4, IOBASE+0x0000029
  29               	    .equ    LED3, IOBASE+0x000003f
  30               	    .equ    LED2, IOBASE+0x000003d
  31               	    .equ    LED1, IOBASE+0x000003b
  32               	    .equ    LED0, IOBASE+0x0000039
  33               	    .equ    PUSHSW, 0xFFF419 		
   2               	
   3               	.global first_task
   4               	.global pv_handler
   5               	.global P
   6               	.global V
   7               	.global hard_clock
   8               	.global swtch
   9               	.global init_timer
  10               	
  11               	.extern p_body
  12               	.extern v_body
  13               	.extern curr_task
  14               	.extern addq
  15               	.extern sched
  16               	.extern ready /*points to the first task*/
  17               	.extern task_tab
  18               	.extern next_task
  19               	 
  20               	.section .text
  21               	.even
  22               	********************
  23               	** System call numbers 
  24               	******************** 


  25               	.equ    SYSCALL_P, 0
  26               	.equ    SYSCALL_V, 1
  27               	 
  28               	swtch:
  29 0000 40E7      		move.w %SR , -(%sp)/*SR is piled up on the stack so that the process can be returned by the RTE.*/
  30               		
  31 0002 48E7 FFFE 		movem.l %d0-%d7/%a0-%a6,-(%sp)/*Saving register of task under execution*/
  32 0006 4E69      		move.l %USP, %a1
  33 0008 2F09      		move.l %a1, -(%sp)
  34               	
  35 000a 2039 0000 		move.l curr_task,%d0 /*current task ID*/
  35      0000 
  36 0010 41F9 0000 		lea.l task_tab, %a0 /*save the pointer to the beginning of task_tab*/
  36      0000 
  37 0016 C0FC 0014 		mulu #20, %d0 /* because every element takes 4*5 bytes*/
  38 001a 5880      		addq.l #4,%d0 /*to access stack_ptr*/
  39 001c D1C0      		adda.l %d0, %a0 /*access the stack_ptr of curr_task in task_tab*/
  40 001e 208F      		move.l %sp, (%a0) /* record the SSP*/
  41               	
  42               		/*Substitute ‘next_task’ for ‘curr_task’*/
  43 0020 43F9 0000 		lea.l curr_task, %a1
  43      0000 
  44 0026 22B9 0000 		move.l next_task,(%a1)
  44      0000 
  45               	
  46               		/* Read out SSP of next task*/
  47 002c 2039 0000 		move.l curr_task,%d0 /*current task ID*/
  47      0000 
  48 0032 41F9 0000 		lea.l task_tab, %a0 /*save the pointer to the beginning of task_tab*/
  48      0000 
  49 0038 C0FC 0014 		mulu #20, %d0 /* because every element takes 4*5 bytes*/
  50 003c 5880      		addq.l #4,%d0 /*to access stack_ptr*/
  51 003e D1C0      		adda.l %d0, %a0 /*access the stack_ptr of curr_task in task_tab*/
  52 0040 2E50      		move.l (%a0), %sp /* read out next task's SSP*/
  53               	
  54               		/*Read out register of next task*/
  55 0042 225F      		move.l (%sp)+,%a1
  56 0044 4E61      		move.l %a1,%USP
  57 0046 4CDF 7FFF 		movem.l (%sp)+,%d0-%d7/%a0-%a6
  58               	
  59 004a 4E73      		rte
  60               	
  61               	*****************************************
  62               	** subroutine first_task
  63               	** To start user task: stack used by kernel is switched to the stack pointed by "curr_task"
  64               	** activated once (with "begin_sch()")
  65               	** ends with RTE
  66               	** needs to be in supervisor mode
  67               	*****************************************
  68               	first_task:
  69               		/* calcuate TCB's head address */
  70               		/* find the address of TCB of 'curr_task' */
  71 004c 4281      		clr.l	%d1
  72 004e 43F9 0000 		lea.l	task_tab, %a1
  72      0000 
  73 0054 2239 0000 		move.l	curr_task, %d1
  73      0000 


  74 005a C2FC 0014 		mulu	#20, %d1	/* TCB datatype takes up 20 bytes*/
  75 005e D3C1      		adda.l	%d1, %a1	/* add 20*curr_task to access task_tab[curr_task]*/
  76               	
  77               		/* restoration of values of USP and SSP */
  78               		/* restore the ssp's value recorded in this task's TCB & USP value recorded in the ss*/
  79 0060 D3FC 0000 		adda.l	#4, %a1		/* get stack pointer */
  79      0004 
  80 0066 2E51      		move.l	(%a1), %sp	/* restore stack pointer */
  81 0068 245F      		move.l	(%sp)+, %a2
  82 006a 4E62      		move.l	%a2, %USP	/* restore USP */
  83               		
  84               	
  85               		/* restoration of al of remained registers */
  86               		/* restore the values of remained 15 registers piled up on the supervisor's stack*/
  87 006c 4CDF 7FFF 		movem.l	(%sp)+, %d0-%d7/%a0-%a6
  88               	
  89               		/* start of user task */
  90               		/* execute the RTE instruction*/
  91 0070 4E73      		rte
  92               		
  93               		
  94               	******************************************
  95               	*** create the timer subroutines:
  96               	*** init_timer/Trap#0:OK/set_timer:OK/reset_timer:OK/hard_clock
  97               	******************************************
  98               	/* called from hardware intrruptprocessing interface for timer(prepared in 1st part) */
  99               	hard_clock: /* timer interrupt routine */
 100 0072 48E7 C040 		movem.l	%d0-%d1/%a1,-(%sp)  /*save register of task under execution(piled up in ss: executed in ti
 101               		/*to check if supervisor mode*/
 102 0076 224F      		move.l %sp, %a1
 103 0078 D3FC 0000 		adda.l #12,%a1
 103      000C 
 104 007e 3211      		move.w (%a1),%d1/*get SR value to %d1*/
 105 0080 0641 2000 		addi.w #0x2000,%d1
 106 0084 0C41 2000 		cmpi.w #0x2000,%d1 /*check if supervisor mode*/
 107 0088 6700 004A 		beq hard_clock_end
 108               		/*add "curr_task" to the end of 'ready' using addq() */
 109 008c 2F39 0000 		move.l curr_task,-(%sp)
 109      0000 
 110 0092 2F3C 0000 		move.l #ready, -(%sp)
 110      0000 
 111 0098 4EB9 0000 		jsr addq
 111      0000 
 112 009e 508F      		addq.l #8, %sp
 113               		
 114 00a0 224F      		movea.l %sp, %a1
 115 00a2 D3FC 0000 		adda.l 	#12,%a1
 115      000C 
 116 00a8 3211      		move.w 	(%a1),%d1	/*get SR value to %d1*/
 117 00aa 0641 2000 		addi.w 	#0x2000,%d1
 118 00ae 0C41 2000 		cmpi.w 	#0x2000,%d1 	/*check if supervisor mode*/
 119 00b2 6700 0020 		beq 	hard_clock_end
 120               		/* add "curr_task" to the end of 'ready' using addq() */
 121 00b6 2F39 0000 		move.l 	curr_task,-(%sp)
 121      0000 
 122 00bc 2F3C 0000 		move.l 	#ready, -(%sp)
 122      0000 


 123 00c2 4EB9 0000 		jsr 	addq
 123      0000 
 124 00c8 508F      		add.l 	#8, %sp
 125               	
 126               	
 127               		/* start "sched": the ID of task to be executed next='next_task' */
 128 00ca 4EB9 0000 		jsr sched
 128      0000 
 129               		/* start 'swtch'*/
 130 00d0 4EBA FF2E 		jsr swtch
 131               	
 132               	hard_clock_end:
 133 00d4 4CDF 0203 		movem.l (%sp)+, %d0-%d1/%a1
 134 00d8 4E75      		rts
 135               	
 136               	init_timer:	/* clock interrupt routine: generates hardware interruption by the timer control routin
 137 00da 48E7 E000 		movem.l %d0-%d2,-(%sp)
 138               		
 139 00de 7003      		move.l	#SYSCALL_NUM_RESET_TIMER, %d0
 140 00e0 4E40      		trap #0
 141               	
 142 00e2 7004      		move.l	#SYSCALL_NUM_SET_TIMER, %d0
 143 00e4 323C 2710 		move.w	#10000, %d1
 144 00e8 243C 0000 		move.l	#hard_clock, %d2
 144      0000 
 145 00ee 4E40      		trap	#0
 146               	
 147 00f0 4CDF 0007 		movem.l (%sp)+,%d0-%d2
 148 00f4 4E75      		rts
 149               	
 150               	********************************
 151               	** Entrance of P system call
 152               	** Input: D1 = semaphore ID
 153               	********************************
 154               	P:
 155 00f6 48E7 C000 		movem.l	%d0-%d1, -(%sp)
 156 00fa 2038 0000 		move.l	SYSCALL_P, %d0
 157 00fe 222F 000C 		move.l	12(%sp), %d1
 158 0102 4E41      		trap	#1
 159 0104 4CDF 0003 		movem.l	(%sp)+, %d0-%d1
 160 0108 4E75      		rts
 161               		
 162               	********************************
 163               	** Entrance of V system call
 164               	** Input: D1 = semaphore ID
 165               	********************************
 166               	V:
 167 010a 48E7 C000 		movem.l	%d0-%d1, -(%sp)
 168 010e 2038 0001 		move.l	SYSCALL_V, %d0
 169 0112 222F 000C 		move.l	12(%sp), %d1
 170 0116 4E41      		trap	#1
 171 0118 4CDF 0003 		movem.l	(%sp)+, %d0-%d1
 172 011c 4E75      		rts
 173               	
 174               	********************************
 175               	** TRAP #1 interrupt provessing routine
 176               	** D0 = P/V system call


 177               	** D1 = Semaphore ID
 178               	** According to D0, call p_body() or v_body()
 179               	********************************
 180               	pv_handler:
 181 011e 46FC 2700 		move.w	#0x2700, %SR
 182               	
 183 0122 48E7 4000 		movem.l	%d1, -(%sp)	/* save argument on top of stack */
 184               	
 185 0126 0C80 0000 		cmp.l	#0, %d0
 185      0000 
 186               	
 187 012c 6700 0010 		beq	CALL_P_BODY
 188 0130 0C80 0000 		cmp.l	#1, %d0
 188      0001 
 189 0136 6700 0010 		beq 	CALL_V_BODY
 190 013a 6000 0016 		bra	end_pv_handler
 191               	CALL_P_BODY:
 192 013e 4EB9 0000 		jsr	p_body
 192      0000 
 193 0144 6000 000C 		bra 	end_pv_handler
 194               	CALL_V_BODY:	
 195 0148 4EB9 0000 		jsr	v_body
 195      0000 
 196 014e 6000 0002 		bra	end_pv_handler
 197               	end_pv_handler:
 198 0152 4CDF 0002 		movem.l	(%sp)+, %d1
 199 0156 4E73      		rte




   1               	#NO_APP
   2               		.file	"mtk_c.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	init_kernel
   8               		.type	init_kernel, @function
   9               	init_kernel:
  10               	.LFB3:
  11               		.file 1 "mtk_c.c"
   1:mtk_c.c       **** #include <stdio.h>
   2:mtk_c.c       **** #include "mtk_c.h"
   3:mtk_c.c       **** 
   4:mtk_c.c       **** TASK_ID_TYPE curr_task;
   5:mtk_c.c       **** TASK_ID_TYPE new_task;
   6:mtk_c.c       **** TASK_ID_TYPE next_task;
   7:mtk_c.c       **** TASK_ID_TYPE ready;
   8:mtk_c.c       **** 
   9:mtk_c.c       **** SEMAPHORE_TYPE semaphore[NUMSEMAPHORE];
  10:mtk_c.c       **** TCB_TYPE task_tab[NUMTASK+1];
  11:mtk_c.c       **** STACK_TYPE stacks[NUMTASK];
  12:mtk_c.c       **** 
  13:mtk_c.c       **** void init_kernel() {
  12               		.loc 1 13 20 view -0
  13               		.cfi_startproc
  14:mtk_c.c       ****   //No arguments
  15:mtk_c.c       ****   //Returns nothing
  16:mtk_c.c       ****   
  17:mtk_c.c       ****   //TCB array's initialization: all elements are made empty
  18:mtk_c.c       ****   for(int i = 0; i <= NUMTASK; i++) {
  14               		.loc 1 18 3 view .LVU1
  15               	.LBB11:
  16               		.loc 1 18 7 view .LVU2
  17               	.LVL0:
  18               		.loc 1 18 20 view .LVU3
  19 0000 41F9 0000 		lea task_tab,%a0
  19      0000 
  20 0006 203C 0000 		move.l #task_tab+120,%d0
  20      0000 
  21               	.LVL1:
  22               	.L2:
  19:mtk_c.c       ****     task_tab[i].task_addr = NULL;
  23               		.loc 1 19 5 discriminator 3 view .LVU4
  24               		.loc 1 19 27 is_stmt 0 discriminator 3 view .LVU5
  25 000c 4290      		clr.l (%a0)
  20:mtk_c.c       ****     task_tab[i].stack_ptr = NULL;
  26               		.loc 1 20 5 is_stmt 1 discriminator 3 view .LVU6
  27               		.loc 1 20 27 is_stmt 0 discriminator 3 view .LVU7
  28 000e 42A8 0004 		clr.l 4(%a0)
  21:mtk_c.c       ****     task_tab[i].priority = 0;
  29               		.loc 1 21 5 is_stmt 1 discriminator 3 view .LVU8
  30               		.loc 1 21 26 is_stmt 0 discriminator 3 view .LVU9
  31 0012 42A8 0008 		clr.l 8(%a0)
  22:mtk_c.c       ****     task_tab[i].status = UNDEFINED;
  32               		.loc 1 22 5 is_stmt 1 discriminator 3 view .LVU10
  33               		.loc 1 22 24 is_stmt 0 discriminator 3 view .LVU11


  34 0016 42A8 000C 		clr.l 12(%a0)
  23:mtk_c.c       ****     task_tab[i].next = NULLTASKID;		
  35               		.loc 1 23 5 is_stmt 1 discriminator 3 view .LVU12
  36               		.loc 1 23 22 is_stmt 0 discriminator 3 view .LVU13
  37 001a 42A8 0010 		clr.l 16(%a0)
  18:mtk_c.c       ****     task_tab[i].task_addr = NULL;
  38               		.loc 1 18 33 is_stmt 1 discriminator 3 view .LVU14
  18:mtk_c.c       ****     task_tab[i].task_addr = NULL;
  39               		.loc 1 18 20 discriminator 3 view .LVU15
  40 001e 41E8 0014 		lea (20,%a0),%a0
  41 0022 B1C0      		cmp.l %d0,%a0
  42 0024 66E6      		jne .L2
  43               	.LBE11:
  24:mtk_c.c       ****   }
  25:mtk_c.c       ****   //Ready queue's initiaization: to be made empty (task ID = 0)
  26:mtk_c.c       ****   ready = NULLTASKID; //Task id = 0;
  44               		.loc 1 26 3 view .LVU16
  45               		.loc 1 26 9 is_stmt 0 view .LVU17
  46 0026 42B9 0000 		clr.l ready
  46      0000 
  27:mtk_c.c       **** 
  28:mtk_c.c       ****   //Registrate the P/V system call's interruption processing routine (pv_handler)
  29:mtk_c.c       ****   //set the interrupt vector of TRAP #1
  30:mtk_c.c       ****   *(int*) 0x084 = (int)(pv_handler);
  47               		.loc 1 30 3 is_stmt 1 view .LVU18
  48               		.loc 1 30 17 is_stmt 0 view .LVU19
  49 002c 21FC 0000 		move.l #pv_handler,132.w
  49      0000 0084 
  31:mtk_c.c       **** 
  32:mtk_c.c       ****   //Initialize the semaphore's value
  33:mtk_c.c       ****   for(int i=0; i < NUMSEMAPHORE; i++){
  50               		.loc 1 33 3 is_stmt 1 view .LVU20
  51               	.LBB12:
  52               		.loc 1 33 7 view .LVU21
  53               	.LVL2:
  54               		.loc 1 33 18 view .LVU22
  34:mtk_c.c       ****     semaphore[i].count = 1;
  55               		.loc 1 34 5 view .LVU23
  56               		.loc 1 34 24 is_stmt 0 view .LVU24
  57 0034 7001      		moveq #1,%d0
  58 0036 23C0 0000 		move.l %d0,semaphore
  58      0000 
  35:mtk_c.c       ****     semaphore[i].task_list = NULLTASKID;
  59               		.loc 1 35 5 is_stmt 1 view .LVU25
  60               		.loc 1 35 28 is_stmt 0 view .LVU26
  61 003c 42B9 0000 		clr.l semaphore+8
  61      0000 
  33:mtk_c.c       ****     semaphore[i].count = 1;
  62               		.loc 1 33 35 is_stmt 1 view .LVU27
  63               	.LVL3:
  33:mtk_c.c       ****     semaphore[i].count = 1;
  64               		.loc 1 33 18 view .LVU28
  34:mtk_c.c       ****     semaphore[i].count = 1;
  65               		.loc 1 34 5 view .LVU29
  34:mtk_c.c       ****     semaphore[i].count = 1;
  66               		.loc 1 34 24 is_stmt 0 view .LVU30
  67 0042 23C0 0000 		move.l %d0,semaphore+12


  67      0000 
  68               		.loc 1 35 5 is_stmt 1 view .LVU31
  69               		.loc 1 35 28 is_stmt 0 view .LVU32
  70 0048 42B9 0000 		clr.l semaphore+20
  70      0000 
  33:mtk_c.c       ****     semaphore[i].count = 1;
  71               		.loc 1 33 35 is_stmt 1 view .LVU33
  72               	.LVL4:
  33:mtk_c.c       ****     semaphore[i].count = 1;
  73               		.loc 1 33 18 view .LVU34
  34:mtk_c.c       ****     semaphore[i].count = 1;
  74               		.loc 1 34 5 view .LVU35
  34:mtk_c.c       ****     semaphore[i].count = 1;
  75               		.loc 1 34 24 is_stmt 0 view .LVU36
  76 004e 23C0 0000 		move.l %d0,semaphore+24
  76      0000 
  77               		.loc 1 35 5 is_stmt 1 view .LVU37
  78               		.loc 1 35 28 is_stmt 0 view .LVU38
  79 0054 42B9 0000 		clr.l semaphore+32
  79      0000 
  33:mtk_c.c       ****     semaphore[i].count = 1;
  80               		.loc 1 33 35 is_stmt 1 view .LVU39
  81               	.LVL5:
  33:mtk_c.c       ****     semaphore[i].count = 1;
  82               		.loc 1 33 18 view .LVU40
  83               	.LBE12:
  36:mtk_c.c       ****   }
  37:mtk_c.c       **** }
  84               		.loc 1 37 1 is_stmt 0 view .LVU41
  85 005a 4E75      		rts
  86               		.cfi_endproc
  87               	.LFE3:
  88               		.size	init_kernel, .-init_kernel
  89               		.align	2
  90               		.globl	set_task
  91               		.type	set_task, @function
  92               	set_task:
  93               	.LVL6:
  94               	.LFB4:
  38:mtk_c.c       **** 
  39:mtk_c.c       **** void set_task(void (*task_ptr)()) {
  95               		.loc 1 39 35 is_stmt 1 view -0
  96               		.cfi_startproc
  97               		.loc 1 39 35 is_stmt 0 view .LVU43
  98 005c 48E7 2030 		movem.l #8240,-(%sp)
  99               		.cfi_def_cfa_offset 16
 100               		.cfi_offset 2, -16
 101               		.cfi_offset 10, -12
 102               		.cfi_offset 11, -8
  40:mtk_c.c       ****   //Takes the pointer to the user task function as an argument
  41:mtk_c.c       ****   //Returns nothing
  42:mtk_c.c       ****   
  43:mtk_c.c       ****   //Determine the task ID
  44:mtk_c.c       ****   for (TASK_ID_TYPE i = 1; i <= NUMTASK; i++) {
 103               		.loc 1 44 3 is_stmt 1 view .LVU44
 104               	.LBB19:
 105               		.loc 1 44 8 view .LVU45


 106               	.LVL7:
 107               		.loc 1 44 30 view .LVU46
 108 0060 41F9 0000 		lea task_tab+32,%a0
 108      0000 
 109               		.loc 1 44 21 is_stmt 0 view .LVU47
 110 0066 7001      		moveq #1,%d0
 111               	.LVL8:
 112               	.L11:
  45:mtk_c.c       ****     // Find an empty slot in 'task_tab[]' omitting the 0th slot
  46:mtk_c.c       ****     if (task_tab[i].status != OCCUPIED) {
 113               		.loc 1 46 5 is_stmt 1 view .LVU48
 114               		.loc 1 46 8 is_stmt 0 view .LVU49
 115 0068 7201      		moveq #1,%d1
 116 006a B290      		cmp.l (%a0),%d1
 117 006c 6612      		jne .L16
  44:mtk_c.c       ****     // Find an empty slot in 'task_tab[]' omitting the 0th slot
 118               		.loc 1 44 43 is_stmt 1 discriminator 2 view .LVU50
 119 006e 5280      		addq.l #1,%d0
 120               	.LVL9:
  44:mtk_c.c       ****     // Find an empty slot in 'task_tab[]' omitting the 0th slot
 121               		.loc 1 44 30 discriminator 2 view .LVU51
 122 0070 41E8 0014 		lea (20,%a0),%a0
 123 0074 7206      		moveq #6,%d1
 124 0076 B280      		cmp.l %d0,%d1
 125 0078 66EE      		jne .L11
 126               	.LBE19:
  47:mtk_c.c       ****       new_task = i;
  48:mtk_c.c       ****       task_tab[i].task_addr = task_ptr;  //And substitute the ID to the 'new_task'
  49:mtk_c.c       ****       task_tab[i].status = OCCUPIED;  //update status
  50:mtk_c.c       ****       task_tab[i].stack_ptr = init_stack(new_task); // stack initialization
  51:mtk_c.c       ****       addq(&ready, new_task); //register to ready queue
  52:mtk_c.c       ****       break;
  53:mtk_c.c       ****     }
  54:mtk_c.c       ****   }
  55:mtk_c.c       **** }
 127               		.loc 1 55 1 is_stmt 0 view .LVU52
 128 007a 4CDF 0C04 		movem.l (%sp)+,#3076
 129 007e 4E75      		rts
 130               	.L16:
 131               	.LBB27:
  47:mtk_c.c       ****       new_task = i;
 132               		.loc 1 47 7 is_stmt 1 view .LVU53
  47:mtk_c.c       ****       new_task = i;
 133               		.loc 1 47 16 is_stmt 0 view .LVU54
 134 0080 23C0 0000 		move.l %d0,new_task
 134      0000 
  48:mtk_c.c       ****       task_tab[i].status = OCCUPIED;  //update status
 135               		.loc 1 48 7 is_stmt 1 view .LVU55
  48:mtk_c.c       ****       task_tab[i].status = OCCUPIED;  //update status
 136               		.loc 1 48 29 is_stmt 0 view .LVU56
 137 0086 45F9 0000 		lea task_tab,%a2
 137      0000 
 138 008c 2240      		move.l %d0,%a1
 139 008e D3C0      		add.l %d0,%a1
 140 0090 41F1 9800 		lea (%a1,%a1.l),%a0
 141 0094 D1C0      		add.l %d0,%a0
 142 0096 D1C8      		add.l %a0,%a0


 143 0098 D1C8      		add.l %a0,%a0
 144 009a 25AF 0010 		move.l 16(%sp),(%a2,%a0.l)
 144      8800 
  49:mtk_c.c       ****       task_tab[i].stack_ptr = init_stack(new_task); // stack initialization
 145               		.loc 1 49 7 is_stmt 1 view .LVU57
  49:mtk_c.c       ****       task_tab[i].stack_ptr = init_stack(new_task); // stack initialization
 146               		.loc 1 49 26 is_stmt 0 view .LVU58
 147 00a0 41F2 8800 		lea (%a2,%a0.l),%a0
 148 00a4 2141 000C 		move.l %d1,12(%a0)
  50:mtk_c.c       ****       addq(&ready, new_task); //register to ready queue
 149               		.loc 1 50 7 is_stmt 1 view .LVU59
 150               	.LVL10:
 151               	.LBB20:
 152               	.LBI20:
  56:mtk_c.c       **** 
  57:mtk_c.c       **** void* init_stack(TASK_ID_TYPE task_id) {
 153               		.loc 1 57 7 view .LVU60
 154               	.LBB21:
  58:mtk_c.c       ****   //takes task ID as argument
  59:mtk_c.c       ****   //returns address void *type that the user task SSP
  60:mtk_c.c       **** 
  61:mtk_c.c       ****   int* int_ssp = (int*)&stacks[task_id-1].sstack[STKSIZE]; //set int_ssp as bottom of stack
 155               		.loc 1 61 3 view .LVU61
 156 00a8 2200      		move.l %d0,%d1
 157 00aa 740B      		moveq #11,%d2
 158 00ac E5A9      		lsl.l %d2,%d1
 159               		.loc 1 61 8 is_stmt 0 view .LVU62
 160 00ae 2641      		move.l %d1,%a3
 161 00b0 D7FC 0000 		add.l #stacks,%a3
 161      0000 
 162               	.LVL11:
  62:mtk_c.c       ****   *(--int_ssp) = (int)task_tab[task_id].task_addr; //push value of PC on the stack
 163               		.loc 1 62 3 is_stmt 1 view .LVU63
 164               		.loc 1 62 16 is_stmt 0 view .LVU64
 165 00b6 276F 0010 		move.l 16(%sp),-4(%a3)
 165      FFFC 
  63:mtk_c.c       **** 
  64:mtk_c.c       ****   //push initial SR on the stack
  65:mtk_c.c       ****   unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 166               		.loc 1 65 3 is_stmt 1 view .LVU65
 167               	.LVL12:
  66:mtk_c.c       ****   *(--short_ssp) = 0x0000;
 168               		.loc 1 66 3 view .LVU66
 169               		.loc 1 66 18 is_stmt 0 view .LVU67
 170 00bc 426B FFFA 		clr.w -6(%a3)
  67:mtk_c.c       ****   
  68:mtk_c.c       ****   //skip 15*4 bytes
  69:mtk_c.c       ****   int_ssp = (int*)short_ssp;
 171               		.loc 1 69 3 is_stmt 1 view .LVU68
 172               	.LVL13:
  70:mtk_c.c       ****   int_ssp -= 15;
 173               		.loc 1 70 3 view .LVU69
  71:mtk_c.c       **** 
  72:mtk_c.c       ****   //push initial USP
  73:mtk_c.c       ****   *(--int_ssp) = (int)&stacks[task_id-1].ustack[STKSIZE];
 174               		.loc 1 73 3 view .LVU70
 175               		.loc 1 73 23 is_stmt 0 view .LVU71


 176 00c0 0681 0000 		add.l #stacks-1024,%d1
 176      0000 
 177 00c6 2741 FFBA 		move.l %d1,-70(%a3)
  74:mtk_c.c       ****   
  75:mtk_c.c       ****   return (void*)int_ssp;
 178               		.loc 1 75 3 is_stmt 1 view .LVU72
 179               	.LVL14:
  73:mtk_c.c       ****   
 180               		.loc 1 73 16 is_stmt 0 view .LVU73
 181 00ca 47EB FFBA 		lea (-70,%a3),%a3
 182               	.LVL15:
  73:mtk_c.c       ****   
 183               		.loc 1 73 16 view .LVU74
 184 00ce 214B 0004 		move.l %a3,4(%a0)
 185               	.LBE21:
 186               	.LBE20:
  51:mtk_c.c       ****       break;
 187               		.loc 1 51 7 is_stmt 1 view .LVU75
 188               	.LVL16:
 189               	.LBB22:
 190               	.LBI22:
  76:mtk_c.c       **** }
  77:mtk_c.c       **** 
  78:mtk_c.c       **** void begin_sch() {
  79:mtk_c.c       ****   //No argument
  80:mtk_c.c       ****   //Returns nothing
  81:mtk_c.c       ****   
  82:mtk_c.c       ****   curr_task = removeq(&ready); //take out one task from ready queue and put it in curr_task
  83:mtk_c.c       ****   init_timer(); //initialize timer
  84:mtk_c.c       ****   first_task(); //call first_task
  85:mtk_c.c       **** }
  86:mtk_c.c       **** 
  87:mtk_c.c       **** void addq(TASK_ID_TYPE* pointerToAQueue, TASK_ID_TYPE newTaskID) {
 191               		.loc 1 87 6 view .LVU76
 192               	.LBB23:
  88:mtk_c.c       ****   	TASK_ID_TYPE currentTaskID = *pointerToAQueue;
 193               		.loc 1 88 4 view .LVU77
 194               		.loc 1 88 17 is_stmt 0 view .LVU78
 195 00d2 2239 0000 		move.l ready,%d1
 195      0000 
 196               	.LVL17:
  89:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 197               		.loc 1 89 2 is_stmt 1 view .LVU79
 198               		.loc 1 89 4 is_stmt 0 view .LVU80
 199 00d8 6734      		jeq .L8
 200               	.LVL18:
 201               	.L9:
  90:mtk_c.c       **** 		while(1) {
 202               		.loc 1 90 3 is_stmt 1 view .LVU81
 203               	.LBB24:
  91:mtk_c.c       **** 			TASK_ID_TYPE nextInLine = task_tab[currentTaskID].next;
 204               		.loc 1 91 4 view .LVU82
 205 00da 2041      		move.l %d1,%a0
 206               		.loc 1 91 17 is_stmt 0 view .LVU83
 207 00dc D281      		add.l %d1,%d1
 208               	.LVL19:
 209               		.loc 1 91 17 view .LVU84


 210 00de D281      		add.l %d1,%d1
 211 00e0 D288      		add.l %a0,%d1
 212 00e2 D281      		add.l %d1,%d1
 213 00e4 D281      		add.l %d1,%d1
 214 00e6 2232 1810 		move.l 16(%a2,%d1.l),%d1
 215               	.LVL20:
  92:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 216               		.loc 1 92 4 is_stmt 1 view .LVU85
 217               		.loc 1 92 6 is_stmt 0 view .LVU86
 218 00ea 66EE      		jne .L9
  93:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 219               		.loc 1 93 5 is_stmt 1 view .LVU87
 220               		.loc 1 93 34 is_stmt 0 view .LVU88
 221 00ec 2208      		move.l %a0,%d1
 222               	.LVL21:
 223               		.loc 1 93 34 view .LVU89
 224 00ee D288      		add.l %a0,%d1
 225               	.LVL22:
 226               		.loc 1 93 34 view .LVU90
 227 00f0 D281      		add.l %d1,%d1
 228               	.LVL23:
 229               		.loc 1 93 34 view .LVU91
 230 00f2 D288      		add.l %a0,%d1
 231               	.LVL24:
 232               		.loc 1 93 34 view .LVU92
 233 00f4 D281      		add.l %d1,%d1
 234               	.LVL25:
 235               		.loc 1 93 34 view .LVU93
 236 00f6 D281      		add.l %d1,%d1
 237               	.LVL26:
 238               		.loc 1 93 34 view .LVU94
 239 00f8 2580 1810 		move.l %d0,16(%a2,%d1.l)
 240               	.LVL27:
  94:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 241               		.loc 1 94 5 is_stmt 1 view .LVU95
 242               		.loc 1 94 30 is_stmt 0 view .LVU96
 243 00fc D3C9      		add.l %a1,%a1
 244 00fe D3C0      		add.l %d0,%a1
 245 0100 D3C9      		add.l %a1,%a1
 246 0102 D3C9      		add.l %a1,%a1
 247 0104 42B2 9810 		clr.l 16(%a2,%a1.l)
  95:mtk_c.c       **** 				break;
 248               		.loc 1 95 5 is_stmt 1 view .LVU97
 249               	.LBE24:
 250               	.LBE23:
 251               	.LBE22:
 252               	.LBE27:
  55:mtk_c.c       **** 
 253               		.loc 1 55 1 is_stmt 0 view .LVU98
 254 0108 4CDF 0C04 		movem.l (%sp)+,#3076
 255               	.LVL28:
  55:mtk_c.c       **** 
 256               		.loc 1 55 1 view .LVU99
 257 010c 4E75      		rts
 258               	.LVL29:
 259               	.L8:
 260               	.LBB28:


 261               	.LBB26:
 262               	.LBB25:
  96:mtk_c.c       **** 			} else {
  97:mtk_c.c       **** 				currentTaskID = task_tab[currentTaskID].next;
  98:mtk_c.c       **** 			}
  99:mtk_c.c       **** 		}
 100:mtk_c.c       **** 	} else {
 101:mtk_c.c       **** 		*pointerToAQueue = newTaskID;
 263               		.loc 1 101 3 is_stmt 1 view .LVU100
 264               		.loc 1 101 20 is_stmt 0 view .LVU101
 265 010e 23C0 0000 		move.l %d0,ready
 265      0000 
 266               	.LBE25:
 267               	.LBE26:
 268               	.LBE28:
  55:mtk_c.c       **** 
 269               		.loc 1 55 1 view .LVU102
 270 0114 4CDF 0C04 		movem.l (%sp)+,#3076
 271               	.LVL30:
  55:mtk_c.c       **** 
 272               		.loc 1 55 1 view .LVU103
 273 0118 4E75      		rts
 274               		.cfi_endproc
 275               	.LFE4:
 276               		.size	set_task, .-set_task
 277               		.align	2
 278               		.globl	init_stack
 279               		.type	init_stack, @function
 280               	init_stack:
 281               	.LVL31:
 282               	.LFB5:
  57:mtk_c.c       ****   //takes task ID as argument
 283               		.loc 1 57 40 is_stmt 1 view -0
 284               		.cfi_startproc
  57:mtk_c.c       ****   //takes task ID as argument
 285               		.loc 1 57 40 is_stmt 0 view .LVU105
 286 011a 2F02      		move.l %d2,-(%sp)
 287               		.cfi_def_cfa_offset 8
 288               		.cfi_offset 2, -8
 289 011c 202F 0008 		move.l 8(%sp),%d0
  61:mtk_c.c       ****   *(--int_ssp) = (int)task_tab[task_id].task_addr; //push value of PC on the stack
 290               		.loc 1 61 3 is_stmt 1 view .LVU106
 291 0120 2400      		move.l %d0,%d2
 292 0122 720B      		moveq #11,%d1
 293 0124 E3AA      		lsl.l %d1,%d2
  61:mtk_c.c       ****   *(--int_ssp) = (int)task_tab[task_id].task_addr; //push value of PC on the stack
 294               		.loc 1 61 8 is_stmt 0 view .LVU107
 295 0126 2042      		move.l %d2,%a0
 296 0128 D1FC 0000 		add.l #stacks,%a0
 296      0000 
 297               	.LVL32:
  62:mtk_c.c       **** 
 298               		.loc 1 62 3 is_stmt 1 view .LVU108
  62:mtk_c.c       **** 
 299               		.loc 1 62 40 is_stmt 0 view .LVU109
 300 012e 2200      		move.l %d0,%d1
 301 0130 D280      		add.l %d0,%d1


 302 0132 D281      		add.l %d1,%d1
 303 0134 D280      		add.l %d0,%d1
 304 0136 D281      		add.l %d1,%d1
 305 0138 D281      		add.l %d1,%d1
  62:mtk_c.c       **** 
 306               		.loc 1 62 16 view .LVU110
 307 013a 43F9 0000 		lea task_tab,%a1
 307      0000 
 308 0140 2171 1800 		move.l (%a1,%d1.l),-4(%a0)
 308      FFFC 
  65:mtk_c.c       ****   *(--short_ssp) = 0x0000;
 309               		.loc 1 65 3 is_stmt 1 view .LVU111
 310               	.LVL33:
  66:mtk_c.c       ****   
 311               		.loc 1 66 3 view .LVU112
  66:mtk_c.c       ****   
 312               		.loc 1 66 18 is_stmt 0 view .LVU113
 313 0146 4268 FFFA 		clr.w -6(%a0)
  69:mtk_c.c       ****   int_ssp -= 15;
 314               		.loc 1 69 3 is_stmt 1 view .LVU114
 315               	.LVL34:
  70:mtk_c.c       **** 
 316               		.loc 1 70 3 view .LVU115
  73:mtk_c.c       ****   
 317               		.loc 1 73 3 view .LVU116
  73:mtk_c.c       ****   
 318               		.loc 1 73 23 is_stmt 0 view .LVU117
 319 014a 0682 0000 		add.l #stacks-1024,%d2
 319      0000 
 320 0150 2142 FFBA 		move.l %d2,-70(%a0)
  75:mtk_c.c       **** }
 321               		.loc 1 75 3 is_stmt 1 view .LVU118
  76:mtk_c.c       **** 
 322               		.loc 1 76 1 is_stmt 0 view .LVU119
 323 0154 70BA      		moveq #-70,%d0
 324 0156 D088      		add.l %a0,%d0
 325               	.LVL35:
  76:mtk_c.c       **** 
 326               		.loc 1 76 1 view .LVU120
 327 0158 241F      		move.l (%sp)+,%d2
 328 015a 4E75      		rts
 329               		.cfi_endproc
 330               	.LFE5:
 331               		.size	init_stack, .-init_stack
 332               		.align	2
 333               		.globl	begin_sch
 334               		.type	begin_sch, @function
 335               	begin_sch:
 336               	.LFB6:
  78:mtk_c.c       ****   //No argument
 337               		.loc 1 78 18 is_stmt 1 view -0
 338               		.cfi_startproc
  82:mtk_c.c       ****   init_timer(); //initialize timer
 339               		.loc 1 82 3 view .LVU122
 340               	.LVL36:
 341               	.LBB29:
 342               	.LBI29:


 102:mtk_c.c       **** 	}
 103:mtk_c.c       **** }
 104:mtk_c.c       **** 
 105:mtk_c.c       **** TASK_ID_TYPE removeq(TASK_ID_TYPE* pointerToAQueue) {
 343               		.loc 1 105 14 view .LVU123
 344               	.LBB30:
 106:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 345               		.loc 1 106 2 view .LVU124
 346               		.loc 1 106 15 is_stmt 0 view .LVU125
 347 015c 2239 0000 		move.l ready,%d1
 347      0000 
 348               	.LVL37:
 107:mtk_c.c       **** 	if(topID == NULLTASKID) {
 349               		.loc 1 107 2 is_stmt 1 view .LVU126
 350               		.loc 1 107 4 is_stmt 0 view .LVU127
 351 0162 671A      		jeq .L20
 108:mtk_c.c       **** 		return NULLTASKID;
 109:mtk_c.c       **** 	} else {
 110:mtk_c.c       **** 		*pointerToAQueue = task_tab[topID].next;
 352               		.loc 1 110 3 is_stmt 1 view .LVU128
 353               		.loc 1 110 37 is_stmt 0 view .LVU129
 354 0164 2001      		move.l %d1,%d0
 355 0166 D081      		add.l %d1,%d0
 356 0168 D080      		add.l %d0,%d0
 357 016a D081      		add.l %d1,%d0
 358 016c D080      		add.l %d0,%d0
 359 016e D080      		add.l %d0,%d0
 360 0170 2040      		move.l %d0,%a0
 361 0172 D1FC 0000 		add.l #task_tab+16,%a0
 361      0000 
 362               		.loc 1 110 20 view .LVU130
 363 0178 23D0 0000 		move.l (%a0),ready
 363      0000 
 111:mtk_c.c       **** 		return topID;
 364               		.loc 1 111 3 is_stmt 1 view .LVU131
 365               	.L20:
 366               	.LVL38:
 367               		.loc 1 111 3 is_stmt 0 view .LVU132
 368               	.LBE30:
 369               	.LBE29:
  82:mtk_c.c       ****   init_timer(); //initialize timer
 370               		.loc 1 82 13 view .LVU133
 371 017e 23C1 0000 		move.l %d1,curr_task
 371      0000 
  83:mtk_c.c       ****   first_task(); //call first_task
 372               		.loc 1 83 3 is_stmt 1 view .LVU134
 373 0184 4EB9 0000 		jsr init_timer
 373      0000 
 374               	.LVL39:
  84:mtk_c.c       **** }
 375               		.loc 1 84 3 view .LVU135
  85:mtk_c.c       **** 
 376               		.loc 1 85 1 is_stmt 0 view .LVU136
  84:mtk_c.c       **** }
 377               		.loc 1 84 3 view .LVU137
 378 018a 4EF9 0000 		jra first_task
 378      0000 


 379               	.LVL40:
 380               		.cfi_endproc
 381               	.LFE6:
 382               		.size	begin_sch, .-begin_sch
 383               		.align	2
 384               		.globl	addq
 385               		.type	addq, @function
 386               	addq:
 387               	.LVL41:
 388               	.LFB7:
  87:mtk_c.c       ****   	TASK_ID_TYPE currentTaskID = *pointerToAQueue;
 389               		.loc 1 87 66 is_stmt 1 view -0
 390               		.cfi_startproc
  87:mtk_c.c       ****   	TASK_ID_TYPE currentTaskID = *pointerToAQueue;
 391               		.loc 1 87 66 is_stmt 0 view .LVU139
 392 0190 206F 0004 		move.l 4(%sp),%a0
 393 0194 226F 0008 		move.l 8(%sp),%a1
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 394               		.loc 1 88 4 is_stmt 1 view .LVU140
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 395               		.loc 1 88 17 is_stmt 0 view .LVU141
 396 0198 2010      		move.l (%a0),%d0
 397               	.LVL42:
  89:mtk_c.c       **** 		while(1) {
 398               		.loc 1 89 2 is_stmt 1 view .LVU142
  89:mtk_c.c       **** 		while(1) {
 399               		.loc 1 89 4 is_stmt 0 view .LVU143
 400 019a 673A      		jeq .L27
 401 019c 41F9 0000 		lea task_tab,%a0
 401      0000 
 402               	.LVL43:
 403               	.L28:
  90:mtk_c.c       **** 			TASK_ID_TYPE nextInLine = task_tab[currentTaskID].next;
 404               		.loc 1 90 3 is_stmt 1 view .LVU144
 405               	.LBB32:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 406               		.loc 1 91 4 view .LVU145
 407 01a2 2200      		move.l %d0,%d1
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 408               		.loc 1 91 17 is_stmt 0 view .LVU146
 409 01a4 D080      		add.l %d0,%d0
 410               	.LVL44:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 411               		.loc 1 91 17 view .LVU147
 412 01a6 D080      		add.l %d0,%d0
 413 01a8 D081      		add.l %d1,%d0
 414 01aa D080      		add.l %d0,%d0
 415 01ac D080      		add.l %d0,%d0
 416 01ae 2030 0810 		move.l 16(%a0,%d0.l),%d0
 417               	.LVL45:
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 418               		.loc 1 92 4 is_stmt 1 view .LVU148
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 419               		.loc 1 92 6 is_stmt 0 view .LVU149
 420 01b2 66EE      		jne .L28
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 421               		.loc 1 93 5 is_stmt 1 view .LVU150


  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 422               		.loc 1 93 34 is_stmt 0 view .LVU151
 423 01b4 2001      		move.l %d1,%d0
 424               	.LVL46:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 425               		.loc 1 93 34 view .LVU152
 426 01b6 D081      		add.l %d1,%d0
 427               	.LVL47:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 428               		.loc 1 93 34 view .LVU153
 429 01b8 D080      		add.l %d0,%d0
 430               	.LVL48:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 431               		.loc 1 93 34 view .LVU154
 432 01ba D081      		add.l %d1,%d0
 433               	.LVL49:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 434               		.loc 1 93 34 view .LVU155
 435 01bc D080      		add.l %d0,%d0
 436               	.LVL50:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 437               		.loc 1 93 34 view .LVU156
 438 01be D080      		add.l %d0,%d0
 439               	.LVL51:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 440               		.loc 1 93 34 view .LVU157
 441 01c0 2189 0810 		move.l %a1,16(%a0,%d0.l)
 442               	.LVL52:
  94:mtk_c.c       **** 				break;
 443               		.loc 1 94 5 is_stmt 1 view .LVU158
  94:mtk_c.c       **** 				break;
 444               		.loc 1 94 30 is_stmt 0 view .LVU159
 445 01c4 2009      		move.l %a1,%d0
 446 01c6 D089      		add.l %a1,%d0
 447 01c8 D080      		add.l %d0,%d0
 448 01ca D089      		add.l %a1,%d0
 449 01cc D080      		add.l %d0,%d0
 450 01ce D080      		add.l %d0,%d0
 451 01d0 42B0 0810 		clr.l 16(%a0,%d0.l)
  95:mtk_c.c       **** 			} else {
 452               		.loc 1 95 5 is_stmt 1 view .LVU160
 453               	.LBE32:
 103:mtk_c.c       **** 
 454               		.loc 1 103 1 is_stmt 0 view .LVU161
 455 01d4 4E75      		rts
 456               	.LVL53:
 457               	.L27:
 101:mtk_c.c       **** 	}
 458               		.loc 1 101 3 is_stmt 1 view .LVU162
 101:mtk_c.c       **** 	}
 459               		.loc 1 101 20 is_stmt 0 view .LVU163
 460 01d6 2089      		move.l %a1,(%a0)
 103:mtk_c.c       **** 
 461               		.loc 1 103 1 view .LVU164
 462 01d8 4E75      		rts
 463               		.cfi_endproc
 464               	.LFE7:


 465               		.size	addq, .-addq
 466               		.align	2
 467               		.globl	removeq
 468               		.type	removeq, @function
 469               	removeq:
 470               	.LVL54:
 471               	.LFB8:
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 472               		.loc 1 105 53 is_stmt 1 view -0
 473               		.cfi_startproc
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 474               		.loc 1 105 53 is_stmt 0 view .LVU166
 475 01da 226F 0004 		move.l 4(%sp),%a1
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 476               		.loc 1 106 2 is_stmt 1 view .LVU167
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 477               		.loc 1 106 15 is_stmt 0 view .LVU168
 478 01de 2011      		move.l (%a1),%d0
 479               	.LVL55:
 107:mtk_c.c       **** 		return NULLTASKID;
 480               		.loc 1 107 2 is_stmt 1 view .LVU169
 107:mtk_c.c       **** 		return NULLTASKID;
 481               		.loc 1 107 4 is_stmt 0 view .LVU170
 482 01e0 6716      		jeq .L33
 110:mtk_c.c       **** 		return topID;
 483               		.loc 1 110 3 is_stmt 1 view .LVU171
 110:mtk_c.c       **** 		return topID;
 484               		.loc 1 110 37 is_stmt 0 view .LVU172
 485 01e2 2200      		move.l %d0,%d1
 486 01e4 D280      		add.l %d0,%d1
 487 01e6 D281      		add.l %d1,%d1
 488 01e8 D280      		add.l %d0,%d1
 489 01ea D281      		add.l %d1,%d1
 490 01ec D281      		add.l %d1,%d1
 491 01ee 2041      		move.l %d1,%a0
 492 01f0 D1FC 0000 		add.l #task_tab+16,%a0
 492      0000 
 110:mtk_c.c       **** 		return topID;
 493               		.loc 1 110 20 view .LVU173
 494 01f6 2290      		move.l (%a0),(%a1)
 495               		.loc 1 111 3 is_stmt 1 view .LVU174
 496               	.L33:
 112:mtk_c.c       **** 	}
 113:mtk_c.c       **** }
 497               		.loc 1 113 1 is_stmt 0 view .LVU175
 498 01f8 4E75      		rts
 499               		.cfi_endproc
 500               	.LFE8:
 501               		.size	removeq, .-removeq
 502               		.align	2
 503               		.globl	sched
 504               		.type	sched, @function
 505               	sched:
 506               	.LFB9:
 114:mtk_c.c       **** 
 115:mtk_c.c       **** void sched(){
 507               		.loc 1 115 13 is_stmt 1 view -0


 508               		.cfi_startproc
 116:mtk_c.c       ****     next_task = removeq(&ready);
 509               		.loc 1 116 5 view .LVU177
 510               	.LVL56:
 511               	.LBB35:
 512               	.LBI35:
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 513               		.loc 1 105 14 view .LVU178
 514               	.LBB36:
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 515               		.loc 1 106 2 view .LVU179
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 516               		.loc 1 106 15 is_stmt 0 view .LVU180
 517 01fa 2239 0000 		move.l ready,%d1
 517      0000 
 518               	.LVL57:
 107:mtk_c.c       **** 		return NULLTASKID;
 519               		.loc 1 107 2 is_stmt 1 view .LVU181
 107:mtk_c.c       **** 		return NULLTASKID;
 520               		.loc 1 107 4 is_stmt 0 view .LVU182
 521 0200 6722      		jeq .L42
 110:mtk_c.c       **** 		return topID;
 522               		.loc 1 110 3 is_stmt 1 view .LVU183
 110:mtk_c.c       **** 		return topID;
 523               		.loc 1 110 37 is_stmt 0 view .LVU184
 524 0202 2001      		move.l %d1,%d0
 525 0204 D081      		add.l %d1,%d0
 526 0206 D080      		add.l %d0,%d0
 527 0208 D081      		add.l %d1,%d0
 528 020a D080      		add.l %d0,%d0
 529 020c D080      		add.l %d0,%d0
 530 020e 2040      		move.l %d0,%a0
 531 0210 D1FC 0000 		add.l #task_tab+16,%a0
 531      0000 
 110:mtk_c.c       **** 		return topID;
 532               		.loc 1 110 20 view .LVU185
 533 0216 23D0 0000 		move.l (%a0),ready
 533      0000 
 111:mtk_c.c       **** 	}
 534               		.loc 1 111 3 is_stmt 1 view .LVU186
 535               	.LVL58:
 111:mtk_c.c       **** 	}
 536               		.loc 1 111 3 is_stmt 0 view .LVU187
 537               	.LBE36:
 538               	.LBE35:
 539               		.loc 1 116 15 view .LVU188
 540 021c 23C1 0000 		move.l %d1,next_task
 540      0000 
 117:mtk_c.c       ****     if(next_task == NULLTASKID)
 541               		.loc 1 117 5 is_stmt 1 view .LVU189
 118:mtk_c.c       **** 	    while(1);   //if next_task is nulltaskid, infinite loop
 119:mtk_c.c       **** }
 542               		.loc 1 119 1 is_stmt 0 view .LVU190
 543 0222 4E75      		rts
 544               	.LVL59:
 545               	.L42:
 118:mtk_c.c       **** 	    while(1);   //if next_task is nulltaskid, infinite loop


 546               		.loc 1 118 6 is_stmt 1 discriminator 1 view .LVU191
 118:mtk_c.c       **** 	    while(1);   //if next_task is nulltaskid, infinite loop
 547               		.loc 1 118 11 discriminator 1 view .LVU192
 118:mtk_c.c       **** 	    while(1);   //if next_task is nulltaskid, infinite loop
 548               		.loc 1 118 6 discriminator 1 view .LVU193
 118:mtk_c.c       **** 	    while(1);   //if next_task is nulltaskid, infinite loop
 549               		.loc 1 118 11 discriminator 1 view .LVU194
 550 0224 60FE      		jra .L42
 551               		.cfi_endproc
 552               	.LFE9:
 553               		.size	sched, .-sched
 554               		.align	2
 555               		.globl	sleep
 556               		.type	sleep, @function
 557               	sleep:
 558               	.LVL60:
 559               	.LFB10:
 120:mtk_c.c       **** 
 121:mtk_c.c       **** 
 122:mtk_c.c       **** void sleep(int ch) {
 560               		.loc 1 122 20 view -0
 561               		.cfi_startproc
 562               		.loc 1 122 20 is_stmt 0 view .LVU196
 563 0226 222F 0004 		move.l 4(%sp),%d1
 123:mtk_c.c       ****     addq(&semaphore[ch].task_list, curr_task);
 564               		.loc 1 123 5 is_stmt 1 view .LVU197
 565 022a 2279 0000 		move.l curr_task,%a1
 565      0000 
 566               	.LVL61:
 567               	.LBB44:
 568               	.LBI44:
  87:mtk_c.c       ****   	TASK_ID_TYPE currentTaskID = *pointerToAQueue;
 569               		.loc 1 87 6 view .LVU198
 570               	.LBB45:
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 571               		.loc 1 88 4 view .LVU199
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 572               		.loc 1 88 17 is_stmt 0 view .LVU200
 573 0230 2001      		move.l %d1,%d0
 574 0232 D081      		add.l %d1,%d0
 575 0234 D081      		add.l %d1,%d0
 576 0236 D080      		add.l %d0,%d0
 577 0238 D080      		add.l %d0,%d0
 578 023a 2040      		move.l %d0,%a0
 579 023c D1FC 0000 		add.l #semaphore+8,%a0
 579      0000 
 580 0242 2010      		move.l (%a0),%d0
 581               	.LVL62:
  89:mtk_c.c       **** 		while(1) {
 582               		.loc 1 89 2 is_stmt 1 view .LVU201
  89:mtk_c.c       **** 		while(1) {
 583               		.loc 1 89 4 is_stmt 0 view .LVU202
 584 0244 6762      		jeq .L47
 585 0246 41F9 0000 		lea task_tab,%a0
 585      0000 
 586               	.LVL63:
 587               	.L48:


  90:mtk_c.c       **** 			TASK_ID_TYPE nextInLine = task_tab[currentTaskID].next;
 588               		.loc 1 90 3 is_stmt 1 view .LVU203
 589               	.LBB46:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 590               		.loc 1 91 4 view .LVU204
 591 024c 2200      		move.l %d0,%d1
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 592               		.loc 1 91 17 is_stmt 0 view .LVU205
 593 024e D080      		add.l %d0,%d0
 594               	.LVL64:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 595               		.loc 1 91 17 view .LVU206
 596 0250 D080      		add.l %d0,%d0
 597 0252 D081      		add.l %d1,%d0
 598 0254 D080      		add.l %d0,%d0
 599 0256 D080      		add.l %d0,%d0
 600 0258 2030 0810 		move.l 16(%a0,%d0.l),%d0
 601               	.LVL65:
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 602               		.loc 1 92 4 is_stmt 1 view .LVU207
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 603               		.loc 1 92 6 is_stmt 0 view .LVU208
 604 025c 66EE      		jne .L48
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 605               		.loc 1 93 5 is_stmt 1 view .LVU209
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 606               		.loc 1 93 34 is_stmt 0 view .LVU210
 607 025e 2001      		move.l %d1,%d0
 608               	.LVL66:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 609               		.loc 1 93 34 view .LVU211
 610 0260 D081      		add.l %d1,%d0
 611               	.LVL67:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 612               		.loc 1 93 34 view .LVU212
 613 0262 D080      		add.l %d0,%d0
 614               	.LVL68:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 615               		.loc 1 93 34 view .LVU213
 616 0264 D081      		add.l %d1,%d0
 617               	.LVL69:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 618               		.loc 1 93 34 view .LVU214
 619 0266 D080      		add.l %d0,%d0
 620               	.LVL70:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 621               		.loc 1 93 34 view .LVU215
 622 0268 D080      		add.l %d0,%d0
 623               	.LVL71:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 624               		.loc 1 93 34 view .LVU216
 625 026a 2189 0810 		move.l %a1,16(%a0,%d0.l)
 626               	.LVL72:
  94:mtk_c.c       **** 				break;
 627               		.loc 1 94 5 is_stmt 1 view .LVU217
  94:mtk_c.c       **** 				break;
 628               		.loc 1 94 30 is_stmt 0 view .LVU218


 629 026e 2009      		move.l %a1,%d0
 630 0270 D089      		add.l %a1,%d0
 631 0272 D080      		add.l %d0,%d0
 632 0274 D089      		add.l %a1,%d0
 633 0276 D080      		add.l %d0,%d0
 634 0278 D080      		add.l %d0,%d0
 635 027a 42B0 0810 		clr.l 16(%a0,%d0.l)
  95:mtk_c.c       **** 			} else {
 636               		.loc 1 95 5 is_stmt 1 view .LVU219
 637               	.LVL73:
  95:mtk_c.c       **** 			} else {
 638               		.loc 1 95 5 is_stmt 0 view .LVU220
 639               	.LBE46:
 640               	.LBE45:
 641               	.LBE44:
 124:mtk_c.c       ****     sched();
 642               		.loc 1 124 5 is_stmt 1 view .LVU221
 643               	.LBB48:
 644               	.LBI48:
 115:mtk_c.c       ****     next_task = removeq(&ready);
 645               		.loc 1 115 6 view .LVU222
 646               	.LBB49:
 116:mtk_c.c       ****     if(next_task == NULLTASKID)
 647               		.loc 1 116 5 view .LVU223
 648               	.LBB50:
 649               	.LBI50:
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 650               		.loc 1 105 14 view .LVU224
 651               	.LBB51:
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 652               		.loc 1 106 2 view .LVU225
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 653               		.loc 1 106 15 is_stmt 0 view .LVU226
 654 027e 2239 0000 		move.l ready,%d1
 654      0000 
 655               	.LVL74:
 107:mtk_c.c       **** 		return NULLTASKID;
 656               		.loc 1 107 2 is_stmt 1 view .LVU227
 107:mtk_c.c       **** 		return NULLTASKID;
 657               		.loc 1 107 4 is_stmt 0 view .LVU228
 658 0284 6602      		jne .L57
 659               	.L50:
 107:mtk_c.c       **** 		return NULLTASKID;
 660               		.loc 1 107 4 view .LVU229
 661               	.LBE51:
 662               	.LBE50:
 118:mtk_c.c       **** }
 663               		.loc 1 118 6 is_stmt 1 view .LVU230
 118:mtk_c.c       **** }
 664               		.loc 1 118 11 view .LVU231
 118:mtk_c.c       **** }
 665               		.loc 1 118 6 view .LVU232
 118:mtk_c.c       **** }
 666               		.loc 1 118 11 view .LVU233
 667 0286 60FE      		jra .L50
 668               	.L57:
 669               	.LBB54:


 670               	.LBB52:
 110:mtk_c.c       **** 		return topID;
 671               		.loc 1 110 3 view .LVU234
 110:mtk_c.c       **** 		return topID;
 672               		.loc 1 110 37 is_stmt 0 view .LVU235
 673 0288 2001      		move.l %d1,%d0
 674 028a D081      		add.l %d1,%d0
 675 028c D080      		add.l %d0,%d0
 676 028e D081      		add.l %d1,%d0
 677 0290 D080      		add.l %d0,%d0
 678 0292 D080      		add.l %d0,%d0
 110:mtk_c.c       **** 		return topID;
 679               		.loc 1 110 20 view .LVU236
 680 0294 23F0 0810 		move.l 16(%a0,%d0.l),ready
 680      0000 0000 
 111:mtk_c.c       **** 	}
 681               		.loc 1 111 3 is_stmt 1 view .LVU237
 682               	.LVL75:
 111:mtk_c.c       **** 	}
 683               		.loc 1 111 3 is_stmt 0 view .LVU238
 684               	.LBE52:
 685               	.LBE54:
 116:mtk_c.c       ****     if(next_task == NULLTASKID)
 686               		.loc 1 116 15 view .LVU239
 687 029c 23C1 0000 		move.l %d1,next_task
 687      0000 
 117:mtk_c.c       **** 	    while(1);   //if next_task is nulltaskid, infinite loop
 688               		.loc 1 117 5 is_stmt 1 view .LVU240
 689               	.LBE49:
 690               	.LBE48:
 125:mtk_c.c       ****     swtch();    
 691               		.loc 1 125 5 view .LVU241
 126:mtk_c.c       **** }
 692               		.loc 1 126 1 is_stmt 0 view .LVU242
 125:mtk_c.c       ****     swtch();    
 693               		.loc 1 125 5 view .LVU243
 694 02a2 4EF9 0000 		jra swtch
 694      0000 
 695               	.LVL76:
 696               	.L47:
 697               	.LBB57:
 698               	.LBB47:
 101:mtk_c.c       **** 	}
 699               		.loc 1 101 3 is_stmt 1 view .LVU244
 101:mtk_c.c       **** 	}
 700               		.loc 1 101 20 is_stmt 0 view .LVU245
 701 02a8 2089      		move.l %a1,(%a0)
 702 02aa 41F9 0000 		lea task_tab,%a0
 702      0000 
 703               	.LVL77:
 101:mtk_c.c       **** 	}
 704               		.loc 1 101 20 view .LVU246
 705               	.LBE47:
 706               	.LBE57:
 124:mtk_c.c       ****     swtch();    
 707               		.loc 1 124 5 is_stmt 1 view .LVU247
 708               	.LBB58:


 115:mtk_c.c       ****     next_task = removeq(&ready);
 709               		.loc 1 115 6 view .LVU248
 710               	.LBB56:
 116:mtk_c.c       ****     if(next_task == NULLTASKID)
 711               		.loc 1 116 5 view .LVU249
 712               	.LBB55:
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 713               		.loc 1 105 14 view .LVU250
 714               	.LBB53:
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 715               		.loc 1 106 2 view .LVU251
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 716               		.loc 1 106 15 is_stmt 0 view .LVU252
 717 02b0 2239 0000 		move.l ready,%d1
 717      0000 
 718               	.LVL78:
 107:mtk_c.c       **** 		return NULLTASKID;
 719               		.loc 1 107 2 is_stmt 1 view .LVU253
 107:mtk_c.c       **** 		return NULLTASKID;
 720               		.loc 1 107 4 is_stmt 0 view .LVU254
 721 02b6 67CE      		jeq .L50
 722 02b8 60CE      		jra .L57
 723               	.LBE53:
 724               	.LBE55:
 725               	.LBE56:
 726               	.LBE58:
 727               		.cfi_endproc
 728               	.LFE10:
 729               		.size	sleep, .-sleep
 730               		.align	2
 731               		.globl	wakeup
 732               		.type	wakeup, @function
 733               	wakeup:
 734               	.LVL79:
 735               	.LFB11:
 127:mtk_c.c       **** 
 128:mtk_c.c       **** void wakeup(int ch) {
 736               		.loc 1 128 21 is_stmt 1 view -0
 737               		.cfi_startproc
 738               		.loc 1 128 21 is_stmt 0 view .LVU256
 739 02ba 2F02      		move.l %d2,-(%sp)
 740               		.cfi_def_cfa_offset 8
 741               		.cfi_offset 2, -8
 742 02bc 222F 0008 		move.l 8(%sp),%d1
 129:mtk_c.c       ****     addq(&ready, removeq(&semaphore[ch].task_list));
 743               		.loc 1 129 5 is_stmt 1 view .LVU257
 744               	.LVL80:
 745               	.LBB66:
 746               	.LBI66:
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 747               		.loc 1 105 14 view .LVU258
 748               	.LBB67:
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 749               		.loc 1 106 2 view .LVU259
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 750               		.loc 1 106 15 is_stmt 0 view .LVU260
 751 02c0 2001      		move.l %d1,%d0


 752 02c2 D081      		add.l %d1,%d0
 753 02c4 D081      		add.l %d1,%d0
 754 02c6 D080      		add.l %d0,%d0
 755 02c8 D080      		add.l %d0,%d0
 756 02ca 2040      		move.l %d0,%a0
 757 02cc D1FC 0000 		add.l #semaphore+8,%a0
 757      0000 
 758 02d2 2410      		move.l (%a0),%d2
 759               	.LVL81:
 107:mtk_c.c       **** 		return NULLTASKID;
 760               		.loc 1 107 2 is_stmt 1 view .LVU261
 107:mtk_c.c       **** 		return NULLTASKID;
 761               		.loc 1 107 4 is_stmt 0 view .LVU262
 762 02d4 6716      		jeq .L59
 110:mtk_c.c       **** 		return topID;
 763               		.loc 1 110 3 is_stmt 1 view .LVU263
 110:mtk_c.c       **** 		return topID;
 764               		.loc 1 110 37 is_stmt 0 view .LVU264
 765 02d6 2002      		move.l %d2,%d0
 766 02d8 D082      		add.l %d2,%d0
 767 02da D080      		add.l %d0,%d0
 768 02dc D082      		add.l %d2,%d0
 769 02de D080      		add.l %d0,%d0
 770 02e0 D080      		add.l %d0,%d0
 771 02e2 2240      		move.l %d0,%a1
 772 02e4 D3FC 0000 		add.l #task_tab+16,%a1
 772      0000 
 110:mtk_c.c       **** 		return topID;
 773               		.loc 1 110 20 view .LVU265
 774 02ea 2091      		move.l (%a1),(%a0)
 111:mtk_c.c       **** 	}
 775               		.loc 1 111 3 is_stmt 1 view .LVU266
 776               	.L59:
 777               	.LVL82:
 111:mtk_c.c       **** 	}
 778               		.loc 1 111 3 is_stmt 0 view .LVU267
 779               	.LBE67:
 780               	.LBE66:
 781               	.LBB68:
 782               	.LBI68:
  87:mtk_c.c       ****   	TASK_ID_TYPE currentTaskID = *pointerToAQueue;
 783               		.loc 1 87 6 is_stmt 1 view .LVU268
 784               	.LBB69:
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 785               		.loc 1 88 4 view .LVU269
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 786               		.loc 1 88 17 is_stmt 0 view .LVU270
 787 02ec 2039 0000 		move.l ready,%d0
 787      0000 
 788               	.LVL83:
  89:mtk_c.c       **** 		while(1) {
 789               		.loc 1 89 2 is_stmt 1 view .LVU271
  89:mtk_c.c       **** 		while(1) {
 790               		.loc 1 89 4 is_stmt 0 view .LVU272
 791 02f2 673C      		jeq .L60
 792 02f4 41F9 0000 		lea task_tab,%a0
 792      0000 


 793               	.LVL84:
 794               	.L61:
  90:mtk_c.c       **** 			TASK_ID_TYPE nextInLine = task_tab[currentTaskID].next;
 795               		.loc 1 90 3 is_stmt 1 view .LVU273
 796               	.LBB70:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 797               		.loc 1 91 4 view .LVU274
 798 02fa 2200      		move.l %d0,%d1
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 799               		.loc 1 91 17 is_stmt 0 view .LVU275
 800 02fc D080      		add.l %d0,%d0
 801               	.LVL85:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 802               		.loc 1 91 17 view .LVU276
 803 02fe D080      		add.l %d0,%d0
 804 0300 D081      		add.l %d1,%d0
 805 0302 D080      		add.l %d0,%d0
 806 0304 D080      		add.l %d0,%d0
 807 0306 2030 0810 		move.l 16(%a0,%d0.l),%d0
 808               	.LVL86:
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 809               		.loc 1 92 4 is_stmt 1 view .LVU277
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 810               		.loc 1 92 6 is_stmt 0 view .LVU278
 811 030a 66EE      		jne .L61
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 812               		.loc 1 93 5 is_stmt 1 view .LVU279
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 813               		.loc 1 93 34 is_stmt 0 view .LVU280
 814 030c 2001      		move.l %d1,%d0
 815               	.LVL87:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 816               		.loc 1 93 34 view .LVU281
 817 030e D081      		add.l %d1,%d0
 818               	.LVL88:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 819               		.loc 1 93 34 view .LVU282
 820 0310 D080      		add.l %d0,%d0
 821               	.LVL89:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 822               		.loc 1 93 34 view .LVU283
 823 0312 D081      		add.l %d1,%d0
 824               	.LVL90:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 825               		.loc 1 93 34 view .LVU284
 826 0314 D080      		add.l %d0,%d0
 827               	.LVL91:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 828               		.loc 1 93 34 view .LVU285
 829 0316 D080      		add.l %d0,%d0
 830               	.LVL92:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 831               		.loc 1 93 34 view .LVU286
 832 0318 2182 0810 		move.l %d2,16(%a0,%d0.l)
 833               	.LVL93:
  94:mtk_c.c       **** 				break;
 834               		.loc 1 94 5 is_stmt 1 view .LVU287


  94:mtk_c.c       **** 				break;
 835               		.loc 1 94 30 is_stmt 0 view .LVU288
 836 031c 2002      		move.l %d2,%d0
 837 031e D082      		add.l %d2,%d0
 838 0320 D080      		add.l %d0,%d0
 839 0322 D082      		add.l %d2,%d0
 840 0324 D080      		add.l %d0,%d0
 841 0326 D080      		add.l %d0,%d0
 842 0328 42B0 0810 		clr.l 16(%a0,%d0.l)
  95:mtk_c.c       **** 			} else {
 843               		.loc 1 95 5 is_stmt 1 view .LVU289
 844               	.LBE70:
 845               	.LBE69:
 846               	.LBE68:
 130:mtk_c.c       **** }
 847               		.loc 1 130 1 is_stmt 0 view .LVU290
 848 032c 241F      		move.l (%sp)+,%d2
 849               	.LVL94:
 850               		.loc 1 130 1 view .LVU291
 851 032e 4E75      		rts
 852               	.LVL95:
 853               	.L60:
 854               	.LBB72:
 855               	.LBB71:
 101:mtk_c.c       **** 	}
 856               		.loc 1 101 3 is_stmt 1 view .LVU292
 101:mtk_c.c       **** 	}
 857               		.loc 1 101 20 is_stmt 0 view .LVU293
 858 0330 23C2 0000 		move.l %d2,ready
 858      0000 
 859               	.LVL96:
 101:mtk_c.c       **** 	}
 860               		.loc 1 101 20 view .LVU294
 861               	.LBE71:
 862               	.LBE72:
 863               		.loc 1 130 1 view .LVU295
 864 0336 241F      		move.l (%sp)+,%d2
 865 0338 4E75      		rts
 866               		.cfi_endproc
 867               	.LFE11:
 868               		.size	wakeup, .-wakeup
 869               		.align	2
 870               		.globl	p_body
 871               		.type	p_body, @function
 872               	p_body:
 873               	.LVL97:
 874               	.LFB12:
 131:mtk_c.c       **** 
 132:mtk_c.c       **** 
 133:mtk_c.c       **** void p_body(int id) {
 875               		.loc 1 133 21 is_stmt 1 view -0
 876               		.cfi_startproc
 877               		.loc 1 133 21 is_stmt 0 view .LVU297
 878 033a 222F 0004 		move.l 4(%sp),%d1
 134:mtk_c.c       ****   semaphore[id].count--;
 879               		.loc 1 134 3 is_stmt 1 view .LVU298
 880               		.loc 1 134 16 is_stmt 0 view .LVU299


 881 033e 41F9 0000 		lea semaphore,%a0
 881      0000 
 882 0344 2001      		move.l %d1,%d0
 883 0346 D081      		add.l %d1,%d0
 884 0348 D081      		add.l %d1,%d0
 885 034a D080      		add.l %d0,%d0
 886 034c D080      		add.l %d0,%d0
 887               		.loc 1 134 22 view .LVU300
 888 034e 2230 0800 		move.l (%a0,%d0.l),%d1
 889 0352 5381      		subq.l #1,%d1
 890 0354 2181 0800 		move.l %d1,(%a0,%d0.l)
 135:mtk_c.c       ****   if (semaphore[id].count < 0){
 891               		.loc 1 135 3 is_stmt 1 view .LVU301
 892               		.loc 1 135 6 is_stmt 0 view .LVU302
 893 0358 6B02      		jmi .L81
 136:mtk_c.c       ****     sleep(id);
 137:mtk_c.c       ****   }
 138:mtk_c.c       **** }
 894               		.loc 1 138 1 view .LVU303
 895 035a 4E75      		rts
 896               	.L81:
 136:mtk_c.c       ****     sleep(id);
 897               		.loc 1 136 5 is_stmt 1 view .LVU304
 898               	.LVL98:
 899               	.LBB82:
 900               	.LBI82:
 122:mtk_c.c       ****     addq(&semaphore[ch].task_list, curr_task);
 901               		.loc 1 122 6 view .LVU305
 902               	.LBB83:
 123:mtk_c.c       ****     sched();
 903               		.loc 1 123 5 view .LVU306
 904 035c 2279 0000 		move.l curr_task,%a1
 904      0000 
 905               	.LVL99:
 906               	.LBB84:
 907               	.LBI84:
  87:mtk_c.c       ****   	TASK_ID_TYPE currentTaskID = *pointerToAQueue;
 908               		.loc 1 87 6 view .LVU307
 909               	.LBB85:
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 910               		.loc 1 88 4 view .LVU308
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 911               		.loc 1 88 17 is_stmt 0 view .LVU309
 912 0362 41F0 0808 		lea 8(%a0,%d0.l),%a0
 913 0366 2010      		move.l (%a0),%d0
 914               	.LVL100:
  89:mtk_c.c       **** 		while(1) {
 915               		.loc 1 89 2 is_stmt 1 view .LVU310
  89:mtk_c.c       **** 		while(1) {
 916               		.loc 1 89 4 is_stmt 0 view .LVU311
 917 0368 6742      		jeq .L71
 918 036a 41F9 0000 		lea task_tab,%a0
 918      0000 
 919               	.LVL101:
 920               	.L72:
  90:mtk_c.c       **** 			TASK_ID_TYPE nextInLine = task_tab[currentTaskID].next;
 921               		.loc 1 90 3 is_stmt 1 view .LVU312


 922               	.LBB86:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 923               		.loc 1 91 4 view .LVU313
 924 0370 2200      		move.l %d0,%d1
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 925               		.loc 1 91 17 is_stmt 0 view .LVU314
 926 0372 D080      		add.l %d0,%d0
 927               	.LVL102:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 928               		.loc 1 91 17 view .LVU315
 929 0374 D080      		add.l %d0,%d0
 930 0376 D081      		add.l %d1,%d0
 931 0378 D080      		add.l %d0,%d0
 932 037a D080      		add.l %d0,%d0
 933 037c 2030 0810 		move.l 16(%a0,%d0.l),%d0
 934               	.LVL103:
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 935               		.loc 1 92 4 is_stmt 1 view .LVU316
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 936               		.loc 1 92 6 is_stmt 0 view .LVU317
 937 0380 66EE      		jne .L72
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 938               		.loc 1 93 5 is_stmt 1 view .LVU318
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 939               		.loc 1 93 34 is_stmt 0 view .LVU319
 940 0382 2001      		move.l %d1,%d0
 941               	.LVL104:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 942               		.loc 1 93 34 view .LVU320
 943 0384 D081      		add.l %d1,%d0
 944               	.LVL105:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 945               		.loc 1 93 34 view .LVU321
 946 0386 D080      		add.l %d0,%d0
 947               	.LVL106:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 948               		.loc 1 93 34 view .LVU322
 949 0388 D081      		add.l %d1,%d0
 950               	.LVL107:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 951               		.loc 1 93 34 view .LVU323
 952 038a D080      		add.l %d0,%d0
 953               	.LVL108:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 954               		.loc 1 93 34 view .LVU324
 955 038c D080      		add.l %d0,%d0
 956               	.LVL109:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 957               		.loc 1 93 34 view .LVU325
 958 038e 2189 0810 		move.l %a1,16(%a0,%d0.l)
 959               	.LVL110:
  94:mtk_c.c       **** 				break;
 960               		.loc 1 94 5 is_stmt 1 view .LVU326
  94:mtk_c.c       **** 				break;
 961               		.loc 1 94 30 is_stmt 0 view .LVU327
 962 0392 2009      		move.l %a1,%d0
 963 0394 D089      		add.l %a1,%d0


 964 0396 D080      		add.l %d0,%d0
 965 0398 D089      		add.l %a1,%d0
 966 039a D080      		add.l %d0,%d0
 967 039c D080      		add.l %d0,%d0
 968 039e 42B0 0810 		clr.l 16(%a0,%d0.l)
  95:mtk_c.c       **** 			} else {
 969               		.loc 1 95 5 is_stmt 1 view .LVU328
 970               	.LVL111:
  95:mtk_c.c       **** 			} else {
 971               		.loc 1 95 5 is_stmt 0 view .LVU329
 972               	.LBE86:
 973               	.LBE85:
 974               	.LBE84:
 124:mtk_c.c       ****     swtch();    
 975               		.loc 1 124 5 is_stmt 1 view .LVU330
 976               	.LBB88:
 977               	.LBI88:
 115:mtk_c.c       ****     next_task = removeq(&ready);
 978               		.loc 1 115 6 view .LVU331
 979               	.LBB89:
 116:mtk_c.c       ****     if(next_task == NULLTASKID)
 980               		.loc 1 116 5 view .LVU332
 981               	.LBB90:
 982               	.LBI90:
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 983               		.loc 1 105 14 view .LVU333
 984               	.LBB91:
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 985               		.loc 1 106 2 view .LVU334
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 986               		.loc 1 106 15 is_stmt 0 view .LVU335
 987 03a2 2239 0000 		move.l ready,%d1
 987      0000 
 988               	.LVL112:
 107:mtk_c.c       **** 		return NULLTASKID;
 989               		.loc 1 107 2 is_stmt 1 view .LVU336
 107:mtk_c.c       **** 		return NULLTASKID;
 990               		.loc 1 107 4 is_stmt 0 view .LVU337
 991 03a8 6612      		jne .L82
 992               	.L74:
 107:mtk_c.c       **** 		return NULLTASKID;
 993               		.loc 1 107 4 view .LVU338
 994               	.LBE91:
 995               	.LBE90:
 118:mtk_c.c       **** }
 996               		.loc 1 118 6 is_stmt 1 view .LVU339
 118:mtk_c.c       **** }
 997               		.loc 1 118 11 view .LVU340
 118:mtk_c.c       **** }
 998               		.loc 1 118 6 view .LVU341
 118:mtk_c.c       **** }
 999               		.loc 1 118 11 view .LVU342
 1000 03aa 60FE      		jra .L74
 1001               	.LVL113:
 1002               	.L71:
 118:mtk_c.c       **** }
 1003               		.loc 1 118 11 is_stmt 0 view .LVU343


 1004               	.LBE89:
 1005               	.LBE88:
 1006               	.LBB95:
 1007               	.LBB87:
 101:mtk_c.c       **** 	}
 1008               		.loc 1 101 3 is_stmt 1 view .LVU344
 101:mtk_c.c       **** 	}
 1009               		.loc 1 101 20 is_stmt 0 view .LVU345
 1010 03ac 2089      		move.l %a1,(%a0)
 1011 03ae 41F9 0000 		lea task_tab,%a0
 1011      0000 
 1012               	.LVL114:
 101:mtk_c.c       **** 	}
 1013               		.loc 1 101 20 view .LVU346
 1014               	.LBE87:
 1015               	.LBE95:
 124:mtk_c.c       ****     swtch();    
 1016               		.loc 1 124 5 is_stmt 1 view .LVU347
 1017               	.LBB96:
 115:mtk_c.c       ****     next_task = removeq(&ready);
 1018               		.loc 1 115 6 view .LVU348
 1019               	.LBB94:
 116:mtk_c.c       ****     if(next_task == NULLTASKID)
 1020               		.loc 1 116 5 view .LVU349
 1021               	.LBB93:
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 1022               		.loc 1 105 14 view .LVU350
 1023               	.LBB92:
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 1024               		.loc 1 106 2 view .LVU351
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 1025               		.loc 1 106 15 is_stmt 0 view .LVU352
 1026 03b4 2239 0000 		move.l ready,%d1
 1026      0000 
 1027               	.LVL115:
 107:mtk_c.c       **** 		return NULLTASKID;
 1028               		.loc 1 107 2 is_stmt 1 view .LVU353
 107:mtk_c.c       **** 		return NULLTASKID;
 1029               		.loc 1 107 4 is_stmt 0 view .LVU354
 1030 03ba 67EE      		jeq .L74
 1031               	.L82:
 110:mtk_c.c       **** 		return topID;
 1032               		.loc 1 110 3 is_stmt 1 view .LVU355
 110:mtk_c.c       **** 		return topID;
 1033               		.loc 1 110 37 is_stmt 0 view .LVU356
 1034 03bc 2001      		move.l %d1,%d0
 1035 03be D081      		add.l %d1,%d0
 1036 03c0 D080      		add.l %d0,%d0
 1037 03c2 D081      		add.l %d1,%d0
 1038 03c4 D080      		add.l %d0,%d0
 1039 03c6 D080      		add.l %d0,%d0
 110:mtk_c.c       **** 		return topID;
 1040               		.loc 1 110 20 view .LVU357
 1041 03c8 23F0 0810 		move.l 16(%a0,%d0.l),ready
 1041      0000 0000 
 111:mtk_c.c       **** 	}
 1042               		.loc 1 111 3 is_stmt 1 view .LVU358


 1043               	.LVL116:
 111:mtk_c.c       **** 	}
 1044               		.loc 1 111 3 is_stmt 0 view .LVU359
 1045               	.LBE92:
 1046               	.LBE93:
 116:mtk_c.c       ****     if(next_task == NULLTASKID)
 1047               		.loc 1 116 15 view .LVU360
 1048 03d0 23C1 0000 		move.l %d1,next_task
 1048      0000 
 117:mtk_c.c       **** 	    while(1);   //if next_task is nulltaskid, infinite loop
 1049               		.loc 1 117 5 is_stmt 1 view .LVU361
 1050               	.LBE94:
 1051               	.LBE96:
 125:mtk_c.c       **** }
 1052               		.loc 1 125 5 view .LVU362
 1053               	.LBE83:
 1054               	.LBE82:
 1055               		.loc 1 138 1 is_stmt 0 view .LVU363
 1056               	.LBB98:
 1057               	.LBB97:
 125:mtk_c.c       **** }
 1058               		.loc 1 125 5 view .LVU364
 1059 03d6 4EF9 0000 		jra swtch
 1059      0000 
 1060               	.LVL117:
 1061               	.LBE97:
 1062               	.LBE98:
 1063               		.cfi_endproc
 1064               	.LFE12:
 1065               		.size	p_body, .-p_body
 1066               		.align	2
 1067               		.globl	v_body
 1068               		.type	v_body, @function
 1069               	v_body:
 1070               	.LVL118:
 1071               	.LFB13:
 139:mtk_c.c       **** 
 140:mtk_c.c       **** void v_body(int id) {
 1072               		.loc 1 140 21 is_stmt 1 view -0
 1073               		.cfi_startproc
 1074               		.loc 1 140 21 is_stmt 0 view .LVU366
 1075 03dc 2F0A      		move.l %a2,-(%sp)
 1076               		.cfi_def_cfa_offset 8
 1077               		.cfi_offset 10, -8
 1078 03de 222F 0008 		move.l 8(%sp),%d1
 141:mtk_c.c       ****   semaphore[id].count++;
 1079               		.loc 1 141 3 is_stmt 1 view .LVU367
 1080               		.loc 1 141 16 is_stmt 0 view .LVU368
 1081 03e2 41F9 0000 		lea semaphore,%a0
 1081      0000 
 1082 03e8 2001      		move.l %d1,%d0
 1083 03ea D081      		add.l %d1,%d0
 1084 03ec D081      		add.l %d1,%d0
 1085 03ee D080      		add.l %d0,%d0
 1086 03f0 D080      		add.l %d0,%d0
 1087               		.loc 1 141 22 view .LVU369
 1088 03f2 2230 0800 		move.l (%a0,%d0.l),%d1


 1089 03f6 5281      		addq.l #1,%d1
 1090 03f8 2181 0800 		move.l %d1,(%a0,%d0.l)
 142:mtk_c.c       ****     if (semaphore[id].count <= 0){
 1091               		.loc 1 142 5 is_stmt 1 view .LVU370
 1092               		.loc 1 142 8 is_stmt 0 view .LVU371
 1093 03fc 6F04      		jle .L94
 143:mtk_c.c       ****       wakeup(id);
 144:mtk_c.c       ****     }
 145:mtk_c.c       **** }
 1094               		.loc 1 145 1 view .LVU372
 1095 03fe 245F      		move.l (%sp)+,%a2
 1096 0400 4E75      		rts
 1097               	.L94:
 143:mtk_c.c       ****       wakeup(id);
 1098               		.loc 1 143 7 is_stmt 1 view .LVU373
 1099               	.LVL119:
 1100               	.LBB106:
 1101               	.LBI106:
 128:mtk_c.c       ****     addq(&ready, removeq(&semaphore[ch].task_list));
 1102               		.loc 1 128 6 view .LVU374
 129:mtk_c.c       **** }
 1103               		.loc 1 129 5 view .LVU375
 1104               	.LBB107:
 1105               	.LBI107:
 105:mtk_c.c       **** 	TASK_ID_TYPE topID = *pointerToAQueue;
 1106               		.loc 1 105 14 view .LVU376
 1107               	.LBB108:
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 1108               		.loc 1 106 2 view .LVU377
 106:mtk_c.c       **** 	if(topID == NULLTASKID) {
 1109               		.loc 1 106 15 is_stmt 0 view .LVU378
 1110 0402 45F0 0808 		lea 8(%a0,%d0.l),%a2
 1111 0406 2252      		move.l (%a2),%a1
 1112               	.LVL120:
 107:mtk_c.c       **** 		return NULLTASKID;
 1113               		.loc 1 107 2 is_stmt 1 view .LVU379
 107:mtk_c.c       **** 		return NULLTASKID;
 1114               		.loc 1 107 4 is_stmt 0 view .LVU380
 1115 0408 B2FC 0000 		cmp.w #0,%a1
 1116 040c 664E      		jne .L95
 1117               	.LVL121:
 107:mtk_c.c       **** 		return NULLTASKID;
 1118               		.loc 1 107 4 view .LVU381
 1119               	.LBE108:
 1120               	.LBE107:
 1121               	.LBB110:
 1122               	.LBI110:
  87:mtk_c.c       ****   	TASK_ID_TYPE currentTaskID = *pointerToAQueue;
 1123               		.loc 1 87 6 is_stmt 1 view .LVU382
 1124               	.LBB111:
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 1125               		.loc 1 88 4 view .LVU383
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 1126               		.loc 1 88 17 is_stmt 0 view .LVU384
 1127 040e 2039 0000 		move.l ready,%d0
 1127      0000 
 1128               	.LVL122:


  89:mtk_c.c       **** 		while(1) {
 1129               		.loc 1 89 2 is_stmt 1 view .LVU385
  89:mtk_c.c       **** 		while(1) {
 1130               		.loc 1 89 4 is_stmt 0 view .LVU386
 1131 0414 673C      		jeq .L86
 1132               	.L96:
  89:mtk_c.c       **** 		while(1) {
 1133               		.loc 1 89 4 view .LVU387
 1134 0416 41F9 0000 		lea task_tab,%a0
 1134      0000 
 1135               	.LVL123:
 1136               	.L87:
  90:mtk_c.c       **** 			TASK_ID_TYPE nextInLine = task_tab[currentTaskID].next;
 1137               		.loc 1 90 3 is_stmt 1 view .LVU388
 1138               	.LBB112:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 1139               		.loc 1 91 4 view .LVU389
 1140 041c 2200      		move.l %d0,%d1
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 1141               		.loc 1 91 17 is_stmt 0 view .LVU390
 1142 041e D080      		add.l %d0,%d0
 1143               	.LVL124:
  91:mtk_c.c       **** 			if(nextInLine == NULLTASKID) {
 1144               		.loc 1 91 17 view .LVU391
 1145 0420 D080      		add.l %d0,%d0
 1146 0422 D081      		add.l %d1,%d0
 1147 0424 D080      		add.l %d0,%d0
 1148 0426 D080      		add.l %d0,%d0
 1149 0428 2030 0810 		move.l 16(%a0,%d0.l),%d0
 1150               	.LVL125:
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 1151               		.loc 1 92 4 is_stmt 1 view .LVU392
  92:mtk_c.c       **** 				task_tab[currentTaskID].next = newTaskID;
 1152               		.loc 1 92 6 is_stmt 0 view .LVU393
 1153 042c 66EE      		jne .L87
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 1154               		.loc 1 93 5 is_stmt 1 view .LVU394
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 1155               		.loc 1 93 34 is_stmt 0 view .LVU395
 1156 042e 2001      		move.l %d1,%d0
 1157               	.LVL126:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 1158               		.loc 1 93 34 view .LVU396
 1159 0430 D081      		add.l %d1,%d0
 1160               	.LVL127:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 1161               		.loc 1 93 34 view .LVU397
 1162 0432 D080      		add.l %d0,%d0
 1163               	.LVL128:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 1164               		.loc 1 93 34 view .LVU398
 1165 0434 D081      		add.l %d1,%d0
 1166               	.LVL129:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 1167               		.loc 1 93 34 view .LVU399
 1168 0436 D080      		add.l %d0,%d0
 1169               	.LVL130:


  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 1170               		.loc 1 93 34 view .LVU400
 1171 0438 D080      		add.l %d0,%d0
 1172               	.LVL131:
  93:mtk_c.c       **** 				task_tab[newTaskID].next = NULLTASKID;
 1173               		.loc 1 93 34 view .LVU401
 1174 043a 2189 0810 		move.l %a1,16(%a0,%d0.l)
 1175               	.LVL132:
  94:mtk_c.c       **** 				break;
 1176               		.loc 1 94 5 is_stmt 1 view .LVU402
  94:mtk_c.c       **** 				break;
 1177               		.loc 1 94 30 is_stmt 0 view .LVU403
 1178 043e 2009      		move.l %a1,%d0
 1179 0440 D089      		add.l %a1,%d0
 1180 0442 D080      		add.l %d0,%d0
 1181 0444 D089      		add.l %a1,%d0
 1182 0446 D080      		add.l %d0,%d0
 1183 0448 D080      		add.l %d0,%d0
 1184 044a 42B0 0810 		clr.l 16(%a0,%d0.l)
  95:mtk_c.c       **** 			} else {
 1185               		.loc 1 95 5 is_stmt 1 view .LVU404
 1186               	.LBE112:
 1187               	.LBE111:
 1188               	.LBE110:
 1189               	.LBE106:
 1190               		.loc 1 145 1 is_stmt 0 view .LVU405
 1191 044e 245F      		move.l (%sp)+,%a2
 1192 0450 4E75      		rts
 1193               	.LVL133:
 1194               	.L86:
 1195               	.LBB118:
 1196               	.LBB115:
 1197               	.LBB113:
 101:mtk_c.c       **** 	}
 1198               		.loc 1 101 3 is_stmt 1 view .LVU406
 101:mtk_c.c       **** 	}
 1199               		.loc 1 101 20 is_stmt 0 view .LVU407
 1200 0452 23C9 0000 		move.l %a1,ready
 1200      0000 
 1201               	.LVL134:
 101:mtk_c.c       **** 	}
 1202               		.loc 1 101 20 view .LVU408
 1203               	.LBE113:
 1204               	.LBE115:
 1205               	.LBE118:
 1206               		.loc 1 145 1 view .LVU409
 1207 0458 245F      		move.l (%sp)+,%a2
 1208 045a 4E75      		rts
 1209               	.LVL135:
 1210               	.L95:
 1211               	.LBB119:
 1212               	.LBB116:
 1213               	.LBB109:
 110:mtk_c.c       **** 		return topID;
 1214               		.loc 1 110 3 is_stmt 1 view .LVU410
 110:mtk_c.c       **** 		return topID;
 1215               		.loc 1 110 37 is_stmt 0 view .LVU411


 1216 045c 2009      		move.l %a1,%d0
 1217 045e D089      		add.l %a1,%d0
 1218 0460 D080      		add.l %d0,%d0
 1219 0462 D089      		add.l %a1,%d0
 1220 0464 D080      		add.l %d0,%d0
 1221 0466 D080      		add.l %d0,%d0
 1222 0468 2040      		move.l %d0,%a0
 1223 046a D1FC 0000 		add.l #task_tab+16,%a0
 1223      0000 
 110:mtk_c.c       **** 		return topID;
 1224               		.loc 1 110 20 view .LVU412
 1225 0470 2490      		move.l (%a0),(%a2)
 111:mtk_c.c       **** 	}
 1226               		.loc 1 111 3 is_stmt 1 view .LVU413
 1227               	.LVL136:
 111:mtk_c.c       **** 	}
 1228               		.loc 1 111 3 is_stmt 0 view .LVU414
 1229               	.LBE109:
 1230               	.LBE116:
 1231               	.LBB117:
  87:mtk_c.c       ****   	TASK_ID_TYPE currentTaskID = *pointerToAQueue;
 1232               		.loc 1 87 6 is_stmt 1 view .LVU415
 1233               	.LBB114:
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 1234               		.loc 1 88 4 view .LVU416
  88:mtk_c.c       **** 	if(currentTaskID != NULLTASKID) {
 1235               		.loc 1 88 17 is_stmt 0 view .LVU417
 1236 0472 2039 0000 		move.l ready,%d0
 1236      0000 
 1237               	.LVL137:
  89:mtk_c.c       **** 		while(1) {
 1238               		.loc 1 89 2 is_stmt 1 view .LVU418
  89:mtk_c.c       **** 		while(1) {
 1239               		.loc 1 89 4 is_stmt 0 view .LVU419
 1240 0478 67D8      		jeq .L86
 1241 047a 609A      		jra .L96
 1242               	.LBE114:
 1243               	.LBE117:
 1244               	.LBE119:
 1245               		.cfi_endproc
 1246               	.LFE13:
 1247               		.size	v_body, .-v_body
 1248               		.globl	stacks
 1249               		.section	.bss
 1250               		.type	stacks, @object
 1251               		.size	stacks, 10240
 1252               	stacks:
 1253 0000 0000 0000 		.zero	10240
 1253      0000 0000 
 1253      0000 0000 
 1253      0000 0000 
 1253      0000 0000 
 1254               		.globl	task_tab
 1255               		.align	2
 1256               		.type	task_tab, @object
 1257               		.size	task_tab, 120
 1258               	task_tab:


 1259 2800 0000 0000 		.zero	120
 1259      0000 0000 
 1259      0000 0000 
 1259      0000 0000 
 1259      0000 0000 
 1260               		.globl	semaphore
 1261               		.align	2
 1262               		.type	semaphore, @object
 1263               		.size	semaphore, 36
 1264               	semaphore:
 1265 2878 0000 0000 		.zero	36
 1265      0000 0000 
 1265      0000 0000 
 1265      0000 0000 
 1265      0000 0000 
 1266               		.globl	ready
 1267               		.align	2
 1268               		.type	ready, @object
 1269               		.size	ready, 4
 1270               	ready:
 1271 289c 0000 0000 		.zero	4
 1272               		.globl	next_task
 1273               		.align	2
 1274               		.type	next_task, @object
 1275               		.size	next_task, 4
 1276               	next_task:
 1277 28a0 0000 0000 		.zero	4
 1278               		.globl	new_task
 1279               		.align	2
 1280               		.type	new_task, @object
 1281               		.size	new_task, 4
 1282               	new_task:
 1283 28a4 0000 0000 		.zero	4
 1284               		.globl	curr_task
 1285               		.align	2
 1286               		.type	curr_task, @object
 1287               		.size	curr_task, 4
 1288               	curr_task:
 1289 28a8 0000 0000 		.zero	4
 1290               		.text
 1291               	.Letext0:
 1292               		.file 2 "mtk_c.h"
 1293               		.section	.debug_info,"",@progbits
 1294               	.Ldebug_info0:
 1295 0000 0000 08BC 		.long	0x8bc
 1296 0004 0005      		.word	0x5
 1297 0006 01        		.byte	0x1
 1298 0007 04        		.byte	0x4
 1299 0008 0000 0000 		.long	.Ldebug_abbrev0
 1300 000c 1F        		.uleb128 0x1f
 1301 000d 0000 0000 		.long	.LASF54
 1302 0011 1D        		.byte	0x1d
 1303 0012 0000 0000 		.long	.LASF55
 1304 0016 0000 0000 		.long	.LASF56
 1305 001a 0000 0000 		.long	.Ltext0
 1306 001e 0000 047C 		.long	.Letext0-.Ltext0
 1307 0022 0000 0000 		.long	.Ldebug_line0


 1308 0026 03        		.uleb128 0x3
 1309 0027 01        		.byte	0x1
 1310 0028 06        		.byte	0x6
 1311 0029 0000 0000 		.long	.LASF0
 1312 002d 03        		.uleb128 0x3
 1313 002e 01        		.byte	0x1
 1314 002f 08        		.byte	0x8
 1315 0030 0000 0000 		.long	.LASF1
 1316 0034 03        		.uleb128 0x3
 1317 0035 02        		.byte	0x2
 1318 0036 05        		.byte	0x5
 1319 0037 0000 0000 		.long	.LASF2
 1320 003b 03        		.uleb128 0x3
 1321 003c 02        		.byte	0x2
 1322 003d 07        		.byte	0x7
 1323 003e 0000 0000 		.long	.LASF3
 1324 0042 03        		.uleb128 0x3
 1325 0043 04        		.byte	0x4
 1326 0044 05        		.byte	0x5
 1327 0045 0000 0000 		.long	.LASF4
 1328 0049 03        		.uleb128 0x3
 1329 004a 04        		.byte	0x4
 1330 004b 07        		.byte	0x7
 1331 004c 0000 0000 		.long	.LASF5
 1332 0050 03        		.uleb128 0x3
 1333 0051 08        		.byte	0x8
 1334 0052 05        		.byte	0x5
 1335 0053 0000 0000 		.long	.LASF6
 1336 0057 03        		.uleb128 0x3
 1337 0058 08        		.byte	0x8
 1338 0059 07        		.byte	0x7
 1339 005a 0000 0000 		.long	.LASF7
 1340 005e 03        		.uleb128 0x3
 1341 005f 0C        		.byte	0xc
 1342 0060 04        		.byte	0x4
 1343 0061 0000 0000 		.long	.LASF8
 1344 0065 03        		.uleb128 0x3
 1345 0066 04        		.byte	0x4
 1346 0067 07        		.byte	0x7
 1347 0068 0000 0000 		.long	.LASF9
 1348 006c 20        		.uleb128 0x20
 1349 006d 04        		.byte	0x4
 1350 006e 05        		.byte	0x5
 1351 006f 696E 7400 		.string	"int"
 1352 0073 21        		.uleb128 0x21
 1353 0074 04        		.byte	0x4
 1354 0075 03        		.uleb128 0x3
 1355 0076 01        		.byte	0x1
 1356 0077 06        		.byte	0x6
 1357 0078 0000 0000 		.long	.LASF10
 1358 007c 0F        		.uleb128 0xf
 1359 007d 0000 0000 		.long	.LASF16
 1360 0081 1E        		.byte	0x1e
 1361 0082 0D        		.byte	0xd
 1362 0083 0000 006C 		.long	0x6c
 1363 0087 1A        		.uleb128 0x1a
 1364 0088 14        		.byte	0x14


 1365 0089 20        		.byte	0x20
 1366 008a 0000 00CB 		.long	0xcb
 1367 008e 05        		.uleb128 0x5
 1368 008f 0000 0000 		.long	.LASF11
 1369 0093 21        		.byte	0x21
 1370 0094 0A        		.byte	0xa
 1371 0095 0000 00D2 		.long	0xd2
 1372 0099 00        		.byte	0
 1373 009a 05        		.uleb128 0x5
 1374 009b 0000 0000 		.long	.LASF12
 1375 009f 22        		.byte	0x22
 1376 00a0 09        		.byte	0x9
 1377 00a1 0000 0073 		.long	0x73
 1378 00a5 04        		.byte	0x4
 1379 00a6 05        		.uleb128 0x5
 1380 00a7 0000 0000 		.long	.LASF13
 1381 00ab 23        		.byte	0x23
 1382 00ac 07        		.byte	0x7
 1383 00ad 0000 006C 		.long	0x6c
 1384 00b1 08        		.byte	0x8
 1385 00b2 05        		.uleb128 0x5
 1386 00b3 0000 0000 		.long	.LASF14
 1387 00b7 24        		.byte	0x24
 1388 00b8 07        		.byte	0x7
 1389 00b9 0000 006C 		.long	0x6c
 1390 00bd 0C        		.byte	0xc
 1391 00be 05        		.uleb128 0x5
 1392 00bf 0000 0000 		.long	.LASF15
 1393 00c3 25        		.byte	0x25
 1394 00c4 10        		.byte	0x10
 1395 00c5 0000 007C 		.long	0x7c
 1396 00c9 10        		.byte	0x10
 1397 00ca 00        		.byte	0
 1398 00cb 22        		.uleb128 0x22
 1399 00cc 0000 00D2 		.long	0xd2
 1400 00d0 0B        		.uleb128 0xb
 1401 00d1 00        		.byte	0
 1402 00d2 10        		.uleb128 0x10
 1403 00d3 0000 00CB 		.long	0xcb
 1404 00d7 0F        		.uleb128 0xf
 1405 00d8 0000 0000 		.long	.LASF17
 1406 00dc 26        		.byte	0x26
 1407 00dd 03        		.byte	0x3
 1408 00de 0000 0087 		.long	0x87
 1409 00e2 1A        		.uleb128 0x1a
 1410 00e3 0C        		.byte	0xc
 1411 00e4 28        		.byte	0x28
 1412 00e5 0000 010F 		.long	0x10f
 1413 00e9 05        		.uleb128 0x5
 1414 00ea 0000 0000 		.long	.LASF18
 1415 00ee 29        		.byte	0x29
 1416 00ef 07        		.byte	0x7
 1417 00f0 0000 006C 		.long	0x6c
 1418 00f4 00        		.byte	0
 1419 00f5 23        		.uleb128 0x23
 1420 00f6 6E73 7400 		.string	"nst"
 1421 00fa 02        		.byte	0x2


 1422 00fb 2A        		.byte	0x2a
 1423 00fc 07        		.byte	0x7
 1424 00fd 0000 006C 		.long	0x6c
 1425 0101 04        		.byte	0x4
 1426 0102 05        		.uleb128 0x5
 1427 0103 0000 0000 		.long	.LASF19
 1428 0107 2B        		.byte	0x2b
 1429 0108 10        		.byte	0x10
 1430 0109 0000 007C 		.long	0x7c
 1431 010d 08        		.byte	0x8
 1432 010e 00        		.byte	0
 1433 010f 0F        		.uleb128 0xf
 1434 0110 0000 0000 		.long	.LASF20
 1435 0114 2C        		.byte	0x2c
 1436 0115 03        		.byte	0x3
 1437 0116 0000 00E2 		.long	0xe2
 1438 011a 24        		.uleb128 0x24
 1439 011b 0800      		.word	0x800
 1440 011d 02        		.byte	0x2
 1441 011e 2E        		.byte	0x2e
 1442 011f 09        		.byte	0x9
 1443 0120 0000 013F 		.long	0x13f
 1444 0124 05        		.uleb128 0x5
 1445 0125 0000 0000 		.long	.LASF21
 1446 0129 2F        		.byte	0x2f
 1447 012a 08        		.byte	0x8
 1448 012b 0000 013F 		.long	0x13f
 1449 012f 00        		.byte	0
 1450 0130 25        		.uleb128 0x25
 1451 0131 0000 0000 		.long	.LASF22
 1452 0135 02        		.byte	0x2
 1453 0136 30        		.byte	0x30
 1454 0137 08        		.byte	0x8
 1455 0138 0000 013F 		.long	0x13f
 1456 013c 0400      		.word	0x400
 1457 013e 00        		.byte	0
 1458 013f 11        		.uleb128 0x11
 1459 0140 0000 0075 		.long	0x75
 1460 0144 0000 0150 		.long	0x150
 1461 0148 26        		.uleb128 0x26
 1462 0149 0000 0049 		.long	0x49
 1463 014d 03FF      		.word	0x3ff
 1464 014f 00        		.byte	0
 1465 0150 0F        		.uleb128 0xf
 1466 0151 0000 0000 		.long	.LASF23
 1467 0155 31        		.byte	0x31
 1468 0156 03        		.byte	0x3
 1469 0157 0000 011A 		.long	0x11a
 1470 015b 06        		.uleb128 0x6
 1471 015c 0000 0000 		.long	.LASF24
 1472 0160 36        		.byte	0x36
 1473 0161 15        		.byte	0x15
 1474 0162 0000 007C 		.long	0x7c
 1475 0166 06        		.uleb128 0x6
 1476 0167 0000 0000 		.long	.LASF25
 1477 016b 37        		.byte	0x37
 1478 016c 15        		.byte	0x15


 1479 016d 0000 007C 		.long	0x7c
 1480 0171 06        		.uleb128 0x6
 1481 0172 0000 0000 		.long	.LASF26
 1482 0176 38        		.byte	0x38
 1483 0177 15        		.byte	0x15
 1484 0178 0000 007C 		.long	0x7c
 1485 017c 06        		.uleb128 0x6
 1486 017d 0000 0000 		.long	.LASF27
 1487 0181 39        		.byte	0x39
 1488 0182 15        		.byte	0x15
 1489 0183 0000 007C 		.long	0x7c
 1490 0187 11        		.uleb128 0x11
 1491 0188 0000 010F 		.long	0x10f
 1492 018c 0000 0197 		.long	0x197
 1493 0190 14        		.uleb128 0x14
 1494 0191 0000 0049 		.long	0x49
 1495 0195 02        		.byte	0x2
 1496 0196 00        		.byte	0
 1497 0197 06        		.uleb128 0x6
 1498 0198 0000 0000 		.long	.LASF28
 1499 019c 3B        		.byte	0x3b
 1500 019d 17        		.byte	0x17
 1501 019e 0000 0187 		.long	0x187
 1502 01a2 11        		.uleb128 0x11
 1503 01a3 0000 00D7 		.long	0xd7
 1504 01a7 0000 01B2 		.long	0x1b2
 1505 01ab 14        		.uleb128 0x14
 1506 01ac 0000 0049 		.long	0x49
 1507 01b0 05        		.byte	0x5
 1508 01b1 00        		.byte	0
 1509 01b2 06        		.uleb128 0x6
 1510 01b3 0000 0000 		.long	.LASF29
 1511 01b7 3C        		.byte	0x3c
 1512 01b8 11        		.byte	0x11
 1513 01b9 0000 01A2 		.long	0x1a2
 1514 01bd 11        		.uleb128 0x11
 1515 01be 0000 0150 		.long	0x150
 1516 01c2 0000 01CD 		.long	0x1cd
 1517 01c6 14        		.uleb128 0x14
 1518 01c7 0000 0049 		.long	0x49
 1519 01cb 04        		.byte	0x4
 1520 01cc 00        		.byte	0
 1521 01cd 06        		.uleb128 0x6
 1522 01ce 0000 0000 		.long	.LASF30
 1523 01d2 3D        		.byte	0x3d
 1524 01d3 13        		.byte	0x13
 1525 01d4 0000 01BD 		.long	0x1bd
 1526 01d8 07        		.uleb128 0x7
 1527 01d9 0000 015B 		.long	0x15b
 1528 01dd 04        		.byte	0x4
 1529 01de 0E        		.byte	0xe
 1530 01df 05        		.uleb128 0x5
 1531 01e0 03        		.byte	0x3
 1532 01e1 0000 0000 		.long	curr_task
 1533 01e5 07        		.uleb128 0x7
 1534 01e6 0000 0166 		.long	0x166
 1535 01ea 05        		.byte	0x5


 1536 01eb 0E        		.byte	0xe
 1537 01ec 05        		.uleb128 0x5
 1538 01ed 03        		.byte	0x3
 1539 01ee 0000 0000 		.long	new_task
 1540 01f2 07        		.uleb128 0x7
 1541 01f3 0000 0171 		.long	0x171
 1542 01f7 06        		.byte	0x6
 1543 01f8 0E        		.byte	0xe
 1544 01f9 05        		.uleb128 0x5
 1545 01fa 03        		.byte	0x3
 1546 01fb 0000 0000 		.long	next_task
 1547 01ff 07        		.uleb128 0x7
 1548 0200 0000 017C 		.long	0x17c
 1549 0204 07        		.byte	0x7
 1550 0205 0E        		.byte	0xe
 1551 0206 05        		.uleb128 0x5
 1552 0207 03        		.byte	0x3
 1553 0208 0000 0000 		.long	ready
 1554 020c 07        		.uleb128 0x7
 1555 020d 0000 0197 		.long	0x197
 1556 0211 09        		.byte	0x9
 1557 0212 10        		.byte	0x10
 1558 0213 05        		.uleb128 0x5
 1559 0214 03        		.byte	0x3
 1560 0215 0000 0000 		.long	semaphore
 1561 0219 07        		.uleb128 0x7
 1562 021a 0000 01B2 		.long	0x1b2
 1563 021e 0A        		.byte	0xa
 1564 021f 0A        		.byte	0xa
 1565 0220 05        		.uleb128 0x5
 1566 0221 03        		.byte	0x3
 1567 0222 0000 0000 		.long	task_tab
 1568 0226 07        		.uleb128 0x7
 1569 0227 0000 01CD 		.long	0x1cd
 1570 022b 0B        		.byte	0xb
 1571 022c 0C        		.byte	0xc
 1572 022d 05        		.uleb128 0x5
 1573 022e 03        		.byte	0x3
 1574 022f 0000 0000 		.long	stacks
 1575 0233 12        		.uleb128 0x12
 1576 0234 0000 0000 		.long	.LASF31
 1577 0238 16        		.byte	0x16
 1578 0239 0000 023F 		.long	0x23f
 1579 023d 0B        		.uleb128 0xb
 1580 023e 00        		.byte	0
 1581 023f 12        		.uleb128 0x12
 1582 0240 0000 0000 		.long	.LASF32
 1583 0244 15        		.byte	0x15
 1584 0245 0000 024B 		.long	0x24b
 1585 0249 0B        		.uleb128 0xb
 1586 024a 00        		.byte	0
 1587 024b 12        		.uleb128 0x12
 1588 024c 0000 0000 		.long	.LASF33
 1589 0250 17        		.byte	0x17
 1590 0251 0000 0257 		.long	0x257
 1591 0255 0B        		.uleb128 0xb
 1592 0256 00        		.byte	0


 1593 0257 12        		.uleb128 0x12
 1594 0258 0000 0000 		.long	.LASF34
 1595 025c 14        		.byte	0x14
 1596 025d 0000 0263 		.long	0x263
 1597 0261 0B        		.uleb128 0xb
 1598 0262 00        		.byte	0
 1599 0263 15        		.uleb128 0x15
 1600 0264 0000 0000 		.long	.LASF35
 1601 0268 8C        		.byte	0x8c
 1602 0269 0000 0000 		.long	.LFB13
 1603 026d 0000 00A0 		.long	.LFE13-.LFB13
 1604 0271 01        		.uleb128 0x1
 1605 0272 9C        		.byte	0x9c
 1606 0273 0000 032F 		.long	0x32f
 1607 0277 1B        		.uleb128 0x1b
 1608 0278 6964 00   		.string	"id"
 1609 027b 8C        		.byte	0x8c
 1610 027c 0000 006C 		.long	0x6c
 1611 0280 02        		.uleb128 0x2
 1612 0281 91        		.byte	0x91
 1613 0282 00        		.sleb128 0
 1614 0283 08        		.uleb128 0x8
 1615 0284 0000 0418 		.long	0x418
 1616 0288 0000 0000 		.long	.LBI106
 1617 028c 01        		.byte	.LVU374
 1618 028d 0000 0000 		.long	.LLRL47
 1619 0291 8F        		.byte	0x8f
 1620 0292 07        		.byte	0x7
 1621 0293 02        		.uleb128 0x2
 1622 0294 0000 0422 		.long	0x422
 1623 0298 0000 0000 		.long	.LLST48
 1624 029c 0000 0000 		.long	.LVUS48
 1625 02a0 0C        		.uleb128 0xc
 1626 02a1 0000 044B 		.long	0x44b
 1627 02a5 0000 0000 		.long	.LBI107
 1628 02a9 03        		.byte	.LVU376
 1629 02aa 0000 0000 		.long	.LLRL49
 1630 02ae 81        		.byte	0x81
 1631 02af 0000 02D4 		.long	0x2d4
 1632 02b3 02        		.uleb128 0x2
 1633 02b4 0000 045A 		.long	0x45a
 1634 02b8 0000 0000 		.long	.LLST50
 1635 02bc 0000 0000 		.long	.LVUS50
 1636 02c0 04        		.uleb128 0x4
 1637 02c1 0000 0000 		.long	.LLRL49
 1638 02c5 01        		.uleb128 0x1
 1639 02c6 0000 0465 		.long	0x465
 1640 02ca 0000 0000 		.long	.LLST51
 1641 02ce 0000 0000 		.long	.LVUS51
 1642 02d2 00        		.byte	0
 1643 02d3 00        		.byte	0
 1644 02d4 08        		.uleb128 0x8
 1645 02d5 0000 0476 		.long	0x476
 1646 02d9 0000 0000 		.long	.LBI110
 1647 02dd 01        		.byte	.LVU382
 1648 02de 0000 0000 		.long	.LLRL52
 1649 02e2 81        		.byte	0x81


 1650 02e3 05        		.byte	0x5
 1651 02e4 02        		.uleb128 0x2
 1652 02e5 0000 048B 		.long	0x48b
 1653 02e9 0000 0000 		.long	.LLST53
 1654 02ed 0000 0000 		.long	.LVUS53
 1655 02f1 02        		.uleb128 0x2
 1656 02f2 0000 0480 		.long	0x480
 1657 02f6 0000 0000 		.long	.LLST54
 1658 02fa 0000 0000 		.long	.LVUS54
 1659 02fe 04        		.uleb128 0x4
 1660 02ff 0000 0000 		.long	.LLRL52
 1661 0303 01        		.uleb128 0x1
 1662 0304 0000 0496 		.long	0x496
 1663 0308 0000 0000 		.long	.LLST55
 1664 030c 0000 0000 		.long	.LVUS55
 1665 0310 0A        		.uleb128 0xa
 1666 0311 0000 04A1 		.long	0x4a1
 1667 0315 0000 0000 		.long	.LBB112
 1668 0319 0000 0032 		.long	.LBE112-.LBB112
 1669 031d 01        		.uleb128 0x1
 1670 031e 0000 04A2 		.long	0x4a2
 1671 0322 0000 0000 		.long	.LLST56
 1672 0326 0000 0000 		.long	.LVUS56
 1673 032a 00        		.byte	0
 1674 032b 00        		.byte	0
 1675 032c 00        		.byte	0
 1676 032d 00        		.byte	0
 1677 032e 00        		.byte	0
 1678 032f 15        		.uleb128 0x15
 1679 0330 0000 0000 		.long	.LASF36
 1680 0334 85        		.byte	0x85
 1681 0335 0000 0000 		.long	.LFB12
 1682 0339 0000 00A2 		.long	.LFE12-.LFB12
 1683 033d 01        		.uleb128 0x1
 1684 033e 9C        		.byte	0x9c
 1685 033f 0000 0418 		.long	0x418
 1686 0343 1B        		.uleb128 0x1b
 1687 0344 6964 00   		.string	"id"
 1688 0347 85        		.byte	0x85
 1689 0348 0000 006C 		.long	0x6c
 1690 034c 02        		.uleb128 0x2
 1691 034d 91        		.byte	0x91
 1692 034e 00        		.sleb128 0
 1693 034f 08        		.uleb128 0x8
 1694 0350 0000 042D 		.long	0x42d
 1695 0354 0000 0000 		.long	.LBI82
 1696 0358 01        		.byte	.LVU305
 1697 0359 0000 0000 		.long	.LLRL36
 1698 035d 88        		.byte	0x88
 1699 035e 05        		.byte	0x5
 1700 035f 02        		.uleb128 0x2
 1701 0360 0000 0437 		.long	0x437
 1702 0364 0000 0000 		.long	.LLST37
 1703 0368 0000 0000 		.long	.LVUS37
 1704 036c 0C        		.uleb128 0xc
 1705 036d 0000 0476 		.long	0x476
 1706 0371 0000 0000 		.long	.LBI84


 1707 0375 00        		.byte	.LVU307
 1708 0376 0000 0000 		.long	.LLRL38
 1709 037a 7B        		.byte	0x7b
 1710 037b 0000 03C8 		.long	0x3c8
 1711 037f 02        		.uleb128 0x2
 1712 0380 0000 048B 		.long	0x48b
 1713 0384 0000 0000 		.long	.LLST39
 1714 0388 0000 0000 		.long	.LVUS39
 1715 038c 02        		.uleb128 0x2
 1716 038d 0000 0480 		.long	0x480
 1717 0391 0000 0000 		.long	.LLST40
 1718 0395 0000 0000 		.long	.LVUS40
 1719 0399 04        		.uleb128 0x4
 1720 039a 0000 0000 		.long	.LLRL38
 1721 039e 01        		.uleb128 0x1
 1722 039f 0000 0496 		.long	0x496
 1723 03a3 0000 0000 		.long	.LLST41
 1724 03a7 0000 0000 		.long	.LVUS41
 1725 03ab 0A        		.uleb128 0xa
 1726 03ac 0000 04A1 		.long	0x4a1
 1727 03b0 0000 0000 		.long	.LBB86
 1728 03b4 0000 0032 		.long	.LBE86-.LBB86
 1729 03b8 01        		.uleb128 0x1
 1730 03b9 0000 04A2 		.long	0x4a2
 1731 03bd 0000 0000 		.long	.LLST42
 1732 03c1 0000 0000 		.long	.LVUS42
 1733 03c5 00        		.byte	0
 1734 03c6 00        		.byte	0
 1735 03c7 00        		.byte	0
 1736 03c8 0C        		.uleb128 0xc
 1737 03c9 0000 0442 		.long	0x442
 1738 03cd 0000 0000 		.long	.LBI88
 1739 03d1 03        		.byte	.LVU331
 1740 03d2 0000 0000 		.long	.LLRL43
 1741 03d6 7C        		.byte	0x7c
 1742 03d7 0000 040D 		.long	0x40d
 1743 03db 08        		.uleb128 0x8
 1744 03dc 0000 044B 		.long	0x44b
 1745 03e0 0000 0000 		.long	.LBI90
 1746 03e4 05        		.byte	.LVU333
 1747 03e5 0000 0000 		.long	.LLRL44
 1748 03e9 74        		.byte	0x74
 1749 03ea 11        		.byte	0x11
 1750 03eb 02        		.uleb128 0x2
 1751 03ec 0000 045A 		.long	0x45a
 1752 03f0 0000 0000 		.long	.LLST45
 1753 03f4 0000 0000 		.long	.LVUS45
 1754 03f8 04        		.uleb128 0x4
 1755 03f9 0000 0000 		.long	.LLRL44
 1756 03fd 01        		.uleb128 0x1
 1757 03fe 0000 0465 		.long	0x465
 1758 0402 0000 0000 		.long	.LLST46
 1759 0406 0000 0000 		.long	.LVUS46
 1760 040a 00        		.byte	0
 1761 040b 00        		.byte	0
 1762 040c 00        		.byte	0
 1763 040d 16        		.uleb128 0x16


 1764 040e 0000 0000 		.long	.LVL117
 1765 0412 0000 0233 		.long	0x233
 1766 0416 00        		.byte	0
 1767 0417 00        		.byte	0
 1768 0418 17        		.uleb128 0x17
 1769 0419 0000 0000 		.long	.LASF37
 1770 041d 80        		.byte	0x80
 1771 041e 0000 042D 		.long	0x42d
 1772 0422 1C        		.uleb128 0x1c
 1773 0423 6368 00   		.string	"ch"
 1774 0426 80        		.byte	0x80
 1775 0427 11        		.byte	0x11
 1776 0428 0000 006C 		.long	0x6c
 1777 042c 00        		.byte	0
 1778 042d 17        		.uleb128 0x17
 1779 042e 0000 0000 		.long	.LASF38
 1780 0432 7A        		.byte	0x7a
 1781 0433 0000 0442 		.long	0x442
 1782 0437 1C        		.uleb128 0x1c
 1783 0438 6368 00   		.string	"ch"
 1784 043b 7A        		.byte	0x7a
 1785 043c 10        		.byte	0x10
 1786 043d 0000 006C 		.long	0x6c
 1787 0441 00        		.byte	0
 1788 0442 27        		.uleb128 0x27
 1789 0443 0000 0000 		.long	.LASF57
 1790 0447 01        		.byte	0x1
 1791 0448 73        		.byte	0x73
 1792 0449 06        		.byte	0x6
 1793 044a 01        		.byte	0x1
 1794 044b 1D        		.uleb128 0x1d
 1795 044c 0000 0000 		.long	.LASF45
 1796 0450 69        		.byte	0x69
 1797 0451 0E        		.byte	0xe
 1798 0452 0000 007C 		.long	0x7c
 1799 0456 0000 0471 		.long	0x471
 1800 045a 13        		.uleb128 0x13
 1801 045b 0000 0000 		.long	.LASF39
 1802 045f 69        		.byte	0x69
 1803 0460 24        		.byte	0x24
 1804 0461 0000 0471 		.long	0x471
 1805 0465 0D        		.uleb128 0xd
 1806 0466 0000 0000 		.long	.LASF42
 1807 046a 6A        		.byte	0x6a
 1808 046b 0F        		.byte	0xf
 1809 046c 0000 007C 		.long	0x7c
 1810 0470 00        		.byte	0
 1811 0471 10        		.uleb128 0x10
 1812 0472 0000 007C 		.long	0x7c
 1813 0476 17        		.uleb128 0x17
 1814 0477 0000 0000 		.long	.LASF40
 1815 047b 57        		.byte	0x57
 1816 047c 0000 04AF 		.long	0x4af
 1817 0480 13        		.uleb128 0x13
 1818 0481 0000 0000 		.long	.LASF39
 1819 0485 57        		.byte	0x57
 1820 0486 19        		.byte	0x19


 1821 0487 0000 0471 		.long	0x471
 1822 048b 13        		.uleb128 0x13
 1823 048c 0000 0000 		.long	.LASF41
 1824 0490 57        		.byte	0x57
 1825 0491 37        		.byte	0x37
 1826 0492 0000 007C 		.long	0x7c
 1827 0496 0D        		.uleb128 0xd
 1828 0497 0000 0000 		.long	.LASF43
 1829 049b 58        		.byte	0x58
 1830 049c 11        		.byte	0x11
 1831 049d 0000 007C 		.long	0x7c
 1832 04a1 28        		.uleb128 0x28
 1833 04a2 0D        		.uleb128 0xd
 1834 04a3 0000 0000 		.long	.LASF44
 1835 04a7 5B        		.byte	0x5b
 1836 04a8 11        		.byte	0x11
 1837 04a9 0000 007C 		.long	0x7c
 1838 04ad 00        		.byte	0
 1839 04ae 00        		.byte	0
 1840 04af 1E        		.uleb128 0x1e
 1841 04b0 0000 0000 		.long	.LASF52
 1842 04b4 4E        		.byte	0x4e
 1843 04b5 0000 0000 		.long	.LFB6
 1844 04b9 0000 0034 		.long	.LFE6-.LFB6
 1845 04bd 01        		.uleb128 0x1
 1846 04be 9C        		.byte	0x9c
 1847 04bf 0000 0509 		.long	0x509
 1848 04c3 18        		.uleb128 0x18
 1849 04c4 0000 044B 		.long	0x44b
 1850 04c8 0000 0000 		.long	.LBI29
 1851 04cc 02        		.byte	.LVU123
 1852 04cd 0000 0000 		.long	.LBB29
 1853 04d1 0000 0022 		.long	.LBE29-.LBB29
 1854 04d5 52        		.byte	0x52
 1855 04d6 0F        		.byte	0xf
 1856 04d7 0000 04F6 		.long	0x4f6
 1857 04db 02        		.uleb128 0x2
 1858 04dc 0000 045A 		.long	0x45a
 1859 04e0 0000 0000 		.long	.LLST13
 1860 04e4 0000 0000 		.long	.LVUS13
 1861 04e8 01        		.uleb128 0x1
 1862 04e9 0000 0465 		.long	0x465
 1863 04ed 0000 0000 		.long	.LLST14
 1864 04f1 0000 0000 		.long	.LVUS14
 1865 04f5 00        		.byte	0
 1866 04f6 29        		.uleb128 0x29
 1867 04f7 0000 0000 		.long	.LVL39
 1868 04fb 0000 024B 		.long	0x24b
 1869 04ff 16        		.uleb128 0x16
 1870 0500 0000 0000 		.long	.LVL40
 1871 0504 0000 023F 		.long	0x23f
 1872 0508 00        		.byte	0
 1873 0509 1D        		.uleb128 0x1d
 1874 050a 0000 0000 		.long	.LASF46
 1875 050e 39        		.byte	0x39
 1876 050f 07        		.byte	0x7
 1877 0510 0000 0073 		.long	0x73


 1878 0514 0000 053A 		.long	0x53a
 1879 0518 13        		.uleb128 0x13
 1880 0519 0000 0000 		.long	.LASF47
 1881 051d 39        		.byte	0x39
 1882 051e 1F        		.byte	0x1f
 1883 051f 0000 007C 		.long	0x7c
 1884 0523 0D        		.uleb128 0xd
 1885 0524 0000 0000 		.long	.LASF48
 1886 0528 3D        		.byte	0x3d
 1887 0529 08        		.byte	0x8
 1888 052a 0000 053A 		.long	0x53a
 1889 052e 0D        		.uleb128 0xd
 1890 052f 0000 0000 		.long	.LASF49
 1891 0533 41        		.byte	0x41
 1892 0534 17        		.byte	0x17
 1893 0535 0000 053F 		.long	0x53f
 1894 0539 00        		.byte	0
 1895 053a 10        		.uleb128 0x10
 1896 053b 0000 006C 		.long	0x6c
 1897 053f 10        		.uleb128 0x10
 1898 0540 0000 003B 		.long	0x3b
 1899 0544 15        		.uleb128 0x15
 1900 0545 0000 0000 		.long	.LASF50
 1901 0549 27        		.byte	0x27
 1902 054a 0000 0000 		.long	.LFB4
 1903 054e 0000 00BE 		.long	.LFE4-.LFB4
 1904 0552 01        		.uleb128 0x1
 1905 0553 9C        		.byte	0x9c
 1906 0554 0000 0617 		.long	0x617
 1907 0558 2A        		.uleb128 0x2a
 1908 0559 0000 0000 		.long	.LASF51
 1909 055d 01        		.byte	0x1
 1910 055e 27        		.byte	0x27
 1911 055f 16        		.byte	0x16
 1912 0560 0000 00D2 		.long	0xd2
 1913 0564 02        		.uleb128 0x2
 1914 0565 91        		.byte	0x91
 1915 0566 00        		.sleb128 0
 1916 0567 04        		.uleb128 0x4
 1917 0568 0000 0000 		.long	.LLRL2
 1918 056c 19        		.uleb128 0x19
 1919 056d 6900      		.string	"i"
 1920 056f 2C        		.byte	0x2c
 1921 0570 15        		.byte	0x15
 1922 0571 0000 007C 		.long	0x7c
 1923 0575 0000 0000 		.long	.LLST3
 1924 0579 0000 0000 		.long	.LVUS3
 1925 057d 18        		.uleb128 0x18
 1926 057e 0000 0509 		.long	0x509
 1927 0582 0000 0000 		.long	.LBI20
 1928 0586 01        		.byte	.LVU60
 1929 0587 0000 0000 		.long	.LBB20
 1930 058b 0000 002A 		.long	.LBE20-.LBB20
 1931 058f 32        		.byte	0x32
 1932 0590 1F        		.byte	0x1f
 1933 0591 0000 05BD 		.long	0x5bd
 1934 0595 02        		.uleb128 0x2


 1935 0596 0000 0518 		.long	0x518
 1936 059a 0000 0000 		.long	.LLST4
 1937 059e 0000 0000 		.long	.LVUS4
 1938 05a2 01        		.uleb128 0x1
 1939 05a3 0000 0523 		.long	0x523
 1940 05a7 0000 0000 		.long	.LLST5
 1941 05ab 0000 0000 		.long	.LVUS5
 1942 05af 01        		.uleb128 0x1
 1943 05b0 0000 052E 		.long	0x52e
 1944 05b4 0000 0000 		.long	.LLST6
 1945 05b8 0000 0000 		.long	.LVUS6
 1946 05bc 00        		.byte	0
 1947 05bd 08        		.uleb128 0x8
 1948 05be 0000 0476 		.long	0x476
 1949 05c2 0000 0000 		.long	.LBI22
 1950 05c6 01        		.byte	.LVU76
 1951 05c7 0000 0000 		.long	.LLRL7
 1952 05cb 33        		.byte	0x33
 1953 05cc 07        		.byte	0x7
 1954 05cd 02        		.uleb128 0x2
 1955 05ce 0000 048B 		.long	0x48b
 1956 05d2 0000 0000 		.long	.LLST8
 1957 05d6 0000 0000 		.long	.LVUS8
 1958 05da 09        		.uleb128 0x9
 1959 05db 0000 0480 		.long	0x480
 1960 05df 06        		.uleb128 0x6
 1961 05e0 03        		.byte	0x3
 1962 05e1 0000 0000 		.long	ready
 1963 05e5 9F        		.byte	0x9f
 1964 05e6 04        		.uleb128 0x4
 1965 05e7 0000 0000 		.long	.LLRL7
 1966 05eb 01        		.uleb128 0x1
 1967 05ec 0000 0496 		.long	0x496
 1968 05f0 0000 0000 		.long	.LLST9
 1969 05f4 0000 0000 		.long	.LVUS9
 1970 05f8 0A        		.uleb128 0xa
 1971 05f9 0000 04A1 		.long	0x4a1
 1972 05fd 0000 0000 		.long	.LBB24
 1973 0601 0000 002E 		.long	.LBE24-.LBB24
 1974 0605 01        		.uleb128 0x1
 1975 0606 0000 04A2 		.long	0x4a2
 1976 060a 0000 0000 		.long	.LLST10
 1977 060e 0000 0000 		.long	.LVUS10
 1978 0612 00        		.byte	0
 1979 0613 00        		.byte	0
 1980 0614 00        		.byte	0
 1981 0615 00        		.byte	0
 1982 0616 00        		.byte	0
 1983 0617 1E        		.uleb128 0x1e
 1984 0618 0000 0000 		.long	.LASF53
 1985 061c 0D        		.byte	0xd
 1986 061d 0000 0000 		.long	.LFB3
 1987 0621 0000 005C 		.long	.LFE3-.LFB3
 1988 0625 01        		.uleb128 0x1
 1989 0626 9C        		.byte	0x9c
 1990 0627 0000 0666 		.long	0x666
 1991 062b 2B        		.uleb128 0x2b


 1992 062c 0000 0000 		.long	.LBB11
 1993 0630 0000 0026 		.long	.LBE11-.LBB11
 1994 0634 0000 064A 		.long	0x64a
 1995 0638 19        		.uleb128 0x19
 1996 0639 6900      		.string	"i"
 1997 063b 12        		.byte	0x12
 1998 063c 0B        		.byte	0xb
 1999 063d 0000 006C 		.long	0x6c
 2000 0641 0000 0000 		.long	.LLST0
 2001 0645 0000 0000 		.long	.LVUS0
 2002 0649 00        		.byte	0
 2003 064a 2C        		.uleb128 0x2c
 2004 064b 0000 0000 		.long	.LBB12
 2005 064f 0000 0026 		.long	.LBE12-.LBB12
 2006 0653 19        		.uleb128 0x19
 2007 0654 6900      		.string	"i"
 2008 0656 21        		.byte	0x21
 2009 0657 0B        		.byte	0xb
 2010 0658 0000 006C 		.long	0x6c
 2011 065c 0000 0000 		.long	.LLST1
 2012 0660 0000 0000 		.long	.LVUS1
 2013 0664 00        		.byte	0
 2014 0665 00        		.byte	0
 2015 0666 0E        		.uleb128 0xe
 2016 0667 0000 0509 		.long	0x509
 2017 066b 0000 0000 		.long	.LFB5
 2018 066f 0000 0042 		.long	.LFE5-.LFB5
 2019 0673 01        		.uleb128 0x1
 2020 0674 9C        		.byte	0x9c
 2021 0675 0000 069C 		.long	0x69c
 2022 0679 09        		.uleb128 0x9
 2023 067a 0000 0518 		.long	0x518
 2024 067e 02        		.uleb128 0x2
 2025 067f 91        		.byte	0x91
 2026 0680 00        		.sleb128 0
 2027 0681 01        		.uleb128 0x1
 2028 0682 0000 0523 		.long	0x523
 2029 0686 0000 0000 		.long	.LLST11
 2030 068a 0000 0000 		.long	.LVUS11
 2031 068e 01        		.uleb128 0x1
 2032 068f 0000 052E 		.long	0x52e
 2033 0693 0000 0000 		.long	.LLST12
 2034 0697 0000 0000 		.long	.LVUS12
 2035 069b 00        		.byte	0
 2036 069c 0E        		.uleb128 0xe
 2037 069d 0000 0476 		.long	0x476
 2038 06a1 0000 0000 		.long	.LFB7
 2039 06a5 0000 004A 		.long	.LFE7-.LFB7
 2040 06a9 01        		.uleb128 0x1
 2041 06aa 9C        		.byte	0x9c
 2042 06ab 0000 06E8 		.long	0x6e8
 2043 06af 09        		.uleb128 0x9
 2044 06b0 0000 0480 		.long	0x480
 2045 06b4 02        		.uleb128 0x2
 2046 06b5 91        		.byte	0x91
 2047 06b6 00        		.sleb128 0
 2048 06b7 09        		.uleb128 0x9


 2049 06b8 0000 048B 		.long	0x48b
 2050 06bc 02        		.uleb128 0x2
 2051 06bd 91        		.byte	0x91
 2052 06be 04        		.sleb128 4
 2053 06bf 01        		.uleb128 0x1
 2054 06c0 0000 0496 		.long	0x496
 2055 06c4 0000 0000 		.long	.LLST15
 2056 06c8 0000 0000 		.long	.LVUS15
 2057 06cc 0A        		.uleb128 0xa
 2058 06cd 0000 04A1 		.long	0x4a1
 2059 06d1 0000 0000 		.long	.LBB32
 2060 06d5 0000 0032 		.long	.LBE32-.LBB32
 2061 06d9 01        		.uleb128 0x1
 2062 06da 0000 04A2 		.long	0x4a2
 2063 06de 0000 0000 		.long	.LLST16
 2064 06e2 0000 0000 		.long	.LVUS16
 2065 06e6 00        		.byte	0
 2066 06e7 00        		.byte	0
 2067 06e8 0E        		.uleb128 0xe
 2068 06e9 0000 044B 		.long	0x44b
 2069 06ed 0000 0000 		.long	.LFB8
 2070 06f1 0000 0020 		.long	.LFE8-.LFB8
 2071 06f5 01        		.uleb128 0x1
 2072 06f6 9C        		.byte	0x9c
 2073 06f7 0000 0711 		.long	0x711
 2074 06fb 09        		.uleb128 0x9
 2075 06fc 0000 045A 		.long	0x45a
 2076 0700 02        		.uleb128 0x2
 2077 0701 91        		.byte	0x91
 2078 0702 00        		.sleb128 0
 2079 0703 01        		.uleb128 0x1
 2080 0704 0000 0465 		.long	0x465
 2081 0708 0000 0000 		.long	.LLST17
 2082 070c 0000 0000 		.long	.LVUS17
 2083 0710 00        		.byte	0
 2084 0711 0E        		.uleb128 0xe
 2085 0712 0000 0442 		.long	0x442
 2086 0716 0000 0000 		.long	.LFB9
 2087 071a 0000 002C 		.long	.LFE9-.LFB9
 2088 071e 01        		.uleb128 0x1
 2089 071f 9C        		.byte	0x9c
 2090 0720 0000 0755 		.long	0x755
 2091 0724 2D        		.uleb128 0x2d
 2092 0725 0000 044B 		.long	0x44b
 2093 0729 0000 0000 		.long	.LBI35
 2094 072d 02        		.byte	.LVU178
 2095 072e 0000 0000 		.long	.LBB35
 2096 0732 0000 0022 		.long	.LBE35-.LBB35
 2097 0736 01        		.byte	0x1
 2098 0737 74        		.byte	0x74
 2099 0738 11        		.byte	0x11
 2100 0739 02        		.uleb128 0x2
 2101 073a 0000 045A 		.long	0x45a
 2102 073e 0000 0000 		.long	.LLST18
 2103 0742 0000 0000 		.long	.LVUS18
 2104 0746 01        		.uleb128 0x1
 2105 0747 0000 0465 		.long	0x465


 2106 074b 0000 0000 		.long	.LLST19
 2107 074f 0000 0000 		.long	.LVUS19
 2108 0753 00        		.byte	0
 2109 0754 00        		.byte	0
 2110 0755 0E        		.uleb128 0xe
 2111 0756 0000 042D 		.long	0x42d
 2112 075a 0000 0000 		.long	.LFB10
 2113 075e 0000 0094 		.long	.LFE10-.LFB10
 2114 0762 01        		.uleb128 0x1
 2115 0763 9C        		.byte	0x9c
 2116 0764 0000 081B 		.long	0x81b
 2117 0768 09        		.uleb128 0x9
 2118 0769 0000 0437 		.long	0x437
 2119 076d 02        		.uleb128 0x2
 2120 076e 91        		.byte	0x91
 2121 076f 00        		.sleb128 0
 2122 0770 0C        		.uleb128 0xc
 2123 0771 0000 0476 		.long	0x476
 2124 0775 0000 0000 		.long	.LBI44
 2125 0779 00        		.byte	.LVU198
 2126 077a 0000 0000 		.long	.LLRL20
 2127 077e 7B        		.byte	0x7b
 2128 077f 0000 07CC 		.long	0x7cc
 2129 0783 02        		.uleb128 0x2
 2130 0784 0000 048B 		.long	0x48b
 2131 0788 0000 0000 		.long	.LLST21
 2132 078c 0000 0000 		.long	.LVUS21
 2133 0790 02        		.uleb128 0x2
 2134 0791 0000 0480 		.long	0x480
 2135 0795 0000 0000 		.long	.LLST22
 2136 0799 0000 0000 		.long	.LVUS22
 2137 079d 04        		.uleb128 0x4
 2138 079e 0000 0000 		.long	.LLRL20
 2139 07a2 01        		.uleb128 0x1
 2140 07a3 0000 0496 		.long	0x496
 2141 07a7 0000 0000 		.long	.LLST23
 2142 07ab 0000 0000 		.long	.LVUS23
 2143 07af 0A        		.uleb128 0xa
 2144 07b0 0000 04A1 		.long	0x4a1
 2145 07b4 0000 0000 		.long	.LBB46
 2146 07b8 0000 0032 		.long	.LBE46-.LBB46
 2147 07bc 01        		.uleb128 0x1
 2148 07bd 0000 04A2 		.long	0x4a2
 2149 07c1 0000 0000 		.long	.LLST24
 2150 07c5 0000 0000 		.long	.LVUS24
 2151 07c9 00        		.byte	0
 2152 07ca 00        		.byte	0
 2153 07cb 00        		.byte	0
 2154 07cc 0C        		.uleb128 0xc
 2155 07cd 0000 0442 		.long	0x442
 2156 07d1 0000 0000 		.long	.LBI48
 2157 07d5 03        		.byte	.LVU222
 2158 07d6 0000 0000 		.long	.LLRL25
 2159 07da 7C        		.byte	0x7c
 2160 07db 0000 0811 		.long	0x811
 2161 07df 08        		.uleb128 0x8
 2162 07e0 0000 044B 		.long	0x44b


 2163 07e4 0000 0000 		.long	.LBI50
 2164 07e8 05        		.byte	.LVU224
 2165 07e9 0000 0000 		.long	.LLRL26
 2166 07ed 74        		.byte	0x74
 2167 07ee 11        		.byte	0x11
 2168 07ef 02        		.uleb128 0x2
 2169 07f0 0000 045A 		.long	0x45a
 2170 07f4 0000 0000 		.long	.LLST27
 2171 07f8 0000 0000 		.long	.LVUS27
 2172 07fc 04        		.uleb128 0x4
 2173 07fd 0000 0000 		.long	.LLRL26
 2174 0801 01        		.uleb128 0x1
 2175 0802 0000 0465 		.long	0x465
 2176 0806 0000 0000 		.long	.LLST28
 2177 080a 0000 0000 		.long	.LVUS28
 2178 080e 00        		.byte	0
 2179 080f 00        		.byte	0
 2180 0810 00        		.byte	0
 2181 0811 16        		.uleb128 0x16
 2182 0812 0000 0000 		.long	.LVL76
 2183 0816 0000 0233 		.long	0x233
 2184 081a 00        		.byte	0
 2185 081b 2E        		.uleb128 0x2e
 2186 081c 0000 0418 		.long	0x418
 2187 0820 0000 0000 		.long	.LFB11
 2188 0824 0000 0080 		.long	.LFE11-.LFB11
 2189 0828 01        		.uleb128 0x1
 2190 0829 9C        		.byte	0x9c
 2191 082a 09        		.uleb128 0x9
 2192 082b 0000 0422 		.long	0x422
 2193 082f 02        		.uleb128 0x2
 2194 0830 91        		.byte	0x91
 2195 0831 00        		.sleb128 0
 2196 0832 18        		.uleb128 0x18
 2197 0833 0000 044B 		.long	0x44b
 2198 0837 0000 0000 		.long	.LBI66
 2199 083b 01        		.byte	.LVU258
 2200 083c 0000 0000 		.long	.LBB66
 2201 0840 0000 002C 		.long	.LBE66-.LBB66
 2202 0844 81        		.byte	0x81
 2203 0845 05        		.byte	0x5
 2204 0846 0000 0865 		.long	0x865
 2205 084a 02        		.uleb128 0x2
 2206 084b 0000 045A 		.long	0x45a
 2207 084f 0000 0000 		.long	.LLST29
 2208 0853 0000 0000 		.long	.LVUS29
 2209 0857 01        		.uleb128 0x1
 2210 0858 0000 0465 		.long	0x465
 2211 085c 0000 0000 		.long	.LLST30
 2212 0860 0000 0000 		.long	.LVUS30
 2213 0864 00        		.byte	0
 2214 0865 08        		.uleb128 0x8
 2215 0866 0000 0476 		.long	0x476
 2216 086a 0000 0000 		.long	.LBI68
 2217 086e 02        		.byte	.LVU268
 2218 086f 0000 0000 		.long	.LLRL31
 2219 0873 81        		.byte	0x81


 2220 0874 05        		.byte	0x5
 2221 0875 02        		.uleb128 0x2
 2222 0876 0000 048B 		.long	0x48b
 2223 087a 0000 0000 		.long	.LLST32
 2224 087e 0000 0000 		.long	.LVUS32
 2225 0882 02        		.uleb128 0x2
 2226 0883 0000 0480 		.long	0x480
 2227 0887 0000 0000 		.long	.LLST33
 2228 088b 0000 0000 		.long	.LVUS33
 2229 088f 04        		.uleb128 0x4
 2230 0890 0000 0000 		.long	.LLRL31
 2231 0894 01        		.uleb128 0x1
 2232 0895 0000 0496 		.long	0x496
 2233 0899 0000 0000 		.long	.LLST34
 2234 089d 0000 0000 		.long	.LVUS34
 2235 08a1 0A        		.uleb128 0xa
 2236 08a2 0000 04A1 		.long	0x4a1
 2237 08a6 0000 0000 		.long	.LBB70
 2238 08aa 0000 0032 		.long	.LBE70-.LBB70
 2239 08ae 01        		.uleb128 0x1
 2240 08af 0000 04A2 		.long	0x4a2
 2241 08b3 0000 0000 		.long	.LLST35
 2242 08b7 0000 0000 		.long	.LVUS35
 2243 08bb 00        		.byte	0
 2244 08bc 00        		.byte	0
 2245 08bd 00        		.byte	0
 2246 08be 00        		.byte	0
 2247 08bf 00        		.byte	0
 2248               		.section	.debug_abbrev,"",@progbits
 2249               	.Ldebug_abbrev0:
 2250 0000 01        		.uleb128 0x1
 2251 0001 34        		.uleb128 0x34
 2252 0002 00        		.byte	0
 2253 0003 31        		.uleb128 0x31
 2254 0004 13        		.uleb128 0x13
 2255 0005 02        		.uleb128 0x2
 2256 0006 17        		.uleb128 0x17
 2257 0007 B742      		.uleb128 0x2137
 2258 0009 17        		.uleb128 0x17
 2259 000a 00        		.byte	0
 2260 000b 00        		.byte	0
 2261 000c 02        		.uleb128 0x2
 2262 000d 05        		.uleb128 0x5
 2263 000e 00        		.byte	0
 2264 000f 31        		.uleb128 0x31
 2265 0010 13        		.uleb128 0x13
 2266 0011 02        		.uleb128 0x2
 2267 0012 17        		.uleb128 0x17
 2268 0013 B742      		.uleb128 0x2137
 2269 0015 17        		.uleb128 0x17
 2270 0016 00        		.byte	0
 2271 0017 00        		.byte	0
 2272 0018 03        		.uleb128 0x3
 2273 0019 24        		.uleb128 0x24
 2274 001a 00        		.byte	0
 2275 001b 0B        		.uleb128 0xb
 2276 001c 0B        		.uleb128 0xb


 2277 001d 3E        		.uleb128 0x3e
 2278 001e 0B        		.uleb128 0xb
 2279 001f 03        		.uleb128 0x3
 2280 0020 0E        		.uleb128 0xe
 2281 0021 00        		.byte	0
 2282 0022 00        		.byte	0
 2283 0023 04        		.uleb128 0x4
 2284 0024 0B        		.uleb128 0xb
 2285 0025 01        		.byte	0x1
 2286 0026 55        		.uleb128 0x55
 2287 0027 17        		.uleb128 0x17
 2288 0028 00        		.byte	0
 2289 0029 00        		.byte	0
 2290 002a 05        		.uleb128 0x5
 2291 002b 0D        		.uleb128 0xd
 2292 002c 00        		.byte	0
 2293 002d 03        		.uleb128 0x3
 2294 002e 0E        		.uleb128 0xe
 2295 002f 3A        		.uleb128 0x3a
 2296 0030 21        		.uleb128 0x21
 2297 0031 02        		.sleb128 2
 2298 0032 3B        		.uleb128 0x3b
 2299 0033 0B        		.uleb128 0xb
 2300 0034 39        		.uleb128 0x39
 2301 0035 0B        		.uleb128 0xb
 2302 0036 49        		.uleb128 0x49
 2303 0037 13        		.uleb128 0x13
 2304 0038 38        		.uleb128 0x38
 2305 0039 0B        		.uleb128 0xb
 2306 003a 00        		.byte	0
 2307 003b 00        		.byte	0
 2308 003c 06        		.uleb128 0x6
 2309 003d 34        		.uleb128 0x34
 2310 003e 00        		.byte	0
 2311 003f 03        		.uleb128 0x3
 2312 0040 0E        		.uleb128 0xe
 2313 0041 3A        		.uleb128 0x3a
 2314 0042 21        		.uleb128 0x21
 2315 0043 02        		.sleb128 2
 2316 0044 3B        		.uleb128 0x3b
 2317 0045 0B        		.uleb128 0xb
 2318 0046 39        		.uleb128 0x39
 2319 0047 0B        		.uleb128 0xb
 2320 0048 49        		.uleb128 0x49
 2321 0049 13        		.uleb128 0x13
 2322 004a 3F        		.uleb128 0x3f
 2323 004b 19        		.uleb128 0x19
 2324 004c 3C        		.uleb128 0x3c
 2325 004d 19        		.uleb128 0x19
 2326 004e 00        		.byte	0
 2327 004f 00        		.byte	0
 2328 0050 07        		.uleb128 0x7
 2329 0051 34        		.uleb128 0x34
 2330 0052 00        		.byte	0
 2331 0053 47        		.uleb128 0x47
 2332 0054 13        		.uleb128 0x13
 2333 0055 3A        		.uleb128 0x3a


 2334 0056 21        		.uleb128 0x21
 2335 0057 01        		.sleb128 1
 2336 0058 3B        		.uleb128 0x3b
 2337 0059 0B        		.uleb128 0xb
 2338 005a 39        		.uleb128 0x39
 2339 005b 0B        		.uleb128 0xb
 2340 005c 02        		.uleb128 0x2
 2341 005d 18        		.uleb128 0x18
 2342 005e 00        		.byte	0
 2343 005f 00        		.byte	0
 2344 0060 08        		.uleb128 0x8
 2345 0061 1D        		.uleb128 0x1d
 2346 0062 01        		.byte	0x1
 2347 0063 31        		.uleb128 0x31
 2348 0064 13        		.uleb128 0x13
 2349 0065 52        		.uleb128 0x52
 2350 0066 01        		.uleb128 0x1
 2351 0067 B842      		.uleb128 0x2138
 2352 0069 0B        		.uleb128 0xb
 2353 006a 55        		.uleb128 0x55
 2354 006b 17        		.uleb128 0x17
 2355 006c 58        		.uleb128 0x58
 2356 006d 21        		.uleb128 0x21
 2357 006e 01        		.sleb128 1
 2358 006f 59        		.uleb128 0x59
 2359 0070 0B        		.uleb128 0xb
 2360 0071 57        		.uleb128 0x57
 2361 0072 0B        		.uleb128 0xb
 2362 0073 00        		.byte	0
 2363 0074 00        		.byte	0
 2364 0075 09        		.uleb128 0x9
 2365 0076 05        		.uleb128 0x5
 2366 0077 00        		.byte	0
 2367 0078 31        		.uleb128 0x31
 2368 0079 13        		.uleb128 0x13
 2369 007a 02        		.uleb128 0x2
 2370 007b 18        		.uleb128 0x18
 2371 007c 00        		.byte	0
 2372 007d 00        		.byte	0
 2373 007e 0A        		.uleb128 0xa
 2374 007f 0B        		.uleb128 0xb
 2375 0080 01        		.byte	0x1
 2376 0081 31        		.uleb128 0x31
 2377 0082 13        		.uleb128 0x13
 2378 0083 11        		.uleb128 0x11
 2379 0084 01        		.uleb128 0x1
 2380 0085 12        		.uleb128 0x12
 2381 0086 06        		.uleb128 0x6
 2382 0087 00        		.byte	0
 2383 0088 00        		.byte	0
 2384 0089 0B        		.uleb128 0xb
 2385 008a 18        		.uleb128 0x18
 2386 008b 00        		.byte	0
 2387 008c 00        		.byte	0
 2388 008d 00        		.byte	0
 2389 008e 0C        		.uleb128 0xc
 2390 008f 1D        		.uleb128 0x1d


 2391 0090 01        		.byte	0x1
 2392 0091 31        		.uleb128 0x31
 2393 0092 13        		.uleb128 0x13
 2394 0093 52        		.uleb128 0x52
 2395 0094 01        		.uleb128 0x1
 2396 0095 B842      		.uleb128 0x2138
 2397 0097 0B        		.uleb128 0xb
 2398 0098 55        		.uleb128 0x55
 2399 0099 17        		.uleb128 0x17
 2400 009a 58        		.uleb128 0x58
 2401 009b 21        		.uleb128 0x21
 2402 009c 01        		.sleb128 1
 2403 009d 59        		.uleb128 0x59
 2404 009e 0B        		.uleb128 0xb
 2405 009f 57        		.uleb128 0x57
 2406 00a0 21        		.uleb128 0x21
 2407 00a1 05        		.sleb128 5
 2408 00a2 01        		.uleb128 0x1
 2409 00a3 13        		.uleb128 0x13
 2410 00a4 00        		.byte	0
 2411 00a5 00        		.byte	0
 2412 00a6 0D        		.uleb128 0xd
 2413 00a7 34        		.uleb128 0x34
 2414 00a8 00        		.byte	0
 2415 00a9 03        		.uleb128 0x3
 2416 00aa 0E        		.uleb128 0xe
 2417 00ab 3A        		.uleb128 0x3a
 2418 00ac 21        		.uleb128 0x21
 2419 00ad 01        		.sleb128 1
 2420 00ae 3B        		.uleb128 0x3b
 2421 00af 0B        		.uleb128 0xb
 2422 00b0 39        		.uleb128 0x39
 2423 00b1 0B        		.uleb128 0xb
 2424 00b2 49        		.uleb128 0x49
 2425 00b3 13        		.uleb128 0x13
 2426 00b4 00        		.byte	0
 2427 00b5 00        		.byte	0
 2428 00b6 0E        		.uleb128 0xe
 2429 00b7 2E        		.uleb128 0x2e
 2430 00b8 01        		.byte	0x1
 2431 00b9 31        		.uleb128 0x31
 2432 00ba 13        		.uleb128 0x13
 2433 00bb 11        		.uleb128 0x11
 2434 00bc 01        		.uleb128 0x1
 2435 00bd 12        		.uleb128 0x12
 2436 00be 06        		.uleb128 0x6
 2437 00bf 40        		.uleb128 0x40
 2438 00c0 18        		.uleb128 0x18
 2439 00c1 7A        		.uleb128 0x7a
 2440 00c2 19        		.uleb128 0x19
 2441 00c3 01        		.uleb128 0x1
 2442 00c4 13        		.uleb128 0x13
 2443 00c5 00        		.byte	0
 2444 00c6 00        		.byte	0
 2445 00c7 0F        		.uleb128 0xf
 2446 00c8 16        		.uleb128 0x16
 2447 00c9 00        		.byte	0


 2448 00ca 03        		.uleb128 0x3
 2449 00cb 0E        		.uleb128 0xe
 2450 00cc 3A        		.uleb128 0x3a
 2451 00cd 21        		.uleb128 0x21
 2452 00ce 02        		.sleb128 2
 2453 00cf 3B        		.uleb128 0x3b
 2454 00d0 0B        		.uleb128 0xb
 2455 00d1 39        		.uleb128 0x39
 2456 00d2 0B        		.uleb128 0xb
 2457 00d3 49        		.uleb128 0x49
 2458 00d4 13        		.uleb128 0x13
 2459 00d5 00        		.byte	0
 2460 00d6 00        		.byte	0
 2461 00d7 10        		.uleb128 0x10
 2462 00d8 0F        		.uleb128 0xf
 2463 00d9 00        		.byte	0
 2464 00da 0B        		.uleb128 0xb
 2465 00db 21        		.uleb128 0x21
 2466 00dc 04        		.sleb128 4
 2467 00dd 49        		.uleb128 0x49
 2468 00de 13        		.uleb128 0x13
 2469 00df 00        		.byte	0
 2470 00e0 00        		.byte	0
 2471 00e1 11        		.uleb128 0x11
 2472 00e2 01        		.uleb128 0x1
 2473 00e3 01        		.byte	0x1
 2474 00e4 49        		.uleb128 0x49
 2475 00e5 13        		.uleb128 0x13
 2476 00e6 01        		.uleb128 0x1
 2477 00e7 13        		.uleb128 0x13
 2478 00e8 00        		.byte	0
 2479 00e9 00        		.byte	0
 2480 00ea 12        		.uleb128 0x12
 2481 00eb 2E        		.uleb128 0x2e
 2482 00ec 01        		.byte	0x1
 2483 00ed 3F        		.uleb128 0x3f
 2484 00ee 19        		.uleb128 0x19
 2485 00ef 03        		.uleb128 0x3
 2486 00f0 0E        		.uleb128 0xe
 2487 00f1 3A        		.uleb128 0x3a
 2488 00f2 21        		.uleb128 0x21
 2489 00f3 02        		.sleb128 2
 2490 00f4 3B        		.uleb128 0x3b
 2491 00f5 0B        		.uleb128 0xb
 2492 00f6 39        		.uleb128 0x39
 2493 00f7 21        		.uleb128 0x21
 2494 00f8 0D        		.sleb128 13
 2495 00f9 3C        		.uleb128 0x3c
 2496 00fa 19        		.uleb128 0x19
 2497 00fb 01        		.uleb128 0x1
 2498 00fc 13        		.uleb128 0x13
 2499 00fd 00        		.byte	0
 2500 00fe 00        		.byte	0
 2501 00ff 13        		.uleb128 0x13
 2502 0100 05        		.uleb128 0x5
 2503 0101 00        		.byte	0
 2504 0102 03        		.uleb128 0x3


 2505 0103 0E        		.uleb128 0xe
 2506 0104 3A        		.uleb128 0x3a
 2507 0105 21        		.uleb128 0x21
 2508 0106 01        		.sleb128 1
 2509 0107 3B        		.uleb128 0x3b
 2510 0108 0B        		.uleb128 0xb
 2511 0109 39        		.uleb128 0x39
 2512 010a 0B        		.uleb128 0xb
 2513 010b 49        		.uleb128 0x49
 2514 010c 13        		.uleb128 0x13
 2515 010d 00        		.byte	0
 2516 010e 00        		.byte	0
 2517 010f 14        		.uleb128 0x14
 2518 0110 21        		.uleb128 0x21
 2519 0111 00        		.byte	0
 2520 0112 49        		.uleb128 0x49
 2521 0113 13        		.uleb128 0x13
 2522 0114 2F        		.uleb128 0x2f
 2523 0115 0B        		.uleb128 0xb
 2524 0116 00        		.byte	0
 2525 0117 00        		.byte	0
 2526 0118 15        		.uleb128 0x15
 2527 0119 2E        		.uleb128 0x2e
 2528 011a 01        		.byte	0x1
 2529 011b 3F        		.uleb128 0x3f
 2530 011c 19        		.uleb128 0x19
 2531 011d 03        		.uleb128 0x3
 2532 011e 0E        		.uleb128 0xe
 2533 011f 3A        		.uleb128 0x3a
 2534 0120 21        		.uleb128 0x21
 2535 0121 01        		.sleb128 1
 2536 0122 3B        		.uleb128 0x3b
 2537 0123 0B        		.uleb128 0xb
 2538 0124 39        		.uleb128 0x39
 2539 0125 21        		.uleb128 0x21
 2540 0126 06        		.sleb128 6
 2541 0127 27        		.uleb128 0x27
 2542 0128 19        		.uleb128 0x19
 2543 0129 11        		.uleb128 0x11
 2544 012a 01        		.uleb128 0x1
 2545 012b 12        		.uleb128 0x12
 2546 012c 06        		.uleb128 0x6
 2547 012d 40        		.uleb128 0x40
 2548 012e 18        		.uleb128 0x18
 2549 012f 7A        		.uleb128 0x7a
 2550 0130 19        		.uleb128 0x19
 2551 0131 01        		.uleb128 0x1
 2552 0132 13        		.uleb128 0x13
 2553 0133 00        		.byte	0
 2554 0134 00        		.byte	0
 2555 0135 16        		.uleb128 0x16
 2556 0136 48        		.uleb128 0x48
 2557 0137 00        		.byte	0
 2558 0138 7D        		.uleb128 0x7d
 2559 0139 01        		.uleb128 0x1
 2560 013a 8201      		.uleb128 0x82
 2561 013c 19        		.uleb128 0x19


 2562 013d 7F        		.uleb128 0x7f
 2563 013e 13        		.uleb128 0x13
 2564 013f 00        		.byte	0
 2565 0140 00        		.byte	0
 2566 0141 17        		.uleb128 0x17
 2567 0142 2E        		.uleb128 0x2e
 2568 0143 01        		.byte	0x1
 2569 0144 3F        		.uleb128 0x3f
 2570 0145 19        		.uleb128 0x19
 2571 0146 03        		.uleb128 0x3
 2572 0147 0E        		.uleb128 0xe
 2573 0148 3A        		.uleb128 0x3a
 2574 0149 21        		.uleb128 0x21
 2575 014a 01        		.sleb128 1
 2576 014b 3B        		.uleb128 0x3b
 2577 014c 0B        		.uleb128 0xb
 2578 014d 39        		.uleb128 0x39
 2579 014e 21        		.uleb128 0x21
 2580 014f 06        		.sleb128 6
 2581 0150 27        		.uleb128 0x27
 2582 0151 19        		.uleb128 0x19
 2583 0152 20        		.uleb128 0x20
 2584 0153 21        		.uleb128 0x21
 2585 0154 01        		.sleb128 1
 2586 0155 01        		.uleb128 0x1
 2587 0156 13        		.uleb128 0x13
 2588 0157 00        		.byte	0
 2589 0158 00        		.byte	0
 2590 0159 18        		.uleb128 0x18
 2591 015a 1D        		.uleb128 0x1d
 2592 015b 01        		.byte	0x1
 2593 015c 31        		.uleb128 0x31
 2594 015d 13        		.uleb128 0x13
 2595 015e 52        		.uleb128 0x52
 2596 015f 01        		.uleb128 0x1
 2597 0160 B842      		.uleb128 0x2138
 2598 0162 0B        		.uleb128 0xb
 2599 0163 11        		.uleb128 0x11
 2600 0164 01        		.uleb128 0x1
 2601 0165 12        		.uleb128 0x12
 2602 0166 06        		.uleb128 0x6
 2603 0167 58        		.uleb128 0x58
 2604 0168 21        		.uleb128 0x21
 2605 0169 01        		.sleb128 1
 2606 016a 59        		.uleb128 0x59
 2607 016b 0B        		.uleb128 0xb
 2608 016c 57        		.uleb128 0x57
 2609 016d 0B        		.uleb128 0xb
 2610 016e 01        		.uleb128 0x1
 2611 016f 13        		.uleb128 0x13
 2612 0170 00        		.byte	0
 2613 0171 00        		.byte	0
 2614 0172 19        		.uleb128 0x19
 2615 0173 34        		.uleb128 0x34
 2616 0174 00        		.byte	0
 2617 0175 03        		.uleb128 0x3
 2618 0176 08        		.uleb128 0x8


 2619 0177 3A        		.uleb128 0x3a
 2620 0178 21        		.uleb128 0x21
 2621 0179 01        		.sleb128 1
 2622 017a 3B        		.uleb128 0x3b
 2623 017b 0B        		.uleb128 0xb
 2624 017c 39        		.uleb128 0x39
 2625 017d 0B        		.uleb128 0xb
 2626 017e 49        		.uleb128 0x49
 2627 017f 13        		.uleb128 0x13
 2628 0180 02        		.uleb128 0x2
 2629 0181 17        		.uleb128 0x17
 2630 0182 B742      		.uleb128 0x2137
 2631 0184 17        		.uleb128 0x17
 2632 0185 00        		.byte	0
 2633 0186 00        		.byte	0
 2634 0187 1A        		.uleb128 0x1a
 2635 0188 13        		.uleb128 0x13
 2636 0189 01        		.byte	0x1
 2637 018a 0B        		.uleb128 0xb
 2638 018b 0B        		.uleb128 0xb
 2639 018c 3A        		.uleb128 0x3a
 2640 018d 21        		.uleb128 0x21
 2641 018e 02        		.sleb128 2
 2642 018f 3B        		.uleb128 0x3b
 2643 0190 0B        		.uleb128 0xb
 2644 0191 39        		.uleb128 0x39
 2645 0192 21        		.uleb128 0x21
 2646 0193 09        		.sleb128 9
 2647 0194 01        		.uleb128 0x1
 2648 0195 13        		.uleb128 0x13
 2649 0196 00        		.byte	0
 2650 0197 00        		.byte	0
 2651 0198 1B        		.uleb128 0x1b
 2652 0199 05        		.uleb128 0x5
 2653 019a 00        		.byte	0
 2654 019b 03        		.uleb128 0x3
 2655 019c 08        		.uleb128 0x8
 2656 019d 3A        		.uleb128 0x3a
 2657 019e 21        		.uleb128 0x21
 2658 019f 01        		.sleb128 1
 2659 01a0 3B        		.uleb128 0x3b
 2660 01a1 0B        		.uleb128 0xb
 2661 01a2 39        		.uleb128 0x39
 2662 01a3 21        		.uleb128 0x21
 2663 01a4 11        		.sleb128 17
 2664 01a5 49        		.uleb128 0x49
 2665 01a6 13        		.uleb128 0x13
 2666 01a7 02        		.uleb128 0x2
 2667 01a8 18        		.uleb128 0x18
 2668 01a9 00        		.byte	0
 2669 01aa 00        		.byte	0
 2670 01ab 1C        		.uleb128 0x1c
 2671 01ac 05        		.uleb128 0x5
 2672 01ad 00        		.byte	0
 2673 01ae 03        		.uleb128 0x3
 2674 01af 08        		.uleb128 0x8
 2675 01b0 3A        		.uleb128 0x3a


 2676 01b1 21        		.uleb128 0x21
 2677 01b2 01        		.sleb128 1
 2678 01b3 3B        		.uleb128 0x3b
 2679 01b4 0B        		.uleb128 0xb
 2680 01b5 39        		.uleb128 0x39
 2681 01b6 0B        		.uleb128 0xb
 2682 01b7 49        		.uleb128 0x49
 2683 01b8 13        		.uleb128 0x13
 2684 01b9 00        		.byte	0
 2685 01ba 00        		.byte	0
 2686 01bb 1D        		.uleb128 0x1d
 2687 01bc 2E        		.uleb128 0x2e
 2688 01bd 01        		.byte	0x1
 2689 01be 3F        		.uleb128 0x3f
 2690 01bf 19        		.uleb128 0x19
 2691 01c0 03        		.uleb128 0x3
 2692 01c1 0E        		.uleb128 0xe
 2693 01c2 3A        		.uleb128 0x3a
 2694 01c3 21        		.uleb128 0x21
 2695 01c4 01        		.sleb128 1
 2696 01c5 3B        		.uleb128 0x3b
 2697 01c6 0B        		.uleb128 0xb
 2698 01c7 39        		.uleb128 0x39
 2699 01c8 0B        		.uleb128 0xb
 2700 01c9 27        		.uleb128 0x27
 2701 01ca 19        		.uleb128 0x19
 2702 01cb 49        		.uleb128 0x49
 2703 01cc 13        		.uleb128 0x13
 2704 01cd 20        		.uleb128 0x20
 2705 01ce 21        		.uleb128 0x21
 2706 01cf 01        		.sleb128 1
 2707 01d0 01        		.uleb128 0x1
 2708 01d1 13        		.uleb128 0x13
 2709 01d2 00        		.byte	0
 2710 01d3 00        		.byte	0
 2711 01d4 1E        		.uleb128 0x1e
 2712 01d5 2E        		.uleb128 0x2e
 2713 01d6 01        		.byte	0x1
 2714 01d7 3F        		.uleb128 0x3f
 2715 01d8 19        		.uleb128 0x19
 2716 01d9 03        		.uleb128 0x3
 2717 01da 0E        		.uleb128 0xe
 2718 01db 3A        		.uleb128 0x3a
 2719 01dc 21        		.uleb128 0x21
 2720 01dd 01        		.sleb128 1
 2721 01de 3B        		.uleb128 0x3b
 2722 01df 0B        		.uleb128 0xb
 2723 01e0 39        		.uleb128 0x39
 2724 01e1 21        		.uleb128 0x21
 2725 01e2 06        		.sleb128 6
 2726 01e3 11        		.uleb128 0x11
 2727 01e4 01        		.uleb128 0x1
 2728 01e5 12        		.uleb128 0x12
 2729 01e6 06        		.uleb128 0x6
 2730 01e7 40        		.uleb128 0x40
 2731 01e8 18        		.uleb128 0x18
 2732 01e9 7A        		.uleb128 0x7a


 2733 01ea 19        		.uleb128 0x19
 2734 01eb 01        		.uleb128 0x1
 2735 01ec 13        		.uleb128 0x13
 2736 01ed 00        		.byte	0
 2737 01ee 00        		.byte	0
 2738 01ef 1F        		.uleb128 0x1f
 2739 01f0 11        		.uleb128 0x11
 2740 01f1 01        		.byte	0x1
 2741 01f2 25        		.uleb128 0x25
 2742 01f3 0E        		.uleb128 0xe
 2743 01f4 13        		.uleb128 0x13
 2744 01f5 0B        		.uleb128 0xb
 2745 01f6 03        		.uleb128 0x3
 2746 01f7 0E        		.uleb128 0xe
 2747 01f8 1B        		.uleb128 0x1b
 2748 01f9 0E        		.uleb128 0xe
 2749 01fa 11        		.uleb128 0x11
 2750 01fb 01        		.uleb128 0x1
 2751 01fc 12        		.uleb128 0x12
 2752 01fd 06        		.uleb128 0x6
 2753 01fe 10        		.uleb128 0x10
 2754 01ff 17        		.uleb128 0x17
 2755 0200 00        		.byte	0
 2756 0201 00        		.byte	0
 2757 0202 20        		.uleb128 0x20
 2758 0203 24        		.uleb128 0x24
 2759 0204 00        		.byte	0
 2760 0205 0B        		.uleb128 0xb
 2761 0206 0B        		.uleb128 0xb
 2762 0207 3E        		.uleb128 0x3e
 2763 0208 0B        		.uleb128 0xb
 2764 0209 03        		.uleb128 0x3
 2765 020a 08        		.uleb128 0x8
 2766 020b 00        		.byte	0
 2767 020c 00        		.byte	0
 2768 020d 21        		.uleb128 0x21
 2769 020e 0F        		.uleb128 0xf
 2770 020f 00        		.byte	0
 2771 0210 0B        		.uleb128 0xb
 2772 0211 0B        		.uleb128 0xb
 2773 0212 00        		.byte	0
 2774 0213 00        		.byte	0
 2775 0214 22        		.uleb128 0x22
 2776 0215 15        		.uleb128 0x15
 2777 0216 01        		.byte	0x1
 2778 0217 01        		.uleb128 0x1
 2779 0218 13        		.uleb128 0x13
 2780 0219 00        		.byte	0
 2781 021a 00        		.byte	0
 2782 021b 23        		.uleb128 0x23
 2783 021c 0D        		.uleb128 0xd
 2784 021d 00        		.byte	0
 2785 021e 03        		.uleb128 0x3
 2786 021f 08        		.uleb128 0x8
 2787 0220 3A        		.uleb128 0x3a
 2788 0221 0B        		.uleb128 0xb
 2789 0222 3B        		.uleb128 0x3b


 2790 0223 0B        		.uleb128 0xb
 2791 0224 39        		.uleb128 0x39
 2792 0225 0B        		.uleb128 0xb
 2793 0226 49        		.uleb128 0x49
 2794 0227 13        		.uleb128 0x13
 2795 0228 38        		.uleb128 0x38
 2796 0229 0B        		.uleb128 0xb
 2797 022a 00        		.byte	0
 2798 022b 00        		.byte	0
 2799 022c 24        		.uleb128 0x24
 2800 022d 13        		.uleb128 0x13
 2801 022e 01        		.byte	0x1
 2802 022f 0B        		.uleb128 0xb
 2803 0230 05        		.uleb128 0x5
 2804 0231 3A        		.uleb128 0x3a
 2805 0232 0B        		.uleb128 0xb
 2806 0233 3B        		.uleb128 0x3b
 2807 0234 0B        		.uleb128 0xb
 2808 0235 39        		.uleb128 0x39
 2809 0236 0B        		.uleb128 0xb
 2810 0237 01        		.uleb128 0x1
 2811 0238 13        		.uleb128 0x13
 2812 0239 00        		.byte	0
 2813 023a 00        		.byte	0
 2814 023b 25        		.uleb128 0x25
 2815 023c 0D        		.uleb128 0xd
 2816 023d 00        		.byte	0
 2817 023e 03        		.uleb128 0x3
 2818 023f 0E        		.uleb128 0xe
 2819 0240 3A        		.uleb128 0x3a
 2820 0241 0B        		.uleb128 0xb
 2821 0242 3B        		.uleb128 0x3b
 2822 0243 0B        		.uleb128 0xb
 2823 0244 39        		.uleb128 0x39
 2824 0245 0B        		.uleb128 0xb
 2825 0246 49        		.uleb128 0x49
 2826 0247 13        		.uleb128 0x13
 2827 0248 38        		.uleb128 0x38
 2828 0249 05        		.uleb128 0x5
 2829 024a 00        		.byte	0
 2830 024b 00        		.byte	0
 2831 024c 26        		.uleb128 0x26
 2832 024d 21        		.uleb128 0x21
 2833 024e 00        		.byte	0
 2834 024f 49        		.uleb128 0x49
 2835 0250 13        		.uleb128 0x13
 2836 0251 2F        		.uleb128 0x2f
 2837 0252 05        		.uleb128 0x5
 2838 0253 00        		.byte	0
 2839 0254 00        		.byte	0
 2840 0255 27        		.uleb128 0x27
 2841 0256 2E        		.uleb128 0x2e
 2842 0257 00        		.byte	0
 2843 0258 3F        		.uleb128 0x3f
 2844 0259 19        		.uleb128 0x19
 2845 025a 03        		.uleb128 0x3
 2846 025b 0E        		.uleb128 0xe


 2847 025c 3A        		.uleb128 0x3a
 2848 025d 0B        		.uleb128 0xb
 2849 025e 3B        		.uleb128 0x3b
 2850 025f 0B        		.uleb128 0xb
 2851 0260 39        		.uleb128 0x39
 2852 0261 0B        		.uleb128 0xb
 2853 0262 20        		.uleb128 0x20
 2854 0263 0B        		.uleb128 0xb
 2855 0264 00        		.byte	0
 2856 0265 00        		.byte	0
 2857 0266 28        		.uleb128 0x28
 2858 0267 0B        		.uleb128 0xb
 2859 0268 01        		.byte	0x1
 2860 0269 00        		.byte	0
 2861 026a 00        		.byte	0
 2862 026b 29        		.uleb128 0x29
 2863 026c 48        		.uleb128 0x48
 2864 026d 00        		.byte	0
 2865 026e 7D        		.uleb128 0x7d
 2866 026f 01        		.uleb128 0x1
 2867 0270 7F        		.uleb128 0x7f
 2868 0271 13        		.uleb128 0x13
 2869 0272 00        		.byte	0
 2870 0273 00        		.byte	0
 2871 0274 2A        		.uleb128 0x2a
 2872 0275 05        		.uleb128 0x5
 2873 0276 00        		.byte	0
 2874 0277 03        		.uleb128 0x3
 2875 0278 0E        		.uleb128 0xe
 2876 0279 3A        		.uleb128 0x3a
 2877 027a 0B        		.uleb128 0xb
 2878 027b 3B        		.uleb128 0x3b
 2879 027c 0B        		.uleb128 0xb
 2880 027d 39        		.uleb128 0x39
 2881 027e 0B        		.uleb128 0xb
 2882 027f 49        		.uleb128 0x49
 2883 0280 13        		.uleb128 0x13
 2884 0281 02        		.uleb128 0x2
 2885 0282 18        		.uleb128 0x18
 2886 0283 00        		.byte	0
 2887 0284 00        		.byte	0
 2888 0285 2B        		.uleb128 0x2b
 2889 0286 0B        		.uleb128 0xb
 2890 0287 01        		.byte	0x1
 2891 0288 11        		.uleb128 0x11
 2892 0289 01        		.uleb128 0x1
 2893 028a 12        		.uleb128 0x12
 2894 028b 06        		.uleb128 0x6
 2895 028c 01        		.uleb128 0x1
 2896 028d 13        		.uleb128 0x13
 2897 028e 00        		.byte	0
 2898 028f 00        		.byte	0
 2899 0290 2C        		.uleb128 0x2c
 2900 0291 0B        		.uleb128 0xb
 2901 0292 01        		.byte	0x1
 2902 0293 11        		.uleb128 0x11
 2903 0294 01        		.uleb128 0x1


 2904 0295 12        		.uleb128 0x12
 2905 0296 06        		.uleb128 0x6
 2906 0297 00        		.byte	0
 2907 0298 00        		.byte	0
 2908 0299 2D        		.uleb128 0x2d
 2909 029a 1D        		.uleb128 0x1d
 2910 029b 01        		.byte	0x1
 2911 029c 31        		.uleb128 0x31
 2912 029d 13        		.uleb128 0x13
 2913 029e 52        		.uleb128 0x52
 2914 029f 01        		.uleb128 0x1
 2915 02a0 B842      		.uleb128 0x2138
 2916 02a2 0B        		.uleb128 0xb
 2917 02a3 11        		.uleb128 0x11
 2918 02a4 01        		.uleb128 0x1
 2919 02a5 12        		.uleb128 0x12
 2920 02a6 06        		.uleb128 0x6
 2921 02a7 58        		.uleb128 0x58
 2922 02a8 0B        		.uleb128 0xb
 2923 02a9 59        		.uleb128 0x59
 2924 02aa 0B        		.uleb128 0xb
 2925 02ab 57        		.uleb128 0x57
 2926 02ac 0B        		.uleb128 0xb
 2927 02ad 00        		.byte	0
 2928 02ae 00        		.byte	0
 2929 02af 2E        		.uleb128 0x2e
 2930 02b0 2E        		.uleb128 0x2e
 2931 02b1 01        		.byte	0x1
 2932 02b2 31        		.uleb128 0x31
 2933 02b3 13        		.uleb128 0x13
 2934 02b4 11        		.uleb128 0x11
 2935 02b5 01        		.uleb128 0x1
 2936 02b6 12        		.uleb128 0x12
 2937 02b7 06        		.uleb128 0x6
 2938 02b8 40        		.uleb128 0x40
 2939 02b9 18        		.uleb128 0x18
 2940 02ba 7A        		.uleb128 0x7a
 2941 02bb 19        		.uleb128 0x19
 2942 02bc 00        		.byte	0
 2943 02bd 00        		.byte	0
 2944 02be 00        		.byte	0
 2945               		.section	.debug_loclists,"",@progbits
 2946 0000 0000 071F 		.long	.Ldebug_loc3-.Ldebug_loc2
 2947               	.Ldebug_loc2:
 2948 0004 0005      		.word	0x5
 2949 0006 04        		.byte	0x4
 2950 0007 00        		.byte	0
 2951 0008 0000 0000 		.long	0
 2952               	.Ldebug_loc0:
 2953               	.LVUS48:
 2954 000c 01        		.uleb128 .LVU374
 2955 000d 00        		.uleb128 .LVU408
 2956 000e 00        		.uleb128 .LVU410
 2957 000f 00        		.uleb128 0
 2958               	.LLST48:
 2959 0010 04        		.byte	0x4
 2960 0011 8208      		.uleb128 .LVL119-.Ltext0


 2961 0013 D808      		.uleb128 .LVL134-.Ltext0
 2962 0015 02        		.uleb128 0x2
 2963 0016 91        		.byte	0x91
 2964 0017 70        		.sleb128 -16
 2965 0018 04        		.byte	0x4
 2966 0019 DC08      		.uleb128 .LVL135-.Ltext0
 2967 001b FC08      		.uleb128 .LFE13-.Ltext0
 2968 001d 02        		.uleb128 0x2
 2969 001e 91        		.byte	0x91
 2970 001f 70        		.sleb128 -16
 2971 0020 00        		.byte	0
 2972               	.LVUS50:
 2973 0021 03        		.uleb128 .LVU376
 2974 0022 00        		.uleb128 .LVU381
 2975 0023 00        		.uleb128 .LVU410
 2976 0024 01        		.uleb128 .LVU414
 2977               	.LLST50:
 2978 0025 04        		.byte	0x4
 2979 0026 8208      		.uleb128 .LVL119-.Ltext0
 2980 0028 8E08      		.uleb128 .LVL121-.Ltext0
 2981 002a 0C        		.uleb128 0xc
 2982 002b 91        		.byte	0x91
 2983 002c 70        		.sleb128 -16
 2984 002d 06        		.byte	0x6
 2985 002e 3C        		.byte	0x3c
 2986 002f 1E        		.byte	0x1e
 2987 0030 03        		.byte	0x3
 2988 0031 0000 0000 		.long	semaphore+8
 2989 0035 22        		.byte	0x22
 2990 0036 9F        		.byte	0x9f
 2991 0037 04        		.byte	0x4
 2992 0038 DC08      		.uleb128 .LVL135-.Ltext0
 2993 003a F208      		.uleb128 .LVL136-.Ltext0
 2994 003c 0C        		.uleb128 0xc
 2995 003d 91        		.byte	0x91
 2996 003e 70        		.sleb128 -16
 2997 003f 06        		.byte	0x6
 2998 0040 3C        		.byte	0x3c
 2999 0041 1E        		.byte	0x1e
 3000 0042 03        		.byte	0x3
 3001 0043 0000 0000 		.long	semaphore+8
 3002 0047 22        		.byte	0x22
 3003 0048 9F        		.byte	0x9f
 3004 0049 00        		.byte	0
 3005               	.LVUS51:
 3006 004a 00        		.uleb128 .LVU379
 3007 004b 00        		.uleb128 .LVU381
 3008 004c 00        		.uleb128 .LVU410
 3009 004d 01        		.uleb128 .LVU414
 3010               	.LLST51:
 3011 004e 04        		.byte	0x4
 3012 004f 8808      		.uleb128 .LVL120-.Ltext0
 3013 0051 8E08      		.uleb128 .LVL121-.Ltext0
 3014 0053 01        		.uleb128 0x1
 3015 0054 59        		.byte	0x59
 3016 0055 04        		.byte	0x4
 3017 0056 DC08      		.uleb128 .LVL135-.Ltext0


 3018 0058 F208      		.uleb128 .LVL136-.Ltext0
 3019 005a 01        		.uleb128 0x1
 3020 005b 59        		.byte	0x59
 3021 005c 00        		.byte	0
 3022               	.LVUS53:
 3023 005d 00        		.uleb128 .LVU381
 3024 005e 00        		.uleb128 .LVU408
 3025 005f 01        		.uleb128 .LVU414
 3026 0060 00        		.uleb128 0
 3027               	.LLST53:
 3028 0061 04        		.byte	0x4
 3029 0062 8E08      		.uleb128 .LVL121-.Ltext0
 3030 0064 D808      		.uleb128 .LVL134-.Ltext0
 3031 0066 01        		.uleb128 0x1
 3032 0067 59        		.byte	0x59
 3033 0068 04        		.byte	0x4
 3034 0069 F208      		.uleb128 .LVL136-.Ltext0
 3035 006b FC08      		.uleb128 .LFE13-.Ltext0
 3036 006d 01        		.uleb128 0x1
 3037 006e 59        		.byte	0x59
 3038 006f 00        		.byte	0
 3039               	.LVUS54:
 3040 0070 00        		.uleb128 .LVU381
 3041 0071 00        		.uleb128 .LVU408
 3042 0072 01        		.uleb128 .LVU414
 3043 0073 00        		.uleb128 0
 3044               	.LLST54:
 3045 0074 04        		.byte	0x4
 3046 0075 8E08      		.uleb128 .LVL121-.Ltext0
 3047 0077 D808      		.uleb128 .LVL134-.Ltext0
 3048 0079 06        		.uleb128 0x6
 3049 007a 03        		.byte	0x3
 3050 007b 0000 0000 		.long	ready
 3051 007f 9F        		.byte	0x9f
 3052 0080 04        		.byte	0x4
 3053 0081 F208      		.uleb128 .LVL136-.Ltext0
 3054 0083 FC08      		.uleb128 .LFE13-.Ltext0
 3055 0085 06        		.uleb128 0x6
 3056 0086 03        		.byte	0x3
 3057 0087 0000 0000 		.long	ready
 3058 008b 9F        		.byte	0x9f
 3059 008c 00        		.byte	0
 3060               	.LVUS55:
 3061 008d 00        		.uleb128 .LVU385
 3062 008e 00        		.uleb128 .LVU391
 3063 008f 00        		.uleb128 .LVU391
 3064 0090 00        		.uleb128 .LVU406
 3065 0091 00        		.uleb128 .LVU406
 3066 0092 00        		.uleb128 .LVU408
 3067 0093 00        		.uleb128 .LVU418
 3068 0094 00        		.uleb128 0
 3069               	.LLST55:
 3070 0095 04        		.byte	0x4
 3071 0096 9408      		.uleb128 .LVL122-.Ltext0
 3072 0098 A008      		.uleb128 .LVL124-.Ltext0
 3073 009a 01        		.uleb128 0x1
 3074 009b 50        		.byte	0x50


 3075 009c 04        		.byte	0x4
 3076 009d A008      		.uleb128 .LVL124-.Ltext0
 3077 009f D208      		.uleb128 .LVL133-.Ltext0
 3078 00a1 01        		.uleb128 0x1
 3079 00a2 51        		.byte	0x51
 3080 00a3 04        		.byte	0x4
 3081 00a4 D208      		.uleb128 .LVL133-.Ltext0
 3082 00a6 D808      		.uleb128 .LVL134-.Ltext0
 3083 00a8 01        		.uleb128 0x1
 3084 00a9 50        		.byte	0x50
 3085 00aa 04        		.byte	0x4
 3086 00ab F808      		.uleb128 .LVL137-.Ltext0
 3087 00ad FC08      		.uleb128 .LFE13-.Ltext0
 3088 00af 01        		.uleb128 0x1
 3089 00b0 50        		.byte	0x50
 3090 00b1 00        		.byte	0
 3091               	.LVUS56:
 3092 00b2 00        		.uleb128 .LVU392
 3093 00b3 00        		.uleb128 .LVU396
 3094 00b4 00        		.uleb128 .LVU396
 3095 00b5 00        		.uleb128 .LVU397
 3096 00b6 00        		.uleb128 .LVU397
 3097 00b7 00        		.uleb128 .LVU398
 3098 00b8 00        		.uleb128 .LVU398
 3099 00b9 00        		.uleb128 .LVU399
 3100 00ba 00        		.uleb128 .LVU399
 3101 00bb 00        		.uleb128 .LVU400
 3102 00bc 00        		.uleb128 .LVU400
 3103 00bd 00        		.uleb128 .LVU401
 3104 00be 00        		.uleb128 .LVU401
 3105 00bf 00        		.uleb128 .LVU402
 3106               	.LLST56:
 3107 00c0 04        		.byte	0x4
 3108 00c1 AC08      		.uleb128 .LVL125-.Ltext0
 3109 00c3 B008      		.uleb128 .LVL126-.Ltext0
 3110 00c5 01        		.uleb128 0x1
 3111 00c6 50        		.byte	0x50
 3112 00c7 04        		.byte	0x4
 3113 00c8 B008      		.uleb128 .LVL126-.Ltext0
 3114 00ca B208      		.uleb128 .LVL127-.Ltext0
 3115 00cc 11        		.uleb128 0x11
 3116 00cd 71        		.byte	0x71
 3117 00ce 00        		.sleb128 0
 3118 00cf 71        		.byte	0x71
 3119 00d0 00        		.sleb128 0
 3120 00d1 22        		.byte	0x22
 3121 00d2 31        		.byte	0x31
 3122 00d3 24        		.byte	0x24
 3123 00d4 71        		.byte	0x71
 3124 00d5 00        		.sleb128 0
 3125 00d6 22        		.byte	0x22
 3126 00d7 32        		.byte	0x32
 3127 00d8 24        		.byte	0x24
 3128 00d9 78        		.byte	0x78
 3129 00da 00        		.sleb128 0
 3130 00db 22        		.byte	0x22
 3131 00dc 23        		.byte	0x23


 3132 00dd 10        		.uleb128 0x10
 3133 00de 04        		.byte	0x4
 3134 00df B208      		.uleb128 .LVL127-.Ltext0
 3135 00e1 B408      		.uleb128 .LVL128-.Ltext0
 3136 00e3 0F        		.uleb128 0xf
 3137 00e4 70        		.byte	0x70
 3138 00e5 00        		.sleb128 0
 3139 00e6 70        		.byte	0x70
 3140 00e7 00        		.sleb128 0
 3141 00e8 22        		.byte	0x22
 3142 00e9 71        		.byte	0x71
 3143 00ea 00        		.sleb128 0
 3144 00eb 22        		.byte	0x22
 3145 00ec 32        		.byte	0x32
 3146 00ed 24        		.byte	0x24
 3147 00ee 78        		.byte	0x78
 3148 00ef 00        		.sleb128 0
 3149 00f0 22        		.byte	0x22
 3150 00f1 23        		.byte	0x23
 3151 00f2 10        		.uleb128 0x10
 3152 00f3 04        		.byte	0x4
 3153 00f4 B408      		.uleb128 .LVL128-.Ltext0
 3154 00f6 B608      		.uleb128 .LVL129-.Ltext0
 3155 00f8 0C        		.uleb128 0xc
 3156 00f9 70        		.byte	0x70
 3157 00fa 00        		.sleb128 0
 3158 00fb 71        		.byte	0x71
 3159 00fc 00        		.sleb128 0
 3160 00fd 22        		.byte	0x22
 3161 00fe 32        		.byte	0x32
 3162 00ff 24        		.byte	0x24
 3163 0100 78        		.byte	0x78
 3164 0101 00        		.sleb128 0
 3165 0102 22        		.byte	0x22
 3166 0103 23        		.byte	0x23
 3167 0104 10        		.uleb128 0x10
 3168 0105 04        		.byte	0x4
 3169 0106 B608      		.uleb128 .LVL129-.Ltext0
 3170 0108 B808      		.uleb128 .LVL130-.Ltext0
 3171 010a 0C        		.uleb128 0xc
 3172 010b 70        		.byte	0x70
 3173 010c 00        		.sleb128 0
 3174 010d 70        		.byte	0x70
 3175 010e 00        		.sleb128 0
 3176 010f 22        		.byte	0x22
 3177 0110 31        		.byte	0x31
 3178 0111 24        		.byte	0x24
 3179 0112 78        		.byte	0x78
 3180 0113 00        		.sleb128 0
 3181 0114 22        		.byte	0x22
 3182 0115 23        		.byte	0x23
 3183 0116 10        		.uleb128 0x10
 3184 0117 04        		.byte	0x4
 3185 0118 B808      		.uleb128 .LVL130-.Ltext0
 3186 011a BA08      		.uleb128 .LVL131-.Ltext0
 3187 011c 0A        		.uleb128 0xa
 3188 011d 78        		.byte	0x78


 3189 011e 00        		.sleb128 0
 3190 011f 70        		.byte	0x70
 3191 0120 00        		.sleb128 0
 3192 0121 22        		.byte	0x22
 3193 0122 70        		.byte	0x70
 3194 0123 00        		.sleb128 0
 3195 0124 22        		.byte	0x22
 3196 0125 23        		.byte	0x23
 3197 0126 10        		.uleb128 0x10
 3198 0127 04        		.byte	0x4
 3199 0128 BA08      		.uleb128 .LVL131-.Ltext0
 3200 012a BE08      		.uleb128 .LVL132-.Ltext0
 3201 012c 07        		.uleb128 0x7
 3202 012d 78        		.byte	0x78
 3203 012e 00        		.sleb128 0
 3204 012f 70        		.byte	0x70
 3205 0130 00        		.sleb128 0
 3206 0131 22        		.byte	0x22
 3207 0132 23        		.byte	0x23
 3208 0133 10        		.uleb128 0x10
 3209 0134 00        		.byte	0
 3210               	.LVUS37:
 3211 0135 01        		.uleb128 .LVU305
 3212 0136 00        		.uleb128 0
 3213               	.LLST37:
 3214 0137 04        		.byte	0x4
 3215 0138 DC06      		.uleb128 .LVL98-.Ltext0
 3216 013a DC07      		.uleb128 .LFE12-.Ltext0
 3217 013c 02        		.uleb128 0x2
 3218 013d 91        		.byte	0x91
 3219 013e 70        		.sleb128 -16
 3220 013f 00        		.byte	0
 3221               	.LVUS39:
 3222 0140 00        		.uleb128 .LVU307
 3223 0141 01        		.uleb128 .LVU329
 3224 0142 00        		.uleb128 .LVU343
 3225 0143 00        		.uleb128 .LVU346
 3226               	.LLST39:
 3227 0144 04        		.byte	0x4
 3228 0145 E206      		.uleb128 .LVL99-.Ltext0
 3229 0147 A207      		.uleb128 .LVL111-.Ltext0
 3230 0149 01        		.uleb128 0x1
 3231 014a 59        		.byte	0x59
 3232 014b 04        		.byte	0x4
 3233 014c AC07      		.uleb128 .LVL113-.Ltext0
 3234 014e B407      		.uleb128 .LVL114-.Ltext0
 3235 0150 01        		.uleb128 0x1
 3236 0151 59        		.byte	0x59
 3237 0152 00        		.byte	0
 3238               	.LVUS40:
 3239 0153 00        		.uleb128 .LVU307
 3240 0154 01        		.uleb128 .LVU329
 3241 0155 00        		.uleb128 .LVU343
 3242 0156 00        		.uleb128 .LVU346
 3243               	.LLST40:
 3244 0157 04        		.byte	0x4
 3245 0158 E206      		.uleb128 .LVL99-.Ltext0


 3246 015a A207      		.uleb128 .LVL111-.Ltext0
 3247 015c 0C        		.uleb128 0xc
 3248 015d 91        		.byte	0x91
 3249 015e 70        		.sleb128 -16
 3250 015f 06        		.byte	0x6
 3251 0160 3C        		.byte	0x3c
 3252 0161 1E        		.byte	0x1e
 3253 0162 03        		.byte	0x3
 3254 0163 0000 0000 		.long	semaphore+8
 3255 0167 22        		.byte	0x22
 3256 0168 9F        		.byte	0x9f
 3257 0169 04        		.byte	0x4
 3258 016a AC07      		.uleb128 .LVL113-.Ltext0
 3259 016c B407      		.uleb128 .LVL114-.Ltext0
 3260 016e 0C        		.uleb128 0xc
 3261 016f 91        		.byte	0x91
 3262 0170 70        		.sleb128 -16
 3263 0171 06        		.byte	0x6
 3264 0172 3C        		.byte	0x3c
 3265 0173 1E        		.byte	0x1e
 3266 0174 03        		.byte	0x3
 3267 0175 0000 0000 		.long	semaphore+8
 3268 0179 22        		.byte	0x22
 3269 017a 9F        		.byte	0x9f
 3270 017b 00        		.byte	0
 3271               	.LVUS41:
 3272 017c 00        		.uleb128 .LVU310
 3273 017d 00        		.uleb128 .LVU315
 3274 017e 00        		.uleb128 .LVU315
 3275 017f 01        		.uleb128 .LVU329
 3276 0180 00        		.uleb128 .LVU343
 3277 0181 00        		.uleb128 .LVU346
 3278               	.LLST41:
 3279 0182 04        		.byte	0x4
 3280 0183 E806      		.uleb128 .LVL100-.Ltext0
 3281 0185 F406      		.uleb128 .LVL102-.Ltext0
 3282 0187 01        		.uleb128 0x1
 3283 0188 50        		.byte	0x50
 3284 0189 04        		.byte	0x4
 3285 018a F406      		.uleb128 .LVL102-.Ltext0
 3286 018c A207      		.uleb128 .LVL111-.Ltext0
 3287 018e 01        		.uleb128 0x1
 3288 018f 51        		.byte	0x51
 3289 0190 04        		.byte	0x4
 3290 0191 AC07      		.uleb128 .LVL113-.Ltext0
 3291 0193 B407      		.uleb128 .LVL114-.Ltext0
 3292 0195 01        		.uleb128 0x1
 3293 0196 50        		.byte	0x50
 3294 0197 00        		.byte	0
 3295               	.LVUS42:
 3296 0198 00        		.uleb128 .LVU316
 3297 0199 00        		.uleb128 .LVU320
 3298 019a 00        		.uleb128 .LVU320
 3299 019b 00        		.uleb128 .LVU321
 3300 019c 00        		.uleb128 .LVU321
 3301 019d 00        		.uleb128 .LVU322
 3302 019e 00        		.uleb128 .LVU322


 3303 019f 00        		.uleb128 .LVU323
 3304 01a0 00        		.uleb128 .LVU323
 3305 01a1 00        		.uleb128 .LVU324
 3306 01a2 00        		.uleb128 .LVU324
 3307 01a3 00        		.uleb128 .LVU325
 3308 01a4 00        		.uleb128 .LVU325
 3309 01a5 00        		.uleb128 .LVU326
 3310               	.LLST42:
 3311 01a6 04        		.byte	0x4
 3312 01a7 8007      		.uleb128 .LVL103-.Ltext0
 3313 01a9 8407      		.uleb128 .LVL104-.Ltext0
 3314 01ab 01        		.uleb128 0x1
 3315 01ac 50        		.byte	0x50
 3316 01ad 04        		.byte	0x4
 3317 01ae 8407      		.uleb128 .LVL104-.Ltext0
 3318 01b0 8607      		.uleb128 .LVL105-.Ltext0
 3319 01b2 11        		.uleb128 0x11
 3320 01b3 71        		.byte	0x71
 3321 01b4 00        		.sleb128 0
 3322 01b5 71        		.byte	0x71
 3323 01b6 00        		.sleb128 0
 3324 01b7 22        		.byte	0x22
 3325 01b8 31        		.byte	0x31
 3326 01b9 24        		.byte	0x24
 3327 01ba 71        		.byte	0x71
 3328 01bb 00        		.sleb128 0
 3329 01bc 22        		.byte	0x22
 3330 01bd 32        		.byte	0x32
 3331 01be 24        		.byte	0x24
 3332 01bf 78        		.byte	0x78
 3333 01c0 00        		.sleb128 0
 3334 01c1 22        		.byte	0x22
 3335 01c2 23        		.byte	0x23
 3336 01c3 10        		.uleb128 0x10
 3337 01c4 04        		.byte	0x4
 3338 01c5 8607      		.uleb128 .LVL105-.Ltext0
 3339 01c7 8807      		.uleb128 .LVL106-.Ltext0
 3340 01c9 0F        		.uleb128 0xf
 3341 01ca 70        		.byte	0x70
 3342 01cb 00        		.sleb128 0
 3343 01cc 70        		.byte	0x70
 3344 01cd 00        		.sleb128 0
 3345 01ce 22        		.byte	0x22
 3346 01cf 71        		.byte	0x71
 3347 01d0 00        		.sleb128 0
 3348 01d1 22        		.byte	0x22
 3349 01d2 32        		.byte	0x32
 3350 01d3 24        		.byte	0x24
 3351 01d4 78        		.byte	0x78
 3352 01d5 00        		.sleb128 0
 3353 01d6 22        		.byte	0x22
 3354 01d7 23        		.byte	0x23
 3355 01d8 10        		.uleb128 0x10
 3356 01d9 04        		.byte	0x4
 3357 01da 8807      		.uleb128 .LVL106-.Ltext0
 3358 01dc 8A07      		.uleb128 .LVL107-.Ltext0
 3359 01de 0C        		.uleb128 0xc


 3360 01df 70        		.byte	0x70
 3361 01e0 00        		.sleb128 0
 3362 01e1 71        		.byte	0x71
 3363 01e2 00        		.sleb128 0
 3364 01e3 22        		.byte	0x22
 3365 01e4 32        		.byte	0x32
 3366 01e5 24        		.byte	0x24
 3367 01e6 78        		.byte	0x78
 3368 01e7 00        		.sleb128 0
 3369 01e8 22        		.byte	0x22
 3370 01e9 23        		.byte	0x23
 3371 01ea 10        		.uleb128 0x10
 3372 01eb 04        		.byte	0x4
 3373 01ec 8A07      		.uleb128 .LVL107-.Ltext0
 3374 01ee 8C07      		.uleb128 .LVL108-.Ltext0
 3375 01f0 0C        		.uleb128 0xc
 3376 01f1 70        		.byte	0x70
 3377 01f2 00        		.sleb128 0
 3378 01f3 70        		.byte	0x70
 3379 01f4 00        		.sleb128 0
 3380 01f5 22        		.byte	0x22
 3381 01f6 31        		.byte	0x31
 3382 01f7 24        		.byte	0x24
 3383 01f8 78        		.byte	0x78
 3384 01f9 00        		.sleb128 0
 3385 01fa 22        		.byte	0x22
 3386 01fb 23        		.byte	0x23
 3387 01fc 10        		.uleb128 0x10
 3388 01fd 04        		.byte	0x4
 3389 01fe 8C07      		.uleb128 .LVL108-.Ltext0
 3390 0200 8E07      		.uleb128 .LVL109-.Ltext0
 3391 0202 0A        		.uleb128 0xa
 3392 0203 78        		.byte	0x78
 3393 0204 00        		.sleb128 0
 3394 0205 70        		.byte	0x70
 3395 0206 00        		.sleb128 0
 3396 0207 22        		.byte	0x22
 3397 0208 70        		.byte	0x70
 3398 0209 00        		.sleb128 0
 3399 020a 22        		.byte	0x22
 3400 020b 23        		.byte	0x23
 3401 020c 10        		.uleb128 0x10
 3402 020d 04        		.byte	0x4
 3403 020e 8E07      		.uleb128 .LVL109-.Ltext0
 3404 0210 9207      		.uleb128 .LVL110-.Ltext0
 3405 0212 07        		.uleb128 0x7
 3406 0213 78        		.byte	0x78
 3407 0214 00        		.sleb128 0
 3408 0215 70        		.byte	0x70
 3409 0216 00        		.sleb128 0
 3410 0217 22        		.byte	0x22
 3411 0218 23        		.byte	0x23
 3412 0219 10        		.uleb128 0x10
 3413 021a 00        		.byte	0
 3414               	.LVUS45:
 3415 021b 05        		.uleb128 .LVU333
 3416 021c 00        		.uleb128 .LVU343


 3417 021d 04        		.uleb128 .LVU350
 3418 021e 01        		.uleb128 .LVU359
 3419               	.LLST45:
 3420 021f 04        		.byte	0x4
 3421 0220 A207      		.uleb128 .LVL111-.Ltext0
 3422 0222 AC07      		.uleb128 .LVL113-.Ltext0
 3423 0224 06        		.uleb128 0x6
 3424 0225 03        		.byte	0x3
 3425 0226 0000 0000 		.long	ready
 3426 022a 9F        		.byte	0x9f
 3427 022b 04        		.byte	0x4
 3428 022c B407      		.uleb128 .LVL114-.Ltext0
 3429 022e D007      		.uleb128 .LVL116-.Ltext0
 3430 0230 06        		.uleb128 0x6
 3431 0231 03        		.byte	0x3
 3432 0232 0000 0000 		.long	ready
 3433 0236 9F        		.byte	0x9f
 3434 0237 00        		.byte	0
 3435               	.LVUS46:
 3436 0238 00        		.uleb128 .LVU336
 3437 0239 00        		.uleb128 .LVU343
 3438 023a 00        		.uleb128 .LVU353
 3439 023b 01        		.uleb128 .LVU359
 3440               	.LLST46:
 3441 023c 04        		.byte	0x4
 3442 023d A807      		.uleb128 .LVL112-.Ltext0
 3443 023f AC07      		.uleb128 .LVL113-.Ltext0
 3444 0241 01        		.uleb128 0x1
 3445 0242 51        		.byte	0x51
 3446 0243 04        		.byte	0x4
 3447 0244 BA07      		.uleb128 .LVL115-.Ltext0
 3448 0246 D007      		.uleb128 .LVL116-.Ltext0
 3449 0248 01        		.uleb128 0x1
 3450 0249 51        		.byte	0x51
 3451 024a 00        		.byte	0
 3452               	.LVUS13:
 3453 024b 02        		.uleb128 .LVU123
 3454 024c 01        		.uleb128 .LVU132
 3455               	.LLST13:
 3456 024d 04        		.byte	0x4
 3457 024e DC02      		.uleb128 .LVL36-.Ltext0
 3458 0250 FE02      		.uleb128 .LVL38-.Ltext0
 3459 0252 06        		.uleb128 0x6
 3460 0253 03        		.byte	0x3
 3461 0254 0000 0000 		.long	ready
 3462 0258 9F        		.byte	0x9f
 3463 0259 00        		.byte	0
 3464               	.LVUS14:
 3465 025a 00        		.uleb128 .LVU126
 3466 025b 01        		.uleb128 .LVU132
 3467               	.LLST14:
 3468 025c 04        		.byte	0x4
 3469 025d E202      		.uleb128 .LVL37-.Ltext0
 3470 025f FE02      		.uleb128 .LVL38-.Ltext0
 3471 0261 01        		.uleb128 0x1
 3472 0262 51        		.byte	0x51
 3473 0263 00        		.byte	0


 3474               	.LVUS3:
 3475 0264 02        		.uleb128 .LVU46
 3476 0265 00        		.uleb128 .LVU48
 3477 0266 00        		.uleb128 .LVU48
 3478 0267 00        		.uleb128 0
 3479               	.LLST3:
 3480 0268 04        		.byte	0x4
 3481 0269 60        		.uleb128 .LVL7-.Ltext0
 3482 026a 68        		.uleb128 .LVL8-.Ltext0
 3483 026b 02        		.uleb128 0x2
 3484 026c 31        		.byte	0x31
 3485 026d 9F        		.byte	0x9f
 3486 026e 04        		.byte	0x4
 3487 026f 68        		.uleb128 .LVL8-.Ltext0
 3488 0270 9A02      		.uleb128 .LFE4-.Ltext0
 3489 0272 01        		.uleb128 0x1
 3490 0273 50        		.byte	0x50
 3491 0274 00        		.byte	0
 3492               	.LVUS4:
 3493 0275 01        		.uleb128 .LVU60
 3494 0276 01        		.uleb128 .LVU73
 3495               	.LLST4:
 3496 0277 04        		.byte	0x4
 3497 0278 A801      		.uleb128 .LVL10-.Ltext0
 3498 027a CA01      		.uleb128 .LVL14-.Ltext0
 3499 027c 05        		.uleb128 0x5
 3500 027d 03        		.byte	0x3
 3501 027e 0000 0000 		.long	new_task
 3502 0282 00        		.byte	0
 3503               	.LVUS5:
 3504 0283 00        		.uleb128 .LVU63
 3505 0284 01        		.uleb128 .LVU64
 3506 0285 01        		.uleb128 .LVU64
 3507 0286 01        		.uleb128 .LVU69
 3508 0287 01        		.uleb128 .LVU69
 3509 0288 02        		.uleb128 .LVU70
 3510 0289 02        		.uleb128 .LVU70
 3511 028a 03        		.uleb128 .LVU71
 3512 028b 03        		.uleb128 .LVU71
 3513 028c 01        		.uleb128 .LVU73
 3514               	.LLST5:
 3515 028d 04        		.byte	0x4
 3516 028e B601      		.uleb128 .LVL11-.Ltext0
 3517 0290 B601      		.uleb128 .LVL11-.Ltext0
 3518 0292 01        		.uleb128 0x1
 3519 0293 5B        		.byte	0x5b
 3520 0294 04        		.byte	0x4
 3521 0295 B601      		.uleb128 .LVL11-.Ltext0
 3522 0297 C001      		.uleb128 .LVL13-.Ltext0
 3523 0299 03        		.uleb128 0x3
 3524 029a 7B        		.byte	0x7b
 3525 029b 7C        		.sleb128 -4
 3526 029c 9F        		.byte	0x9f
 3527 029d 04        		.byte	0x4
 3528 029e C001      		.uleb128 .LVL13-.Ltext0
 3529 02a0 C001      		.uleb128 .LVL13-.Ltext0
 3530 02a2 03        		.uleb128 0x3


 3531 02a3 7B        		.byte	0x7b
 3532 02a4 7A        		.sleb128 -6
 3533 02a5 9F        		.byte	0x9f
 3534 02a6 04        		.byte	0x4
 3535 02a7 C001      		.uleb128 .LVL13-.Ltext0
 3536 02a9 C001      		.uleb128 .LVL13-.Ltext0
 3537 02ab 04        		.uleb128 0x4
 3538 02ac 7B        		.byte	0x7b
 3539 02ad BE7F      		.sleb128 -66
 3540 02af 9F        		.byte	0x9f
 3541 02b0 04        		.byte	0x4
 3542 02b1 C001      		.uleb128 .LVL13-.Ltext0
 3543 02b3 CA01      		.uleb128 .LVL14-.Ltext0
 3544 02b5 04        		.uleb128 0x4
 3545 02b6 7B        		.byte	0x7b
 3546 02b7 BA7F      		.sleb128 -70
 3547 02b9 9F        		.byte	0x9f
 3548 02ba 00        		.byte	0
 3549               	.LVUS6:
 3550 02bb 01        		.uleb128 .LVU66
 3551 02bc 02        		.uleb128 .LVU67
 3552 02bd 02        		.uleb128 .LVU67
 3553 02be 00        		.uleb128 .LVU74
 3554 02bf 00        		.uleb128 .LVU74
 3555 02c0 00        		.uleb128 .LVU99
 3556 02c1 00        		.uleb128 .LVU99
 3557 02c2 00        		.uleb128 .LVU100
 3558 02c3 00        		.uleb128 .LVU100
 3559 02c4 00        		.uleb128 .LVU103
 3560 02c5 00        		.uleb128 .LVU103
 3561 02c6 00        		.uleb128 0
 3562               	.LLST6:
 3563 02c7 04        		.byte	0x4
 3564 02c8 BC01      		.uleb128 .LVL12-.Ltext0
 3565 02ca BC01      		.uleb128 .LVL12-.Ltext0
 3566 02cc 03        		.uleb128 0x3
 3567 02cd 7B        		.byte	0x7b
 3568 02ce 7C        		.sleb128 -4
 3569 02cf 9F        		.byte	0x9f
 3570 02d0 04        		.byte	0x4
 3571 02d1 BC01      		.uleb128 .LVL12-.Ltext0
 3572 02d3 CE01      		.uleb128 .LVL15-.Ltext0
 3573 02d5 03        		.uleb128 0x3
 3574 02d6 7B        		.byte	0x7b
 3575 02d7 7A        		.sleb128 -6
 3576 02d8 9F        		.byte	0x9f
 3577 02d9 04        		.byte	0x4
 3578 02da CE01      		.uleb128 .LVL15-.Ltext0
 3579 02dc 8C02      		.uleb128 .LVL28-.Ltext0
 3580 02de 04        		.uleb128 0x4
 3581 02df 7B        		.byte	0x7b
 3582 02e0 C000      		.sleb128 64
 3583 02e2 9F        		.byte	0x9f
 3584 02e3 04        		.byte	0x4
 3585 02e4 8C02      		.uleb128 .LVL28-.Ltext0
 3586 02e6 8E02      		.uleb128 .LVL29-.Ltext0
 3587 02e8 16        		.uleb128 0x16


 3588 02e9 70        		.byte	0x70
 3589 02ea 00        		.sleb128 0
 3590 02eb 70        		.byte	0x70
 3591 02ec 00        		.sleb128 0
 3592 02ed 22        		.byte	0x22
 3593 02ee 31        		.byte	0x31
 3594 02ef 24        		.byte	0x24
 3595 02f0 70        		.byte	0x70
 3596 02f1 00        		.sleb128 0
 3597 02f2 22        		.byte	0x22
 3598 02f3 32        		.byte	0x32
 3599 02f4 24        		.byte	0x24
 3600 02f5 03        		.byte	0x3
 3601 02f6 0000 0000 		.long	task_tab+4
 3602 02fa 22        		.byte	0x22
 3603 02fb 06        		.byte	0x6
 3604 02fc 23        		.byte	0x23
 3605 02fd 40        		.uleb128 0x40
 3606 02fe 9F        		.byte	0x9f
 3607 02ff 04        		.byte	0x4
 3608 0300 8E02      		.uleb128 .LVL29-.Ltext0
 3609 0302 9802      		.uleb128 .LVL30-.Ltext0
 3610 0304 04        		.uleb128 0x4
 3611 0305 7B        		.byte	0x7b
 3612 0306 C000      		.sleb128 64
 3613 0308 9F        		.byte	0x9f
 3614 0309 04        		.byte	0x4
 3615 030a 9802      		.uleb128 .LVL30-.Ltext0
 3616 030c 9A02      		.uleb128 .LFE4-.Ltext0
 3617 030e 06        		.uleb128 0x6
 3618 030f 78        		.byte	0x78
 3619 0310 04        		.sleb128 4
 3620 0311 06        		.byte	0x6
 3621 0312 23        		.byte	0x23
 3622 0313 40        		.uleb128 0x40
 3623 0314 9F        		.byte	0x9f
 3624 0315 00        		.byte	0
 3625               	.LVUS8:
 3626 0316 01        		.uleb128 .LVU76
 3627 0317 00        		.uleb128 .LVU81
 3628 0318 00        		.uleb128 .LVU81
 3629 0319 00        		.uleb128 0
 3630               	.LLST8:
 3631 031a 04        		.byte	0x4
 3632 031b D201      		.uleb128 .LVL16-.Ltext0
 3633 031d DA01      		.uleb128 .LVL18-.Ltext0
 3634 031f 05        		.uleb128 0x5
 3635 0320 03        		.byte	0x3
 3636 0321 0000 0000 		.long	new_task
 3637 0325 04        		.byte	0x4
 3638 0326 DA01      		.uleb128 .LVL18-.Ltext0
 3639 0328 9A02      		.uleb128 .LFE4-.Ltext0
 3640 032a 01        		.uleb128 0x1
 3641 032b 50        		.byte	0x50
 3642 032c 00        		.byte	0
 3643               	.LVUS9:
 3644 032d 00        		.uleb128 .LVU79


 3645 032e 00        		.uleb128 .LVU84
 3646 032f 00        		.uleb128 .LVU84
 3647 0330 00        		.uleb128 .LVU100
 3648 0331 00        		.uleb128 .LVU100
 3649 0332 00        		.uleb128 0
 3650               	.LLST9:
 3651 0333 04        		.byte	0x4
 3652 0334 D801      		.uleb128 .LVL17-.Ltext0
 3653 0336 DE01      		.uleb128 .LVL19-.Ltext0
 3654 0338 01        		.uleb128 0x1
 3655 0339 51        		.byte	0x51
 3656 033a 04        		.byte	0x4
 3657 033b DE01      		.uleb128 .LVL19-.Ltext0
 3658 033d 8E02      		.uleb128 .LVL29-.Ltext0
 3659 033f 01        		.uleb128 0x1
 3660 0340 58        		.byte	0x58
 3661 0341 04        		.byte	0x4
 3662 0342 8E02      		.uleb128 .LVL29-.Ltext0
 3663 0344 9A02      		.uleb128 .LFE4-.Ltext0
 3664 0346 01        		.uleb128 0x1
 3665 0347 51        		.byte	0x51
 3666 0348 00        		.byte	0
 3667               	.LVUS10:
 3668 0349 00        		.uleb128 .LVU85
 3669 034a 00        		.uleb128 .LVU89
 3670 034b 00        		.uleb128 .LVU89
 3671 034c 00        		.uleb128 .LVU90
 3672 034d 00        		.uleb128 .LVU90
 3673 034e 00        		.uleb128 .LVU91
 3674 034f 00        		.uleb128 .LVU91
 3675 0350 00        		.uleb128 .LVU92
 3676 0351 00        		.uleb128 .LVU92
 3677 0352 00        		.uleb128 .LVU93
 3678 0353 00        		.uleb128 .LVU93
 3679 0354 00        		.uleb128 .LVU94
 3680 0355 00        		.uleb128 .LVU94
 3681 0356 00        		.uleb128 .LVU95
 3682               	.LLST10:
 3683 0357 04        		.byte	0x4
 3684 0358 EA01      		.uleb128 .LVL20-.Ltext0
 3685 035a EE01      		.uleb128 .LVL21-.Ltext0
 3686 035c 01        		.uleb128 0x1
 3687 035d 51        		.byte	0x51
 3688 035e 04        		.byte	0x4
 3689 035f EE01      		.uleb128 .LVL21-.Ltext0
 3690 0361 F001      		.uleb128 .LVL22-.Ltext0
 3691 0363 11        		.uleb128 0x11
 3692 0364 78        		.byte	0x78
 3693 0365 00        		.sleb128 0
 3694 0366 78        		.byte	0x78
 3695 0367 00        		.sleb128 0
 3696 0368 22        		.byte	0x22
 3697 0369 31        		.byte	0x31
 3698 036a 24        		.byte	0x24
 3699 036b 78        		.byte	0x78
 3700 036c 00        		.sleb128 0
 3701 036d 22        		.byte	0x22


 3702 036e 32        		.byte	0x32
 3703 036f 24        		.byte	0x24
 3704 0370 7A        		.byte	0x7a
 3705 0371 00        		.sleb128 0
 3706 0372 22        		.byte	0x22
 3707 0373 23        		.byte	0x23
 3708 0374 10        		.uleb128 0x10
 3709 0375 04        		.byte	0x4
 3710 0376 F001      		.uleb128 .LVL22-.Ltext0
 3711 0378 F201      		.uleb128 .LVL23-.Ltext0
 3712 037a 0F        		.uleb128 0xf
 3713 037b 71        		.byte	0x71
 3714 037c 00        		.sleb128 0
 3715 037d 71        		.byte	0x71
 3716 037e 00        		.sleb128 0
 3717 037f 22        		.byte	0x22
 3718 0380 78        		.byte	0x78
 3719 0381 00        		.sleb128 0
 3720 0382 22        		.byte	0x22
 3721 0383 32        		.byte	0x32
 3722 0384 24        		.byte	0x24
 3723 0385 7A        		.byte	0x7a
 3724 0386 00        		.sleb128 0
 3725 0387 22        		.byte	0x22
 3726 0388 23        		.byte	0x23
 3727 0389 10        		.uleb128 0x10
 3728 038a 04        		.byte	0x4
 3729 038b F201      		.uleb128 .LVL23-.Ltext0
 3730 038d F401      		.uleb128 .LVL24-.Ltext0
 3731 038f 0C        		.uleb128 0xc
 3732 0390 71        		.byte	0x71
 3733 0391 00        		.sleb128 0
 3734 0392 78        		.byte	0x78
 3735 0393 00        		.sleb128 0
 3736 0394 22        		.byte	0x22
 3737 0395 32        		.byte	0x32
 3738 0396 24        		.byte	0x24
 3739 0397 7A        		.byte	0x7a
 3740 0398 00        		.sleb128 0
 3741 0399 22        		.byte	0x22
 3742 039a 23        		.byte	0x23
 3743 039b 10        		.uleb128 0x10
 3744 039c 04        		.byte	0x4
 3745 039d F401      		.uleb128 .LVL24-.Ltext0
 3746 039f F601      		.uleb128 .LVL25-.Ltext0
 3747 03a1 0C        		.uleb128 0xc
 3748 03a2 71        		.byte	0x71
 3749 03a3 00        		.sleb128 0
 3750 03a4 71        		.byte	0x71
 3751 03a5 00        		.sleb128 0
 3752 03a6 22        		.byte	0x22
 3753 03a7 31        		.byte	0x31
 3754 03a8 24        		.byte	0x24
 3755 03a9 7A        		.byte	0x7a
 3756 03aa 00        		.sleb128 0
 3757 03ab 22        		.byte	0x22
 3758 03ac 23        		.byte	0x23


 3759 03ad 10        		.uleb128 0x10
 3760 03ae 04        		.byte	0x4
 3761 03af F601      		.uleb128 .LVL25-.Ltext0
 3762 03b1 F801      		.uleb128 .LVL26-.Ltext0
 3763 03b3 0A        		.uleb128 0xa
 3764 03b4 7A        		.byte	0x7a
 3765 03b5 00        		.sleb128 0
 3766 03b6 71        		.byte	0x71
 3767 03b7 00        		.sleb128 0
 3768 03b8 22        		.byte	0x22
 3769 03b9 71        		.byte	0x71
 3770 03ba 00        		.sleb128 0
 3771 03bb 22        		.byte	0x22
 3772 03bc 23        		.byte	0x23
 3773 03bd 10        		.uleb128 0x10
 3774 03be 04        		.byte	0x4
 3775 03bf F801      		.uleb128 .LVL26-.Ltext0
 3776 03c1 FC01      		.uleb128 .LVL27-.Ltext0
 3777 03c3 07        		.uleb128 0x7
 3778 03c4 7A        		.byte	0x7a
 3779 03c5 00        		.sleb128 0
 3780 03c6 71        		.byte	0x71
 3781 03c7 00        		.sleb128 0
 3782 03c8 22        		.byte	0x22
 3783 03c9 23        		.byte	0x23
 3784 03ca 10        		.uleb128 0x10
 3785 03cb 00        		.byte	0
 3786               	.LVUS0:
 3787 03cc 03        		.uleb128 .LVU3
 3788 03cd 00        		.uleb128 .LVU4
 3789               	.LLST0:
 3790 03ce 04        		.byte	0x4
 3791 03cf 00        		.uleb128 .LVL0-.Ltext0
 3792 03d0 0C        		.uleb128 .LVL1-.Ltext0
 3793 03d1 02        		.uleb128 0x2
 3794 03d2 30        		.byte	0x30
 3795 03d3 9F        		.byte	0x9f
 3796 03d4 00        		.byte	0
 3797               	.LVUS1:
 3798 03d5 02        		.uleb128 .LVU22
 3799 03d6 01        		.uleb128 .LVU28
 3800 03d7 01        		.uleb128 .LVU28
 3801 03d8 01        		.uleb128 .LVU34
 3802 03d9 01        		.uleb128 .LVU34
 3803 03da 01        		.uleb128 .LVU40
 3804 03db 01        		.uleb128 .LVU40
 3805 03dc 00        		.uleb128 0
 3806               	.LLST1:
 3807 03dd 04        		.byte	0x4
 3808 03de 34        		.uleb128 .LVL2-.Ltext0
 3809 03df 42        		.uleb128 .LVL3-.Ltext0
 3810 03e0 02        		.uleb128 0x2
 3811 03e1 30        		.byte	0x30
 3812 03e2 9F        		.byte	0x9f
 3813 03e3 04        		.byte	0x4
 3814 03e4 42        		.uleb128 .LVL3-.Ltext0
 3815 03e5 4E        		.uleb128 .LVL4-.Ltext0


 3816 03e6 02        		.uleb128 0x2
 3817 03e7 31        		.byte	0x31
 3818 03e8 9F        		.byte	0x9f
 3819 03e9 04        		.byte	0x4
 3820 03ea 4E        		.uleb128 .LVL4-.Ltext0
 3821 03eb 5A        		.uleb128 .LVL5-.Ltext0
 3822 03ec 02        		.uleb128 0x2
 3823 03ed 32        		.byte	0x32
 3824 03ee 9F        		.byte	0x9f
 3825 03ef 04        		.byte	0x4
 3826 03f0 5A        		.uleb128 .LVL5-.Ltext0
 3827 03f1 5C        		.uleb128 .LFE3-.Ltext0
 3828 03f2 02        		.uleb128 0x2
 3829 03f3 33        		.byte	0x33
 3830 03f4 9F        		.byte	0x9f
 3831 03f5 00        		.byte	0
 3832               	.LVUS11:
 3833 03f6 00        		.uleb128 .LVU108
 3834 03f7 01        		.uleb128 .LVU109
 3835 03f8 01        		.uleb128 .LVU109
 3836 03f9 01        		.uleb128 .LVU115
 3837 03fa 01        		.uleb128 .LVU115
 3838 03fb 02        		.uleb128 .LVU116
 3839 03fc 02        		.uleb128 .LVU116
 3840 03fd 03        		.uleb128 .LVU117
 3841 03fe 03        		.uleb128 .LVU117
 3842 03ff 00        		.uleb128 .LVU120
 3843 0400 00        		.uleb128 .LVU120
 3844 0401 00        		.uleb128 0
 3845               	.LLST11:
 3846 0402 04        		.byte	0x4
 3847 0403 AE02      		.uleb128 .LVL32-.Ltext0
 3848 0405 AE02      		.uleb128 .LVL32-.Ltext0
 3849 0407 01        		.uleb128 0x1
 3850 0408 58        		.byte	0x58
 3851 0409 04        		.byte	0x4
 3852 040a AE02      		.uleb128 .LVL32-.Ltext0
 3853 040c CA02      		.uleb128 .LVL34-.Ltext0
 3854 040e 03        		.uleb128 0x3
 3855 040f 78        		.byte	0x78
 3856 0410 7C        		.sleb128 -4
 3857 0411 9F        		.byte	0x9f
 3858 0412 04        		.byte	0x4
 3859 0413 CA02      		.uleb128 .LVL34-.Ltext0
 3860 0415 CA02      		.uleb128 .LVL34-.Ltext0
 3861 0417 03        		.uleb128 0x3
 3862 0418 78        		.byte	0x78
 3863 0419 7A        		.sleb128 -6
 3864 041a 9F        		.byte	0x9f
 3865 041b 04        		.byte	0x4
 3866 041c CA02      		.uleb128 .LVL34-.Ltext0
 3867 041e CA02      		.uleb128 .LVL34-.Ltext0
 3868 0420 04        		.uleb128 0x4
 3869 0421 78        		.byte	0x78
 3870 0422 BE7F      		.sleb128 -66
 3871 0424 9F        		.byte	0x9f
 3872 0425 04        		.byte	0x4


 3873 0426 CA02      		.uleb128 .LVL34-.Ltext0
 3874 0428 D802      		.uleb128 .LVL35-.Ltext0
 3875 042a 04        		.uleb128 0x4
 3876 042b 78        		.byte	0x78
 3877 042c BA7F      		.sleb128 -70
 3878 042e 9F        		.byte	0x9f
 3879 042f 04        		.byte	0x4
 3880 0430 D802      		.uleb128 .LVL35-.Ltext0
 3881 0432 DC02      		.uleb128 .LFE5-.Ltext0
 3882 0434 01        		.uleb128 0x1
 3883 0435 50        		.byte	0x50
 3884 0436 00        		.byte	0
 3885               	.LVUS12:
 3886 0437 01        		.uleb128 .LVU112
 3887 0438 02        		.uleb128 .LVU113
 3888 0439 02        		.uleb128 .LVU113
 3889 043a 00        		.uleb128 0
 3890               	.LLST12:
 3891 043b 04        		.byte	0x4
 3892 043c C602      		.uleb128 .LVL33-.Ltext0
 3893 043e C602      		.uleb128 .LVL33-.Ltext0
 3894 0440 03        		.uleb128 0x3
 3895 0441 78        		.byte	0x78
 3896 0442 7C        		.sleb128 -4
 3897 0443 9F        		.byte	0x9f
 3898 0444 04        		.byte	0x4
 3899 0445 C602      		.uleb128 .LVL33-.Ltext0
 3900 0447 DC02      		.uleb128 .LFE5-.Ltext0
 3901 0449 03        		.uleb128 0x3
 3902 044a 78        		.byte	0x78
 3903 044b 7A        		.sleb128 -6
 3904 044c 9F        		.byte	0x9f
 3905 044d 00        		.byte	0
 3906               	.LVUS15:
 3907 044e 00        		.uleb128 .LVU142
 3908 044f 00        		.uleb128 .LVU147
 3909 0450 00        		.uleb128 .LVU147
 3910 0451 00        		.uleb128 .LVU162
 3911 0452 00        		.uleb128 .LVU162
 3912 0453 00        		.uleb128 0
 3913               	.LLST15:
 3914 0454 04        		.byte	0x4
 3915 0455 9A03      		.uleb128 .LVL42-.Ltext0
 3916 0457 A603      		.uleb128 .LVL44-.Ltext0
 3917 0459 01        		.uleb128 0x1
 3918 045a 50        		.byte	0x50
 3919 045b 04        		.byte	0x4
 3920 045c A603      		.uleb128 .LVL44-.Ltext0
 3921 045e D603      		.uleb128 .LVL53-.Ltext0
 3922 0460 01        		.uleb128 0x1
 3923 0461 51        		.byte	0x51
 3924 0462 04        		.byte	0x4
 3925 0463 D603      		.uleb128 .LVL53-.Ltext0
 3926 0465 DA03      		.uleb128 .LFE7-.Ltext0
 3927 0467 01        		.uleb128 0x1
 3928 0468 50        		.byte	0x50
 3929 0469 00        		.byte	0


 3930               	.LVUS16:
 3931 046a 00        		.uleb128 .LVU148
 3932 046b 00        		.uleb128 .LVU152
 3933 046c 00        		.uleb128 .LVU152
 3934 046d 00        		.uleb128 .LVU153
 3935 046e 00        		.uleb128 .LVU153
 3936 046f 00        		.uleb128 .LVU154
 3937 0470 00        		.uleb128 .LVU154
 3938 0471 00        		.uleb128 .LVU155
 3939 0472 00        		.uleb128 .LVU155
 3940 0473 00        		.uleb128 .LVU156
 3941 0474 00        		.uleb128 .LVU156
 3942 0475 00        		.uleb128 .LVU157
 3943 0476 00        		.uleb128 .LVU157
 3944 0477 00        		.uleb128 .LVU158
 3945               	.LLST16:
 3946 0478 04        		.byte	0x4
 3947 0479 B203      		.uleb128 .LVL45-.Ltext0
 3948 047b B603      		.uleb128 .LVL46-.Ltext0
 3949 047d 01        		.uleb128 0x1
 3950 047e 50        		.byte	0x50
 3951 047f 04        		.byte	0x4
 3952 0480 B603      		.uleb128 .LVL46-.Ltext0
 3953 0482 B803      		.uleb128 .LVL47-.Ltext0
 3954 0484 11        		.uleb128 0x11
 3955 0485 71        		.byte	0x71
 3956 0486 00        		.sleb128 0
 3957 0487 71        		.byte	0x71
 3958 0488 00        		.sleb128 0
 3959 0489 22        		.byte	0x22
 3960 048a 31        		.byte	0x31
 3961 048b 24        		.byte	0x24
 3962 048c 71        		.byte	0x71
 3963 048d 00        		.sleb128 0
 3964 048e 22        		.byte	0x22
 3965 048f 32        		.byte	0x32
 3966 0490 24        		.byte	0x24
 3967 0491 78        		.byte	0x78
 3968 0492 00        		.sleb128 0
 3969 0493 22        		.byte	0x22
 3970 0494 23        		.byte	0x23
 3971 0495 10        		.uleb128 0x10
 3972 0496 04        		.byte	0x4
 3973 0497 B803      		.uleb128 .LVL47-.Ltext0
 3974 0499 BA03      		.uleb128 .LVL48-.Ltext0
 3975 049b 0F        		.uleb128 0xf
 3976 049c 70        		.byte	0x70
 3977 049d 00        		.sleb128 0
 3978 049e 70        		.byte	0x70
 3979 049f 00        		.sleb128 0
 3980 04a0 22        		.byte	0x22
 3981 04a1 71        		.byte	0x71
 3982 04a2 00        		.sleb128 0
 3983 04a3 22        		.byte	0x22
 3984 04a4 32        		.byte	0x32
 3985 04a5 24        		.byte	0x24
 3986 04a6 78        		.byte	0x78


 3987 04a7 00        		.sleb128 0
 3988 04a8 22        		.byte	0x22
 3989 04a9 23        		.byte	0x23
 3990 04aa 10        		.uleb128 0x10
 3991 04ab 04        		.byte	0x4
 3992 04ac BA03      		.uleb128 .LVL48-.Ltext0
 3993 04ae BC03      		.uleb128 .LVL49-.Ltext0
 3994 04b0 0C        		.uleb128 0xc
 3995 04b1 70        		.byte	0x70
 3996 04b2 00        		.sleb128 0
 3997 04b3 71        		.byte	0x71
 3998 04b4 00        		.sleb128 0
 3999 04b5 22        		.byte	0x22
 4000 04b6 32        		.byte	0x32
 4001 04b7 24        		.byte	0x24
 4002 04b8 78        		.byte	0x78
 4003 04b9 00        		.sleb128 0
 4004 04ba 22        		.byte	0x22
 4005 04bb 23        		.byte	0x23
 4006 04bc 10        		.uleb128 0x10
 4007 04bd 04        		.byte	0x4
 4008 04be BC03      		.uleb128 .LVL49-.Ltext0
 4009 04c0 BE03      		.uleb128 .LVL50-.Ltext0
 4010 04c2 0C        		.uleb128 0xc
 4011 04c3 70        		.byte	0x70
 4012 04c4 00        		.sleb128 0
 4013 04c5 70        		.byte	0x70
 4014 04c6 00        		.sleb128 0
 4015 04c7 22        		.byte	0x22
 4016 04c8 31        		.byte	0x31
 4017 04c9 24        		.byte	0x24
 4018 04ca 78        		.byte	0x78
 4019 04cb 00        		.sleb128 0
 4020 04cc 22        		.byte	0x22
 4021 04cd 23        		.byte	0x23
 4022 04ce 10        		.uleb128 0x10
 4023 04cf 04        		.byte	0x4
 4024 04d0 BE03      		.uleb128 .LVL50-.Ltext0
 4025 04d2 C003      		.uleb128 .LVL51-.Ltext0
 4026 04d4 0A        		.uleb128 0xa
 4027 04d5 78        		.byte	0x78
 4028 04d6 00        		.sleb128 0
 4029 04d7 70        		.byte	0x70
 4030 04d8 00        		.sleb128 0
 4031 04d9 22        		.byte	0x22
 4032 04da 70        		.byte	0x70
 4033 04db 00        		.sleb128 0
 4034 04dc 22        		.byte	0x22
 4035 04dd 23        		.byte	0x23
 4036 04de 10        		.uleb128 0x10
 4037 04df 04        		.byte	0x4
 4038 04e0 C003      		.uleb128 .LVL51-.Ltext0
 4039 04e2 C403      		.uleb128 .LVL52-.Ltext0
 4040 04e4 07        		.uleb128 0x7
 4041 04e5 78        		.byte	0x78
 4042 04e6 00        		.sleb128 0
 4043 04e7 70        		.byte	0x70


 4044 04e8 00        		.sleb128 0
 4045 04e9 22        		.byte	0x22
 4046 04ea 23        		.byte	0x23
 4047 04eb 10        		.uleb128 0x10
 4048 04ec 00        		.byte	0
 4049               	.LVUS17:
 4050 04ed 00        		.uleb128 .LVU169
 4051 04ee 00        		.uleb128 0
 4052               	.LLST17:
 4053 04ef 04        		.byte	0x4
 4054 04f0 E003      		.uleb128 .LVL55-.Ltext0
 4055 04f2 FA03      		.uleb128 .LFE8-.Ltext0
 4056 04f4 01        		.uleb128 0x1
 4057 04f5 50        		.byte	0x50
 4058 04f6 00        		.byte	0
 4059               	.LVUS18:
 4060 04f7 02        		.uleb128 .LVU178
 4061 04f8 01        		.uleb128 .LVU187
 4062 04f9 00        		.uleb128 .LVU191
 4063 04fa 00        		.uleb128 0
 4064               	.LLST18:
 4065 04fb 04        		.byte	0x4
 4066 04fc FA03      		.uleb128 .LVL56-.Ltext0
 4067 04fe 9C04      		.uleb128 .LVL58-.Ltext0
 4068 0500 06        		.uleb128 0x6
 4069 0501 03        		.byte	0x3
 4070 0502 0000 0000 		.long	ready
 4071 0506 9F        		.byte	0x9f
 4072 0507 04        		.byte	0x4
 4073 0508 A404      		.uleb128 .LVL59-.Ltext0
 4074 050a A604      		.uleb128 .LFE9-.Ltext0
 4075 050c 06        		.uleb128 0x6
 4076 050d 03        		.byte	0x3
 4077 050e 0000 0000 		.long	ready
 4078 0512 9F        		.byte	0x9f
 4079 0513 00        		.byte	0
 4080               	.LVUS19:
 4081 0514 00        		.uleb128 .LVU181
 4082 0515 01        		.uleb128 .LVU187
 4083 0516 00        		.uleb128 .LVU191
 4084 0517 00        		.uleb128 0
 4085               	.LLST19:
 4086 0518 04        		.byte	0x4
 4087 0519 8004      		.uleb128 .LVL57-.Ltext0
 4088 051b 9C04      		.uleb128 .LVL58-.Ltext0
 4089 051d 01        		.uleb128 0x1
 4090 051e 51        		.byte	0x51
 4091 051f 04        		.byte	0x4
 4092 0520 A404      		.uleb128 .LVL59-.Ltext0
 4093 0522 A604      		.uleb128 .LFE9-.Ltext0
 4094 0524 01        		.uleb128 0x1
 4095 0525 51        		.byte	0x51
 4096 0526 00        		.byte	0
 4097               	.LVUS21:
 4098 0527 00        		.uleb128 .LVU198
 4099 0528 01        		.uleb128 .LVU220
 4100 0529 00        		.uleb128 .LVU244


 4101 052a 00        		.uleb128 .LVU246
 4102               	.LLST21:
 4103 052b 04        		.byte	0x4
 4104 052c B004      		.uleb128 .LVL61-.Ltext0
 4105 052e FE04      		.uleb128 .LVL73-.Ltext0
 4106 0530 01        		.uleb128 0x1
 4107 0531 59        		.byte	0x59
 4108 0532 04        		.byte	0x4
 4109 0533 A805      		.uleb128 .LVL76-.Ltext0
 4110 0535 B005      		.uleb128 .LVL77-.Ltext0
 4111 0537 01        		.uleb128 0x1
 4112 0538 59        		.byte	0x59
 4113 0539 00        		.byte	0
 4114               	.LVUS22:
 4115 053a 00        		.uleb128 .LVU198
 4116 053b 00        		.uleb128 .LVU203
 4117 053c 00        		.uleb128 .LVU203
 4118 053d 01        		.uleb128 .LVU220
 4119 053e 00        		.uleb128 .LVU244
 4120 053f 00        		.uleb128 .LVU246
 4121               	.LLST22:
 4122 0540 04        		.byte	0x4
 4123 0541 B004      		.uleb128 .LVL61-.Ltext0
 4124 0543 CC04      		.uleb128 .LVL63-.Ltext0
 4125 0545 0B        		.uleb128 0xb
 4126 0546 71        		.byte	0x71
 4127 0547 00        		.sleb128 0
 4128 0548 3C        		.byte	0x3c
 4129 0549 1E        		.byte	0x1e
 4130 054a 03        		.byte	0x3
 4131 054b 0000 0000 		.long	semaphore+8
 4132 054f 22        		.byte	0x22
 4133 0550 9F        		.byte	0x9f
 4134 0551 04        		.byte	0x4
 4135 0552 CC04      		.uleb128 .LVL63-.Ltext0
 4136 0554 FE04      		.uleb128 .LVL73-.Ltext0
 4137 0556 0C        		.uleb128 0xc
 4138 0557 91        		.byte	0x91
 4139 0558 70        		.sleb128 -16
 4140 0559 06        		.byte	0x6
 4141 055a 3C        		.byte	0x3c
 4142 055b 1E        		.byte	0x1e
 4143 055c 03        		.byte	0x3
 4144 055d 0000 0000 		.long	semaphore+8
 4145 0561 22        		.byte	0x22
 4146 0562 9F        		.byte	0x9f
 4147 0563 04        		.byte	0x4
 4148 0564 A805      		.uleb128 .LVL76-.Ltext0
 4149 0566 B005      		.uleb128 .LVL77-.Ltext0
 4150 0568 0B        		.uleb128 0xb
 4151 0569 71        		.byte	0x71
 4152 056a 00        		.sleb128 0
 4153 056b 3C        		.byte	0x3c
 4154 056c 1E        		.byte	0x1e
 4155 056d 03        		.byte	0x3
 4156 056e 0000 0000 		.long	semaphore+8
 4157 0572 22        		.byte	0x22


 4158 0573 9F        		.byte	0x9f
 4159 0574 00        		.byte	0
 4160               	.LVUS23:
 4161 0575 00        		.uleb128 .LVU201
 4162 0576 00        		.uleb128 .LVU206
 4163 0577 00        		.uleb128 .LVU206
 4164 0578 01        		.uleb128 .LVU220
 4165 0579 00        		.uleb128 .LVU244
 4166 057a 00        		.uleb128 .LVU246
 4167               	.LLST23:
 4168 057b 04        		.byte	0x4
 4169 057c C404      		.uleb128 .LVL62-.Ltext0
 4170 057e D004      		.uleb128 .LVL64-.Ltext0
 4171 0580 01        		.uleb128 0x1
 4172 0581 50        		.byte	0x50
 4173 0582 04        		.byte	0x4
 4174 0583 D004      		.uleb128 .LVL64-.Ltext0
 4175 0585 FE04      		.uleb128 .LVL73-.Ltext0
 4176 0587 01        		.uleb128 0x1
 4177 0588 51        		.byte	0x51
 4178 0589 04        		.byte	0x4
 4179 058a A805      		.uleb128 .LVL76-.Ltext0
 4180 058c B005      		.uleb128 .LVL77-.Ltext0
 4181 058e 01        		.uleb128 0x1
 4182 058f 50        		.byte	0x50
 4183 0590 00        		.byte	0
 4184               	.LVUS24:
 4185 0591 00        		.uleb128 .LVU207
 4186 0592 00        		.uleb128 .LVU211
 4187 0593 00        		.uleb128 .LVU211
 4188 0594 00        		.uleb128 .LVU212
 4189 0595 00        		.uleb128 .LVU212
 4190 0596 00        		.uleb128 .LVU213
 4191 0597 00        		.uleb128 .LVU213
 4192 0598 00        		.uleb128 .LVU214
 4193 0599 00        		.uleb128 .LVU214
 4194 059a 00        		.uleb128 .LVU215
 4195 059b 00        		.uleb128 .LVU215
 4196 059c 00        		.uleb128 .LVU216
 4197 059d 00        		.uleb128 .LVU216
 4198 059e 00        		.uleb128 .LVU217
 4199               	.LLST24:
 4200 059f 04        		.byte	0x4
 4201 05a0 DC04      		.uleb128 .LVL65-.Ltext0
 4202 05a2 E004      		.uleb128 .LVL66-.Ltext0
 4203 05a4 01        		.uleb128 0x1
 4204 05a5 50        		.byte	0x50
 4205 05a6 04        		.byte	0x4
 4206 05a7 E004      		.uleb128 .LVL66-.Ltext0
 4207 05a9 E204      		.uleb128 .LVL67-.Ltext0
 4208 05ab 11        		.uleb128 0x11
 4209 05ac 71        		.byte	0x71
 4210 05ad 00        		.sleb128 0
 4211 05ae 71        		.byte	0x71
 4212 05af 00        		.sleb128 0
 4213 05b0 22        		.byte	0x22
 4214 05b1 31        		.byte	0x31


 4215 05b2 24        		.byte	0x24
 4216 05b3 71        		.byte	0x71
 4217 05b4 00        		.sleb128 0
 4218 05b5 22        		.byte	0x22
 4219 05b6 32        		.byte	0x32
 4220 05b7 24        		.byte	0x24
 4221 05b8 78        		.byte	0x78
 4222 05b9 00        		.sleb128 0
 4223 05ba 22        		.byte	0x22
 4224 05bb 23        		.byte	0x23
 4225 05bc 10        		.uleb128 0x10
 4226 05bd 04        		.byte	0x4
 4227 05be E204      		.uleb128 .LVL67-.Ltext0
 4228 05c0 E404      		.uleb128 .LVL68-.Ltext0
 4229 05c2 0F        		.uleb128 0xf
 4230 05c3 70        		.byte	0x70
 4231 05c4 00        		.sleb128 0
 4232 05c5 70        		.byte	0x70
 4233 05c6 00        		.sleb128 0
 4234 05c7 22        		.byte	0x22
 4235 05c8 71        		.byte	0x71
 4236 05c9 00        		.sleb128 0
 4237 05ca 22        		.byte	0x22
 4238 05cb 32        		.byte	0x32
 4239 05cc 24        		.byte	0x24
 4240 05cd 78        		.byte	0x78
 4241 05ce 00        		.sleb128 0
 4242 05cf 22        		.byte	0x22
 4243 05d0 23        		.byte	0x23
 4244 05d1 10        		.uleb128 0x10
 4245 05d2 04        		.byte	0x4
 4246 05d3 E404      		.uleb128 .LVL68-.Ltext0
 4247 05d5 E604      		.uleb128 .LVL69-.Ltext0
 4248 05d7 0C        		.uleb128 0xc
 4249 05d8 70        		.byte	0x70
 4250 05d9 00        		.sleb128 0
 4251 05da 71        		.byte	0x71
 4252 05db 00        		.sleb128 0
 4253 05dc 22        		.byte	0x22
 4254 05dd 32        		.byte	0x32
 4255 05de 24        		.byte	0x24
 4256 05df 78        		.byte	0x78
 4257 05e0 00        		.sleb128 0
 4258 05e1 22        		.byte	0x22
 4259 05e2 23        		.byte	0x23
 4260 05e3 10        		.uleb128 0x10
 4261 05e4 04        		.byte	0x4
 4262 05e5 E604      		.uleb128 .LVL69-.Ltext0
 4263 05e7 E804      		.uleb128 .LVL70-.Ltext0
 4264 05e9 0C        		.uleb128 0xc
 4265 05ea 70        		.byte	0x70
 4266 05eb 00        		.sleb128 0
 4267 05ec 70        		.byte	0x70
 4268 05ed 00        		.sleb128 0
 4269 05ee 22        		.byte	0x22
 4270 05ef 31        		.byte	0x31
 4271 05f0 24        		.byte	0x24


 4272 05f1 78        		.byte	0x78
 4273 05f2 00        		.sleb128 0
 4274 05f3 22        		.byte	0x22
 4275 05f4 23        		.byte	0x23
 4276 05f5 10        		.uleb128 0x10
 4277 05f6 04        		.byte	0x4
 4278 05f7 E804      		.uleb128 .LVL70-.Ltext0
 4279 05f9 EA04      		.uleb128 .LVL71-.Ltext0
 4280 05fb 0A        		.uleb128 0xa
 4281 05fc 78        		.byte	0x78
 4282 05fd 00        		.sleb128 0
 4283 05fe 70        		.byte	0x70
 4284 05ff 00        		.sleb128 0
 4285 0600 22        		.byte	0x22
 4286 0601 70        		.byte	0x70
 4287 0602 00        		.sleb128 0
 4288 0603 22        		.byte	0x22
 4289 0604 23        		.byte	0x23
 4290 0605 10        		.uleb128 0x10
 4291 0606 04        		.byte	0x4
 4292 0607 EA04      		.uleb128 .LVL71-.Ltext0
 4293 0609 EE04      		.uleb128 .LVL72-.Ltext0
 4294 060b 07        		.uleb128 0x7
 4295 060c 78        		.byte	0x78
 4296 060d 00        		.sleb128 0
 4297 060e 70        		.byte	0x70
 4298 060f 00        		.sleb128 0
 4299 0610 22        		.byte	0x22
 4300 0611 23        		.byte	0x23
 4301 0612 10        		.uleb128 0x10
 4302 0613 00        		.byte	0
 4303               	.LVUS27:
 4304 0614 05        		.uleb128 .LVU224
 4305 0615 01        		.uleb128 .LVU238
 4306 0616 04        		.uleb128 .LVU250
 4307 0617 00        		.uleb128 0
 4308               	.LLST27:
 4309 0618 04        		.byte	0x4
 4310 0619 FE04      		.uleb128 .LVL73-.Ltext0
 4311 061b 9C05      		.uleb128 .LVL75-.Ltext0
 4312 061d 06        		.uleb128 0x6
 4313 061e 03        		.byte	0x3
 4314 061f 0000 0000 		.long	ready
 4315 0623 9F        		.byte	0x9f
 4316 0624 04        		.byte	0x4
 4317 0625 B005      		.uleb128 .LVL77-.Ltext0
 4318 0627 BA05      		.uleb128 .LFE10-.Ltext0
 4319 0629 06        		.uleb128 0x6
 4320 062a 03        		.byte	0x3
 4321 062b 0000 0000 		.long	ready
 4322 062f 9F        		.byte	0x9f
 4323 0630 00        		.byte	0
 4324               	.LVUS28:
 4325 0631 00        		.uleb128 .LVU227
 4326 0632 01        		.uleb128 .LVU238
 4327 0633 00        		.uleb128 .LVU253
 4328 0634 00        		.uleb128 0


 4329               	.LLST28:
 4330 0635 04        		.byte	0x4
 4331 0636 8405      		.uleb128 .LVL74-.Ltext0
 4332 0638 9C05      		.uleb128 .LVL75-.Ltext0
 4333 063a 01        		.uleb128 0x1
 4334 063b 51        		.byte	0x51
 4335 063c 04        		.byte	0x4
 4336 063d B605      		.uleb128 .LVL78-.Ltext0
 4337 063f BA05      		.uleb128 .LFE10-.Ltext0
 4338 0641 01        		.uleb128 0x1
 4339 0642 51        		.byte	0x51
 4340 0643 00        		.byte	0
 4341               	.LVUS29:
 4342 0644 01        		.uleb128 .LVU258
 4343 0645 01        		.uleb128 .LVU267
 4344               	.LLST29:
 4345 0646 04        		.byte	0x4
 4346 0647 C005      		.uleb128 .LVL80-.Ltext0
 4347 0649 EC05      		.uleb128 .LVL82-.Ltext0
 4348 064b 0B        		.uleb128 0xb
 4349 064c 71        		.byte	0x71
 4350 064d 00        		.sleb128 0
 4351 064e 3C        		.byte	0x3c
 4352 064f 1E        		.byte	0x1e
 4353 0650 03        		.byte	0x3
 4354 0651 0000 0000 		.long	semaphore+8
 4355 0655 22        		.byte	0x22
 4356 0656 9F        		.byte	0x9f
 4357 0657 00        		.byte	0
 4358               	.LVUS30:
 4359 0658 00        		.uleb128 .LVU261
 4360 0659 01        		.uleb128 .LVU267
 4361               	.LLST30:
 4362 065a 04        		.byte	0x4
 4363 065b D405      		.uleb128 .LVL81-.Ltext0
 4364 065d EC05      		.uleb128 .LVL82-.Ltext0
 4365 065f 01        		.uleb128 0x1
 4366 0660 52        		.byte	0x52
 4367 0661 00        		.byte	0
 4368               	.LVUS32:
 4369 0662 01        		.uleb128 .LVU267
 4370 0663 00        		.uleb128 .LVU291
 4371 0664 00        		.uleb128 .LVU292
 4372 0665 00        		.uleb128 .LVU294
 4373               	.LLST32:
 4374 0666 04        		.byte	0x4
 4375 0667 EC05      		.uleb128 .LVL82-.Ltext0
 4376 0669 AE06      		.uleb128 .LVL94-.Ltext0
 4377 066b 01        		.uleb128 0x1
 4378 066c 52        		.byte	0x52
 4379 066d 04        		.byte	0x4
 4380 066e B006      		.uleb128 .LVL95-.Ltext0
 4381 0670 B606      		.uleb128 .LVL96-.Ltext0
 4382 0672 01        		.uleb128 0x1
 4383 0673 52        		.byte	0x52
 4384 0674 00        		.byte	0
 4385               	.LVUS33:


 4386 0675 01        		.uleb128 .LVU267
 4387 0676 00        		.uleb128 .LVU294
 4388               	.LLST33:
 4389 0677 04        		.byte	0x4
 4390 0678 EC05      		.uleb128 .LVL82-.Ltext0
 4391 067a B606      		.uleb128 .LVL96-.Ltext0
 4392 067c 06        		.uleb128 0x6
 4393 067d 03        		.byte	0x3
 4394 067e 0000 0000 		.long	ready
 4395 0682 9F        		.byte	0x9f
 4396 0683 00        		.byte	0
 4397               	.LVUS34:
 4398 0684 00        		.uleb128 .LVU271
 4399 0685 00        		.uleb128 .LVU276
 4400 0686 00        		.uleb128 .LVU276
 4401 0687 00        		.uleb128 .LVU292
 4402 0688 00        		.uleb128 .LVU292
 4403 0689 00        		.uleb128 .LVU294
 4404               	.LLST34:
 4405 068a 04        		.byte	0x4
 4406 068b F205      		.uleb128 .LVL83-.Ltext0
 4407 068d FE05      		.uleb128 .LVL85-.Ltext0
 4408 068f 01        		.uleb128 0x1
 4409 0690 50        		.byte	0x50
 4410 0691 04        		.byte	0x4
 4411 0692 FE05      		.uleb128 .LVL85-.Ltext0
 4412 0694 B006      		.uleb128 .LVL95-.Ltext0
 4413 0696 01        		.uleb128 0x1
 4414 0697 51        		.byte	0x51
 4415 0698 04        		.byte	0x4
 4416 0699 B006      		.uleb128 .LVL95-.Ltext0
 4417 069b B606      		.uleb128 .LVL96-.Ltext0
 4418 069d 01        		.uleb128 0x1
 4419 069e 50        		.byte	0x50
 4420 069f 00        		.byte	0
 4421               	.LVUS35:
 4422 06a0 00        		.uleb128 .LVU277
 4423 06a1 00        		.uleb128 .LVU281
 4424 06a2 00        		.uleb128 .LVU281
 4425 06a3 00        		.uleb128 .LVU282
 4426 06a4 00        		.uleb128 .LVU282
 4427 06a5 00        		.uleb128 .LVU283
 4428 06a6 00        		.uleb128 .LVU283
 4429 06a7 00        		.uleb128 .LVU284
 4430 06a8 00        		.uleb128 .LVU284
 4431 06a9 00        		.uleb128 .LVU285
 4432 06aa 00        		.uleb128 .LVU285
 4433 06ab 00        		.uleb128 .LVU286
 4434 06ac 00        		.uleb128 .LVU286
 4435 06ad 00        		.uleb128 .LVU287
 4436               	.LLST35:
 4437 06ae 04        		.byte	0x4
 4438 06af 8A06      		.uleb128 .LVL86-.Ltext0
 4439 06b1 8E06      		.uleb128 .LVL87-.Ltext0
 4440 06b3 01        		.uleb128 0x1
 4441 06b4 50        		.byte	0x50
 4442 06b5 04        		.byte	0x4


 4443 06b6 8E06      		.uleb128 .LVL87-.Ltext0
 4444 06b8 9006      		.uleb128 .LVL88-.Ltext0
 4445 06ba 11        		.uleb128 0x11
 4446 06bb 71        		.byte	0x71
 4447 06bc 00        		.sleb128 0
 4448 06bd 71        		.byte	0x71
 4449 06be 00        		.sleb128 0
 4450 06bf 22        		.byte	0x22
 4451 06c0 31        		.byte	0x31
 4452 06c1 24        		.byte	0x24
 4453 06c2 71        		.byte	0x71
 4454 06c3 00        		.sleb128 0
 4455 06c4 22        		.byte	0x22
 4456 06c5 32        		.byte	0x32
 4457 06c6 24        		.byte	0x24
 4458 06c7 78        		.byte	0x78
 4459 06c8 00        		.sleb128 0
 4460 06c9 22        		.byte	0x22
 4461 06ca 23        		.byte	0x23
 4462 06cb 10        		.uleb128 0x10
 4463 06cc 04        		.byte	0x4
 4464 06cd 9006      		.uleb128 .LVL88-.Ltext0
 4465 06cf 9206      		.uleb128 .LVL89-.Ltext0
 4466 06d1 0F        		.uleb128 0xf
 4467 06d2 70        		.byte	0x70
 4468 06d3 00        		.sleb128 0
 4469 06d4 70        		.byte	0x70
 4470 06d5 00        		.sleb128 0
 4471 06d6 22        		.byte	0x22
 4472 06d7 71        		.byte	0x71
 4473 06d8 00        		.sleb128 0
 4474 06d9 22        		.byte	0x22
 4475 06da 32        		.byte	0x32
 4476 06db 24        		.byte	0x24
 4477 06dc 78        		.byte	0x78
 4478 06dd 00        		.sleb128 0
 4479 06de 22        		.byte	0x22
 4480 06df 23        		.byte	0x23
 4481 06e0 10        		.uleb128 0x10
 4482 06e1 04        		.byte	0x4
 4483 06e2 9206      		.uleb128 .LVL89-.Ltext0
 4484 06e4 9406      		.uleb128 .LVL90-.Ltext0
 4485 06e6 0C        		.uleb128 0xc
 4486 06e7 70        		.byte	0x70
 4487 06e8 00        		.sleb128 0
 4488 06e9 71        		.byte	0x71
 4489 06ea 00        		.sleb128 0
 4490 06eb 22        		.byte	0x22
 4491 06ec 32        		.byte	0x32
 4492 06ed 24        		.byte	0x24
 4493 06ee 78        		.byte	0x78
 4494 06ef 00        		.sleb128 0
 4495 06f0 22        		.byte	0x22
 4496 06f1 23        		.byte	0x23
 4497 06f2 10        		.uleb128 0x10
 4498 06f3 04        		.byte	0x4
 4499 06f4 9406      		.uleb128 .LVL90-.Ltext0


 4500 06f6 9606      		.uleb128 .LVL91-.Ltext0
 4501 06f8 0C        		.uleb128 0xc
 4502 06f9 70        		.byte	0x70
 4503 06fa 00        		.sleb128 0
 4504 06fb 70        		.byte	0x70
 4505 06fc 00        		.sleb128 0
 4506 06fd 22        		.byte	0x22
 4507 06fe 31        		.byte	0x31
 4508 06ff 24        		.byte	0x24
 4509 0700 78        		.byte	0x78
 4510 0701 00        		.sleb128 0
 4511 0702 22        		.byte	0x22
 4512 0703 23        		.byte	0x23
 4513 0704 10        		.uleb128 0x10
 4514 0705 04        		.byte	0x4
 4515 0706 9606      		.uleb128 .LVL91-.Ltext0
 4516 0708 9806      		.uleb128 .LVL92-.Ltext0
 4517 070a 0A        		.uleb128 0xa
 4518 070b 78        		.byte	0x78
 4519 070c 00        		.sleb128 0
 4520 070d 70        		.byte	0x70
 4521 070e 00        		.sleb128 0
 4522 070f 22        		.byte	0x22
 4523 0710 70        		.byte	0x70
 4524 0711 00        		.sleb128 0
 4525 0712 22        		.byte	0x22
 4526 0713 23        		.byte	0x23
 4527 0714 10        		.uleb128 0x10
 4528 0715 04        		.byte	0x4
 4529 0716 9806      		.uleb128 .LVL92-.Ltext0
 4530 0718 9C06      		.uleb128 .LVL93-.Ltext0
 4531 071a 07        		.uleb128 0x7
 4532 071b 78        		.byte	0x78
 4533 071c 00        		.sleb128 0
 4534 071d 70        		.byte	0x70
 4535 071e 00        		.sleb128 0
 4536 071f 22        		.byte	0x22
 4537 0720 23        		.byte	0x23
 4538 0721 10        		.uleb128 0x10
 4539 0722 00        		.byte	0
 4540               	.Ldebug_loc3:
 4541               		.section	.debug_aranges,"",@progbits
 4542 0000 0000 001C 		.long	0x1c
 4543 0004 0002      		.word	0x2
 4544 0006 0000 0000 		.long	.Ldebug_info0
 4545 000a 04        		.byte	0x4
 4546 000b 00        		.byte	0
 4547 000c 0000      		.word	0
 4548 000e 0000      		.word	0
 4549 0010 0000 0000 		.long	.Ltext0
 4550 0014 0000 047C 		.long	.Letext0-.Ltext0
 4551 0018 0000 0000 		.long	0
 4552 001c 0000 0000 		.long	0
 4553               		.section	.debug_rnglists,"",@progbits
 4554               	.Ldebug_ranges0:
 4555 0000 0000 00A9 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 4556               	.Ldebug_ranges2:


 4557 0004 0005      		.word	0x5
 4558 0006 04        		.byte	0x4
 4559 0007 00        		.byte	0
 4560 0008 0000 0000 		.long	0
 4561               	.LLRL2:
 4562 000c 04        		.byte	0x4
 4563 000d 60        		.uleb128 .LBB19-.Ltext0
 4564 000e 7A        		.uleb128 .LBE19-.Ltext0
 4565 000f 04        		.byte	0x4
 4566 0010 8001      		.uleb128 .LBB27-.Ltext0
 4567 0012 8802      		.uleb128 .LBE27-.Ltext0
 4568 0014 04        		.byte	0x4
 4569 0015 8E02      		.uleb128 .LBB28-.Ltext0
 4570 0017 9402      		.uleb128 .LBE28-.Ltext0
 4571 0019 00        		.byte	0
 4572               	.LLRL7:
 4573 001a 04        		.byte	0x4
 4574 001b D201      		.uleb128 .LBB22-.Ltext0
 4575 001d 8802      		.uleb128 .LBE22-.Ltext0
 4576 001f 04        		.byte	0x4
 4577 0020 8E02      		.uleb128 .LBB26-.Ltext0
 4578 0022 9402      		.uleb128 .LBE26-.Ltext0
 4579 0024 00        		.byte	0
 4580               	.LLRL20:
 4581 0025 04        		.byte	0x4
 4582 0026 B004      		.uleb128 .LBB44-.Ltext0
 4583 0028 FE04      		.uleb128 .LBE44-.Ltext0
 4584 002a 04        		.byte	0x4
 4585 002b A805      		.uleb128 .LBB57-.Ltext0
 4586 002d B005      		.uleb128 .LBE57-.Ltext0
 4587 002f 00        		.byte	0
 4588               	.LLRL25:
 4589 0030 04        		.byte	0x4
 4590 0031 FE04      		.uleb128 .LBB48-.Ltext0
 4591 0033 A205      		.uleb128 .LBE48-.Ltext0
 4592 0035 04        		.byte	0x4
 4593 0036 B005      		.uleb128 .LBB58-.Ltext0
 4594 0038 BA05      		.uleb128 .LBE58-.Ltext0
 4595 003a 00        		.byte	0
 4596               	.LLRL26:
 4597 003b 04        		.byte	0x4
 4598 003c FE04      		.uleb128 .LBB50-.Ltext0
 4599 003e 8605      		.uleb128 .LBE50-.Ltext0
 4600 0040 04        		.byte	0x4
 4601 0041 8805      		.uleb128 .LBB54-.Ltext0
 4602 0043 9C05      		.uleb128 .LBE54-.Ltext0
 4603 0045 04        		.byte	0x4
 4604 0046 B005      		.uleb128 .LBB55-.Ltext0
 4605 0048 BA05      		.uleb128 .LBE55-.Ltext0
 4606 004a 00        		.byte	0
 4607               	.LLRL31:
 4608 004b 04        		.byte	0x4
 4609 004c EC05      		.uleb128 .LBB68-.Ltext0
 4610 004e AC06      		.uleb128 .LBE68-.Ltext0
 4611 0050 04        		.byte	0x4
 4612 0051 B006      		.uleb128 .LBB72-.Ltext0
 4613 0053 B606      		.uleb128 .LBE72-.Ltext0


 4614 0055 00        		.byte	0
 4615               	.LLRL36:
 4616 0056 04        		.byte	0x4
 4617 0057 DC06      		.uleb128 .LBB82-.Ltext0
 4618 0059 D607      		.uleb128 .LBE82-.Ltext0
 4619 005b 04        		.byte	0x4
 4620 005c D607      		.uleb128 .LBB98-.Ltext0
 4621 005e DC07      		.uleb128 .LBE98-.Ltext0
 4622 0060 00        		.byte	0
 4623               	.LLRL38:
 4624 0061 04        		.byte	0x4
 4625 0062 E206      		.uleb128 .LBB84-.Ltext0
 4626 0064 A207      		.uleb128 .LBE84-.Ltext0
 4627 0066 04        		.byte	0x4
 4628 0067 AC07      		.uleb128 .LBB95-.Ltext0
 4629 0069 B407      		.uleb128 .LBE95-.Ltext0
 4630 006b 00        		.byte	0
 4631               	.LLRL43:
 4632 006c 04        		.byte	0x4
 4633 006d A207      		.uleb128 .LBB88-.Ltext0
 4634 006f AC07      		.uleb128 .LBE88-.Ltext0
 4635 0071 04        		.byte	0x4
 4636 0072 B407      		.uleb128 .LBB96-.Ltext0
 4637 0074 D607      		.uleb128 .LBE96-.Ltext0
 4638 0076 00        		.byte	0
 4639               	.LLRL44:
 4640 0077 04        		.byte	0x4
 4641 0078 A207      		.uleb128 .LBB90-.Ltext0
 4642 007a AA07      		.uleb128 .LBE90-.Ltext0
 4643 007c 04        		.byte	0x4
 4644 007d B407      		.uleb128 .LBB93-.Ltext0
 4645 007f D007      		.uleb128 .LBE93-.Ltext0
 4646 0081 00        		.byte	0
 4647               	.LLRL47:
 4648 0082 04        		.byte	0x4
 4649 0083 8208      		.uleb128 .LBB106-.Ltext0
 4650 0085 CE08      		.uleb128 .LBE106-.Ltext0
 4651 0087 04        		.byte	0x4
 4652 0088 D208      		.uleb128 .LBB118-.Ltext0
 4653 008a D808      		.uleb128 .LBE118-.Ltext0
 4654 008c 04        		.byte	0x4
 4655 008d DC08      		.uleb128 .LBB119-.Ltext0
 4656 008f FC08      		.uleb128 .LBE119-.Ltext0
 4657 0091 00        		.byte	0
 4658               	.LLRL49:
 4659 0092 04        		.byte	0x4
 4660 0093 8208      		.uleb128 .LBB107-.Ltext0
 4661 0095 8E08      		.uleb128 .LBE107-.Ltext0
 4662 0097 04        		.byte	0x4
 4663 0098 DC08      		.uleb128 .LBB116-.Ltext0
 4664 009a F208      		.uleb128 .LBE116-.Ltext0
 4665 009c 00        		.byte	0
 4666               	.LLRL52:
 4667 009d 04        		.byte	0x4
 4668 009e 8E08      		.uleb128 .LBB110-.Ltext0
 4669 00a0 CE08      		.uleb128 .LBE110-.Ltext0
 4670 00a2 04        		.byte	0x4


 4671 00a3 D208      		.uleb128 .LBB115-.Ltext0
 4672 00a5 D808      		.uleb128 .LBE115-.Ltext0
 4673 00a7 04        		.byte	0x4
 4674 00a8 F208      		.uleb128 .LBB117-.Ltext0
 4675 00aa FC08      		.uleb128 .LBE117-.Ltext0
 4676 00ac 00        		.byte	0
 4677               	.Ldebug_ranges3:
 4678               		.section	.debug_line,"",@progbits
 4679               	.Ldebug_line0:
 4680 0000 0000 066E 		.section	.debug_str,"MS",@progbits,1
 4680      0003 0000 
 4680      0029 0201 
 4680      FB0E 0D00 
 4680      0101 0101 
 4681               	.LASF30:
 4682 0000 7374 6163 		.string	"stacks"
 4682      6B73 00
 4683               	.LASF15:
 4684 0007 6E65 7874 		.string	"next"
 4684      00
 4685               	.LASF48:
 4686 000c 696E 745F 		.string	"int_ssp"
 4686      7373 7000 
 4687               	.LASF55:
 4688 0014 6D74 6B5F 		.string	"mtk_c.c"
 4688      632E 6300 
 4689               	.LASF32:
 4690 001c 6669 7273 		.string	"first_task"
 4690      745F 7461 
 4690      736B 00
 4691               	.LASF18:
 4692 0027 636F 756E 		.string	"count"
 4692      7400 
 4693               	.LASF12:
 4694 002d 7374 6163 		.string	"stack_ptr"
 4694      6B5F 7074 
 4694      7200 
 4695               	.LASF34:
 4696 0037 7076 5F68 		.string	"pv_handler"
 4696      616E 646C 
 4696      6572 00
 4697               	.LASF17:
 4698 0042 5443 425F 		.string	"TCB_TYPE"
 4698      5459 5045 
 4698      00
 4699               	.LASF44:
 4700 004b 6E65 7874 		.string	"nextInLine"
 4700      496E 4C69 
 4700      6E65 00
 4701               	.LASF14:
 4702 0056 7374 6174 		.string	"status"
 4702      7573 00
 4703               	.LASF25:
 4704 005d 6E65 775F 		.string	"new_task"
 4704      7461 736B 
 4704      00
 4705               	.LASF46:


 4706 0066 696E 6974 		.string	"init_stack"
 4706      5F73 7461 
 4706      636B 00
 4707               	.LASF56:
 4708 0071 2F68 6F6D 		.string	"/home/students/22nen/1TE22129K/mtk/mtk_git/sofutojikken/jikken2/theme2/mtk"
 4708      652F 7374 
 4708      7564 656E 
 4708      7473 2F32 
 4708      326E 656E 
 4709               	.LASF24:
 4710 00bc 6375 7272 		.string	"curr_task"
 4710      5F74 6173 
 4710      6B00 
 4711               	.LASF49:
 4712 00c6 7368 6F72 		.string	"short_ssp"
 4712      745F 7373 
 4712      7000 
 4713               	.LASF50:
 4714 00d0 7365 745F 		.string	"set_task"
 4714      7461 736B 
 4714      00
 4715               	.LASF1:
 4716 00d9 756E 7369 		.string	"unsigned char"
 4716      676E 6564 
 4716      2063 6861 
 4716      7200 
 4717               	.LASF45:
 4718 00e7 7265 6D6F 		.string	"removeq"
 4718      7665 7100 
 4719               	.LASF5:
 4720 00ef 6C6F 6E67 		.string	"long unsigned int"
 4720      2075 6E73 
 4720      6967 6E65 
 4720      6420 696E 
 4720      7400 
 4721               	.LASF40:
 4722 0101 6164 6471 		.string	"addq"
 4722      00
 4723               	.LASF3:
 4724 0106 7368 6F72 		.string	"short unsigned int"
 4724      7420 756E 
 4724      7369 676E 
 4724      6564 2069 
 4724      6E74 00
 4725               	.LASF11:
 4726 0119 7461 736B 		.string	"task_addr"
 4726      5F61 6464 
 4726      7200 
 4727               	.LASF13:
 4728 0123 7072 696F 		.string	"priority"
 4728      7269 7479 
 4728      00
 4729               	.LASF21:
 4730 012c 7573 7461 		.string	"ustack"
 4730      636B 00
 4731               	.LASF28:
 4732 0133 7365 6D61 		.string	"semaphore"


 4732      7068 6F72 
 4732      6500 
 4733               	.LASF26:
 4734 013d 6E65 7874 		.string	"next_task"
 4734      5F74 6173 
 4734      6B00 
 4735               	.LASF2:
 4736 0147 7368 6F72 		.string	"short int"
 4736      7420 696E 
 4736      7400 
 4737               	.LASF39:
 4738 0151 706F 696E 		.string	"pointerToAQueue"
 4738      7465 7254 
 4738      6F41 5175 
 4738      6575 6500 
 4739               	.LASF42:
 4740 0161 746F 7049 		.string	"topID"
 4740      4400 
 4741               	.LASF54:
 4742 0167 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 4742      4331 3720 
 4742      3131 2E34 
 4742      2E30 202D 
 4742      6D63 7075 
 4743               	.LASF33:
 4744 01ab 696E 6974 		.string	"init_timer"
 4744      5F74 696D 
 4744      6572 00
 4745               	.LASF9:
 4746 01b6 756E 7369 		.string	"unsigned int"
 4746      676E 6564 
 4746      2069 6E74 
 4746      00
 4747               	.LASF35:
 4748 01c3 765F 626F 		.string	"v_body"
 4748      6479 00
 4749               	.LASF41:
 4750 01ca 6E65 7754 		.string	"newTaskID"
 4750      6173 6B49 
 4750      4400 
 4751               	.LASF7:
 4752 01d4 6C6F 6E67 		.string	"long long unsigned int"
 4752      206C 6F6E 
 4752      6720 756E 
 4752      7369 676E 
 4752      6564 2069 
 4753               	.LASF16:
 4754 01eb 5441 534B 		.string	"TASK_ID_TYPE"
 4754      5F49 445F 
 4754      5459 5045 
 4754      00
 4755               	.LASF19:
 4756 01f8 7461 736B 		.string	"task_list"
 4756      5F6C 6973 
 4756      7400 
 4757               	.LASF53:
 4758 0202 696E 6974 		.string	"init_kernel"


 4758      5F6B 6572 
 4758      6E65 6C00 
 4759               	.LASF8:
 4760 020e 6C6F 6E67 		.string	"long double"
 4760      2064 6F75 
 4760      626C 6500 
 4761               	.LASF36:
 4762 021a 705F 626F 		.string	"p_body"
 4762      6479 00
 4763               	.LASF6:
 4764 0221 6C6F 6E67 		.string	"long long int"
 4764      206C 6F6E 
 4764      6720 696E 
 4764      7400 
 4765               	.LASF10:
 4766 022f 6368 6172 		.string	"char"
 4766      00
 4767               	.LASF51:
 4768 0234 7461 736B 		.string	"task_ptr"
 4768      5F70 7472 
 4768      00
 4769               	.LASF37:
 4770 023d 7761 6B65 		.string	"wakeup"
 4770      7570 00
 4771               	.LASF31:
 4772 0244 7377 7463 		.string	"swtch"
 4772      6800 
 4773               	.LASF27:
 4774 024a 7265 6164 		.string	"ready"
 4774      7900 
 4775               	.LASF52:
 4776 0250 6265 6769 		.string	"begin_sch"
 4776      6E5F 7363 
 4776      6800 
 4777               	.LASF22:
 4778 025a 7373 7461 		.string	"sstack"
 4778      636B 00
 4779               	.LASF20:
 4780 0261 5345 4D41 		.string	"SEMAPHORE_TYPE"
 4780      5048 4F52 
 4780      455F 5459 
 4780      5045 00
 4781               	.LASF4:
 4782 0270 6C6F 6E67 		.string	"long int"
 4782      2069 6E74 
 4782      00
 4783               	.LASF43:
 4784 0279 6375 7272 		.string	"currentTaskID"
 4784      656E 7454 
 4784      6173 6B49 
 4784      4400 
 4785               	.LASF47:
 4786 0287 7461 736B 		.string	"task_id"
 4786      5F69 6400 
 4787               	.LASF0:
 4788 028f 7369 676E 		.string	"signed char"
 4788      6564 2063 


 4788      6861 7200 
 4789               	.LASF23:
 4790 029b 5354 4143 		.string	"STACK_TYPE"
 4790      4B5F 5459 
 4790      5045 00
 4791               	.LASF38:
 4792 02a6 736C 6565 		.string	"sleep"
 4792      7000 
 4793               	.LASF57:
 4794 02ac 7363 6865 		.string	"sched"
 4794      6400 
 4795               	.LASF29:
 4796 02b2 7461 736B 		.string	"task_tab"
 4796      5F74 6162 
 4796      00
 4797               		.ident	"GCC: (GNU) 11.4.0"




   1               	.global outbyte
   2               	
   3               	.include "equdefs.inc"
   1               	    .equ    SYSCALL_NUM_GETSTRING, 1 
   2               	    .equ    SYSCALL_NUM_PUTSTRING, 2 
   3               	    .equ    SYSCALL_NUM_RESET_TIMER, 3 
   4               	    .equ    SYSCALL_NUM_SET_TIMER, 4 
   5               	
   6               	    .equ    REGBASE, 0xFFF000 
   7               	    .equ    IOBASE, 0x00d00000
   8               	
   9               	    .equ    IVR, REGBASE+0x300 
  10               	    .equ    IMR, REGBASE+0x304 
  11               	    .equ    ISR, REGBASE+0x30c 
  12               	    .equ    IPR, REGBASE+0x310 
  13               	    
  14               	    .equ    TCTL1, REGBASE+0x600 	
  15               	    .equ    TPRER1, REGBASE+0x602 	
  16               	    .equ    TCMP1, REGBASE+0x604 	
  17               	    .equ    TCN1, REGBASE+0x608 	
  18               	    .equ    TSTAT1, REGBASE+0x60a 	
  19               	    
  20               	    .equ    USTCNT1, REGBASE+0x900 	
  21               	    .equ    UBAUD1, REGBASE+0x902 	
  22               	    .equ    URX1, REGBASE+0x904 	
  23               	    .equ    UTX1, REGBASE+0x906 	
  24               	    
  25               	    .equ    LED7, IOBASE+0x000002f 	
  26               	    .equ    LED6, IOBASE+0x000002d 	
  27               	    .equ    LED5, IOBASE+0x000002b
  28               	    .equ    LED4, IOBASE+0x0000029
  29               	    .equ    LED3, IOBASE+0x000003f
  30               	    .equ    LED2, IOBASE+0x000003d
  31               	    .equ    LED1, IOBASE+0x000003b
  32               	    .equ    LED0, IOBASE+0x0000039
  33               	    .equ    PUSHSW, 0xFFF419 		
   4               	
   5               	.text
   6               	.even
   7               	
   8               	outbyte:
   9 0000 13EF 0007 	    move.b  7(%sp), BUF_OUTBYTE
   9      0000 0000 
  10 0008 48E7 F000 	    movem.l %d0-%d3, -(%sp)
  11               	outbyte_start:
  12 000c 7002      	    move.l	#SYSCALL_NUM_PUTSTRING, %d0             /* PUTSTRING */
  13 000e 7200      	    move.l	#0, %d1
  14 0010 243C 0000 	    move.l	#BUF_OUTBYTE, %d2
  14      0000 
  15 0016 7601      	    move.l	#1, %d3
  16 0018 4E40      	    trap	#0
  17               	
  18 001a 0C00 0001 	    cmpi.b	#1, %d0
  19 001e 6600 FFEC 	    bne     outbyte_start
  20               	
  21 0022 4CDF 000F 	    movem.l (%sp)+, %d0-%d3
  22 0026 4E75      	    rts


  23               	
  24               	.section .bss
  25 0000 00        	BUF_OUTBYTE:    .ds.b 1
  26 0001 00        	    .even




   1               	#NO_APP
   2               		.file	"test2.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.section	.rodata.str1.1,"aMS",@progbits,1
   7               	.LC0:
   8 0000 0A31 2025 		.string	"\n1 %d"
   8      6400 
   9               	.LC1:
  10 0006 0A74 6173 		.string	"\ntask1 finished"
  10      6B31 2066 
  10      696E 6973 
  10      6865 6400 
  11               		.text
  12               		.align	2
  13               		.globl	task1
  14               		.type	task1, @function
  15               	task1:
  16               	.LFB3:
  17               		.file 1 "test2.c"
   1:test2.c       **** #include <stdio.h>
   2:test2.c       **** #include "mtk_c.h"
   3:test2.c       **** #define MAX 1024
   4:test2.c       **** 
   5:test2.c       **** void task1(){ 
  18               		.loc 1 5 13 view -0
  19               		.cfi_startproc
  20 0000 2F0A      		move.l %a2,-(%sp)
  21               		.cfi_def_cfa_offset 8
  22               		.cfi_offset 10, -8
  23 0002 2F02      		move.l %d2,-(%sp)
  24               		.cfi_def_cfa_offset 12
  25               		.cfi_offset 2, -12
   6:test2.c       **** 
   7:test2.c       **** 	for(int i=1;i<=20;i++){
  26               		.loc 1 7 2 view .LVU1
  27               	.LBB2:
  28               		.loc 1 7 6 view .LVU2
  29               	.LVL0:
  30               		.loc 1 7 15 view .LVU3
  31               		.loc 1 7 10 is_stmt 0 view .LVU4
  32 0004 7401      		moveq #1,%d2
  33 0006 45F9 0000 		lea printf,%a2
  33      0000 
  34               	.LVL1:
  35               	.L2:
   8:test2.c       **** 	  printf("\n1 %d",i);}
  36               		.loc 1 8 4 is_stmt 1 discriminator 3 view .LVU5
  37 000c 2F02      		move.l %d2,-(%sp)
  38               		.cfi_def_cfa_offset 16
  39 000e 4879 0000 		pea .LC0
  39      0000 
  40               		.cfi_def_cfa_offset 20
  41 0014 4E92      		jsr (%a2)
  42               	.LVL2:
   7:test2.c       **** 	  printf("\n1 %d",i);}


  43               		.loc 1 7 21 discriminator 3 view .LVU6
  44 0016 5282      		addq.l #1,%d2
  45               	.LVL3:
   7:test2.c       **** 	  printf("\n1 %d",i);}
  46               		.loc 1 7 15 discriminator 3 view .LVU7
  47 0018 508F      		addq.l #8,%sp
  48               		.cfi_def_cfa_offset 12
  49 001a 7015      		moveq #21,%d0
  50 001c B082      		cmp.l %d2,%d0
  51 001e 66EC      		jne .L2
  52               	.L3:
  53               	.LBE2:
   9:test2.c       ****    
  10:test2.c       ****   	while(1){
  54               		.loc 1 10 4 discriminator 1 view .LVU8
  11:test2.c       ****   		printf("\ntask1 finished");
  55               		.loc 1 11 5 discriminator 1 view .LVU9
  56 0020 4879 0000 		pea .LC1
  56      0000 
  57               		.cfi_def_cfa_offset 16
  58 0026 4E92      		jsr (%a2)
  59               	.LVL4:
  10:test2.c       ****   		printf("\ntask1 finished");
  60               		.loc 1 10 9 discriminator 1 view .LVU10
  61               		.loc 1 11 5 is_stmt 0 discriminator 1 view .LVU11
  62 0028 588F      		addq.l #4,%sp
  63               		.cfi_def_cfa_offset 12
  10:test2.c       ****   		printf("\ntask1 finished");
  64               		.loc 1 10 4 is_stmt 1 discriminator 1 view .LVU12
  65               		.loc 1 11 5 discriminator 1 view .LVU13
  66 002a 4879 0000 		pea .LC1
  66      0000 
  67               		.cfi_def_cfa_offset 16
  68 0030 4E92      		jsr (%a2)
  69               	.LVL5:
  10:test2.c       ****   		printf("\ntask1 finished");
  70               		.loc 1 10 9 discriminator 1 view .LVU14
  71               		.loc 1 11 5 is_stmt 0 discriminator 1 view .LVU15
  72 0032 588F      		addq.l #4,%sp
  73               		.cfi_def_cfa_offset 12
  74 0034 60EA      		jra .L3
  75               		.cfi_endproc
  76               	.LFE3:
  77               		.size	task1, .-task1
  78               		.section	.rodata.str1.1
  79               	.LC2:
  80 0016 0A32 2025 		.string	"\n2 %d"
  80      6400 
  81               	.LC3:
  82 001c 0A74 6173 		.string	"\ntask2 finished"
  82      6B32 2066 
  82      696E 6973 
  82      6865 6400 
  83               		.text
  84               		.align	2
  85               		.globl	task2
  86               		.type	task2, @function


  87               	task2:
  88               	.LFB4:
  12:test2.c       ****   		}
  13:test2.c       ****   	}
  14:test2.c       **** void task2()
  15:test2.c       **** { 
  89               		.loc 1 15 1 is_stmt 1 view -0
  90               		.cfi_startproc
  91 0036 2F0A      		move.l %a2,-(%sp)
  92               		.cfi_def_cfa_offset 8
  93               		.cfi_offset 10, -8
  94 0038 2F02      		move.l %d2,-(%sp)
  95               		.cfi_def_cfa_offset 12
  96               		.cfi_offset 2, -12
  16:test2.c       ****     // task2 definition
  17:test2.c       ****     
  18:test2.c       **** 	for(int i=1;i<=20;i++){
  97               		.loc 1 18 2 view .LVU17
  98               	.LBB3:
  99               		.loc 1 18 6 view .LVU18
 100               	.LVL6:
 101               		.loc 1 18 15 view .LVU19
 102               		.loc 1 18 10 is_stmt 0 view .LVU20
 103 003a 7401      		moveq #1,%d2
 104 003c 45F9 0000 		lea printf,%a2
 104      0000 
 105               	.LVL7:
 106               	.L8:
  19:test2.c       **** 		printf("\n2 %d",i);
 107               		.loc 1 19 3 is_stmt 1 discriminator 3 view .LVU21
 108 0042 2F02      		move.l %d2,-(%sp)
 109               		.cfi_def_cfa_offset 16
 110 0044 4879 0000 		pea .LC2
 110      0000 
 111               		.cfi_def_cfa_offset 20
 112 004a 4E92      		jsr (%a2)
 113               	.LVL8:
  18:test2.c       **** 		printf("\n2 %d",i);
 114               		.loc 1 18 21 discriminator 3 view .LVU22
 115 004c 5282      		addq.l #1,%d2
 116               	.LVL9:
  18:test2.c       **** 		printf("\n2 %d",i);
 117               		.loc 1 18 15 discriminator 3 view .LVU23
 118 004e 508F      		addq.l #8,%sp
 119               		.cfi_def_cfa_offset 12
 120 0050 7015      		moveq #21,%d0
 121 0052 B082      		cmp.l %d2,%d0
 122 0054 66EC      		jne .L8
 123               	.L9:
 124               	.LBE3:
  20:test2.c       ****   	}
  21:test2.c       ****       
  22:test2.c       ****   	while(1){
 125               		.loc 1 22 4 discriminator 1 view .LVU24
  23:test2.c       ****   		printf("\ntask2 finished");
 126               		.loc 1 23 5 discriminator 1 view .LVU25
 127 0056 4879 0000 		pea .LC3


 127      0000 
 128               		.cfi_def_cfa_offset 16
 129 005c 4E92      		jsr (%a2)
 130               	.LVL10:
  22:test2.c       ****   		printf("\ntask2 finished");
 131               		.loc 1 22 9 discriminator 1 view .LVU26
 132               		.loc 1 23 5 is_stmt 0 discriminator 1 view .LVU27
 133 005e 588F      		addq.l #4,%sp
 134               		.cfi_def_cfa_offset 12
  22:test2.c       ****   		printf("\ntask2 finished");
 135               		.loc 1 22 4 is_stmt 1 discriminator 1 view .LVU28
 136               		.loc 1 23 5 discriminator 1 view .LVU29
 137 0060 4879 0000 		pea .LC3
 137      0000 
 138               		.cfi_def_cfa_offset 16
 139 0066 4E92      		jsr (%a2)
 140               	.LVL11:
  22:test2.c       ****   		printf("\ntask2 finished");
 141               		.loc 1 22 9 discriminator 1 view .LVU30
 142               		.loc 1 23 5 is_stmt 0 discriminator 1 view .LVU31
 143 0068 588F      		addq.l #4,%sp
 144               		.cfi_def_cfa_offset 12
 145 006a 60EA      		jra .L9
 146               		.cfi_endproc
 147               	.LFE4:
 148               		.size	task2, .-task2
 149               		.section	.text.startup,"ax",@progbits
 150               		.align	2
 151               		.globl	main
 152               		.type	main, @function
 153               	main:
 154               	.LFB5:
  24:test2.c       ****   	}
  25:test2.c       **** }
  26:test2.c       **** 
  27:test2.c       **** int main(){
 155               		.loc 1 27 11 is_stmt 1 view -0
 156               		.cfi_startproc
 157 0000 2F0A      		move.l %a2,-(%sp)
 158               		.cfi_def_cfa_offset 8
 159               		.cfi_offset 10, -8
  28:test2.c       ****   //hardware initialization
  29:test2.c       ****   init_kernel(); // maybe?
 160               		.loc 1 29 3 view .LVU33
 161 0002 4EB9 0000 		jsr init_kernel
 161      0000 
 162               	.LVL12:
  30:test2.c       ****   
  31:test2.c       ****   //system setting
  32:test2.c       ****   set_task(task1);
 163               		.loc 1 32 3 view .LVU34
 164 0008 4879 0000 		pea task1
 164      0000 
 165               		.cfi_def_cfa_offset 12
 166 000e 45F9 0000 		lea set_task,%a2
 166      0000 
 167 0014 4E92      		jsr (%a2)


 168               	.LVL13:
  33:test2.c       ****   set_task(task2);
 169               		.loc 1 33 3 view .LVU35
 170 0016 4879 0000 		pea task2
 170      0000 
 171               		.cfi_def_cfa_offset 16
 172 001c 4E92      		jsr (%a2)
 173               	.LVL14:
  34:test2.c       ****   begin_sch(); //start multitasking
 174               		.loc 1 34 3 view .LVU36
 175 001e 4EB9 0000 		jsr begin_sch
 175      0000 
 176               	.LVL15:
  35:test2.c       ****   return 0;
 177               		.loc 1 35 3 view .LVU37
  36:test2.c       **** }
 178               		.loc 1 36 1 is_stmt 0 view .LVU38
 179 0024 508F      		addq.l #8,%sp
 180               		.cfi_def_cfa_offset 8
 181 0026 7000      		moveq #0,%d0
 182 0028 245F      		move.l (%sp)+,%a2
 183 002a 4E75      		rts
 184               		.cfi_endproc
 185               	.LFE5:
 186               		.size	main, .-main
 187               		.text
 188               	.Letext0:
 189               		.file 2 "mtk_c.h"
 190               		.file 3 "/usr/local/m68k-elf/include/stdio.h"
 191               		.file 4 "<built-in>"
 192               		.section	.debug_info,"",@progbits
 193               	.Ldebug_info0:
 194 0000 0000 01B4 		.long	0x1b4
 195 0004 0005      		.word	0x5
 196 0006 01        		.byte	0x1
 197 0007 04        		.byte	0x4
 198 0008 0000 0000 		.long	.Ldebug_abbrev0
 199 000c 0A        		.uleb128 0xa
 200 000d 0000 0000 		.long	.LASF15
 201 0011 1D        		.byte	0x1d
 202 0012 0000 0000 		.long	.LASF16
 203 0016 0000 0000 		.long	.LASF17
 204 001a 0000 0000 		.long	.LLRL2
 205 001e 0000 0000 		.long	0
 206 0022 0000 0000 		.long	.Ldebug_line0
 207 0026 01        		.uleb128 0x1
 208 0027 01        		.byte	0x1
 209 0028 06        		.byte	0x6
 210 0029 0000 0000 		.long	.LASF0
 211 002d 01        		.uleb128 0x1
 212 002e 01        		.byte	0x1
 213 002f 08        		.byte	0x8
 214 0030 0000 0000 		.long	.LASF1
 215 0034 01        		.uleb128 0x1
 216 0035 02        		.byte	0x2
 217 0036 05        		.byte	0x5
 218 0037 0000 0000 		.long	.LASF2


 219 003b 01        		.uleb128 0x1
 220 003c 02        		.byte	0x2
 221 003d 07        		.byte	0x7
 222 003e 0000 0000 		.long	.LASF3
 223 0042 01        		.uleb128 0x1
 224 0043 04        		.byte	0x4
 225 0044 05        		.byte	0x5
 226 0045 0000 0000 		.long	.LASF4
 227 0049 01        		.uleb128 0x1
 228 004a 04        		.byte	0x4
 229 004b 07        		.byte	0x7
 230 004c 0000 0000 		.long	.LASF5
 231 0050 01        		.uleb128 0x1
 232 0051 08        		.byte	0x8
 233 0052 05        		.byte	0x5
 234 0053 0000 0000 		.long	.LASF6
 235 0057 01        		.uleb128 0x1
 236 0058 08        		.byte	0x8
 237 0059 07        		.byte	0x7
 238 005a 0000 0000 		.long	.LASF7
 239 005e 01        		.uleb128 0x1
 240 005f 0C        		.byte	0xc
 241 0060 04        		.byte	0x4
 242 0061 0000 0000 		.long	.LASF8
 243 0065 01        		.uleb128 0x1
 244 0066 04        		.byte	0x4
 245 0067 07        		.byte	0x7
 246 0068 0000 0000 		.long	.LASF9
 247 006c 0B        		.uleb128 0xb
 248 006d 04        		.byte	0x4
 249 006e 05        		.byte	0x5
 250 006f 696E 7400 		.string	"int"
 251 0073 01        		.uleb128 0x1
 252 0074 01        		.byte	0x1
 253 0075 06        		.byte	0x6
 254 0076 0000 0000 		.long	.LASF10
 255 007a 0C        		.uleb128 0xc
 256 007b 0000 0073 		.long	0x73
 257 007f 04        		.uleb128 0x4
 258 0080 0000 007A 		.long	0x7a
 259 0084 0D        		.uleb128 0xd
 260 0085 0000 008B 		.long	0x8b
 261 0089 03        		.uleb128 0x3
 262 008a 00        		.byte	0
 263 008b 04        		.uleb128 0x4
 264 008c 0000 0084 		.long	0x84
 265 0090 05        		.uleb128 0x5
 266 0091 0000 0000 		.long	.LASF11
 267 0095 45        		.byte	0x45
 268 0096 0000 009C 		.long	0x9c
 269 009a 03        		.uleb128 0x3
 270 009b 00        		.byte	0
 271 009c 0E        		.uleb128 0xe
 272 009d 0000 0000 		.long	.LASF18
 273 00a1 02        		.byte	0x2
 274 00a2 43        		.byte	0x43
 275 00a3 06        		.byte	0x6


 276 00a4 0000 00AE 		.long	0xae
 277 00a8 06        		.uleb128 0x6
 278 00a9 0000 008B 		.long	0x8b
 279 00ad 00        		.byte	0
 280 00ae 05        		.uleb128 0x5
 281 00af 0000 0000 		.long	.LASF12
 282 00b3 42        		.byte	0x42
 283 00b4 0000 00BA 		.long	0xba
 284 00b8 03        		.uleb128 0x3
 285 00b9 00        		.byte	0
 286 00ba 0F        		.uleb128 0xf
 287 00bb 0000 0000 		.long	.LASF19
 288 00bf 03        		.byte	0x3
 289 00c0 CE        		.byte	0xce
 290 00c1 05        		.byte	0x5
 291 00c2 0000 006C 		.long	0x6c
 292 00c6 0000 00D1 		.long	0xd1
 293 00ca 06        		.uleb128 0x6
 294 00cb 0000 007F 		.long	0x7f
 295 00cf 03        		.uleb128 0x3
 296 00d0 00        		.byte	0
 297 00d1 10        		.uleb128 0x10
 298 00d2 0000 0000 		.long	.LASF20
 299 00d6 01        		.byte	0x1
 300 00d7 1B        		.byte	0x1b
 301 00d8 05        		.byte	0x5
 302 00d9 0000 006C 		.long	0x6c
 303 00dd 0000 0000 		.long	.LFB5
 304 00e1 0000 002C 		.long	.LFE5-.LFB5
 305 00e5 01        		.uleb128 0x1
 306 00e6 9C        		.byte	0x9c
 307 00e7 0000 0110 		.long	0x110
 308 00eb 02        		.uleb128 0x2
 309 00ec 0000 0000 		.long	.LVL12
 310 00f0 0000 00AE 		.long	0xae
 311 00f4 02        		.uleb128 0x2
 312 00f5 0000 0000 		.long	.LVL13
 313 00f9 0000 009C 		.long	0x9c
 314 00fd 02        		.uleb128 0x2
 315 00fe 0000 0000 		.long	.LVL14
 316 0102 0000 009C 		.long	0x9c
 317 0106 02        		.uleb128 0x2
 318 0107 0000 0000 		.long	.LVL15
 319 010b 0000 0090 		.long	0x90
 320 010f 00        		.byte	0
 321 0110 07        		.uleb128 0x7
 322 0111 0000 0000 		.long	.LASF13
 323 0115 0E        		.byte	0xe
 324 0116 0000 0000 		.long	.LFB4
 325 011a 0000 0036 		.long	.LFE4-.LFB4
 326 011e 01        		.uleb128 0x1
 327 011f 9C        		.byte	0x9c
 328 0120 0000 015E 		.long	0x15e
 329 0124 08        		.uleb128 0x8
 330 0125 0000 0000 		.long	.LBB3
 331 0129 0000 001C 		.long	.LBE3-.LBB3
 332 012d 0000 014B 		.long	0x14b


 333 0131 09        		.uleb128 0x9
 334 0132 6900      		.string	"i"
 335 0134 12        		.byte	0x12
 336 0135 0000 006C 		.long	0x6c
 337 0139 0000 0000 		.long	.LLST1
 338 013d 0000 0000 		.long	.LVUS1
 339 0141 02        		.uleb128 0x2
 340 0142 0000 0000 		.long	.LVL8
 341 0146 0000 01AC 		.long	0x1ac
 342 014a 00        		.byte	0
 343 014b 02        		.uleb128 0x2
 344 014c 0000 0000 		.long	.LVL10
 345 0150 0000 01AC 		.long	0x1ac
 346 0154 02        		.uleb128 0x2
 347 0155 0000 0000 		.long	.LVL11
 348 0159 0000 01AC 		.long	0x1ac
 349 015d 00        		.byte	0
 350 015e 07        		.uleb128 0x7
 351 015f 0000 0000 		.long	.LASF14
 352 0163 05        		.byte	0x5
 353 0164 0000 0000 		.long	.LFB3
 354 0168 0000 0036 		.long	.LFE3-.LFB3
 355 016c 01        		.uleb128 0x1
 356 016d 9C        		.byte	0x9c
 357 016e 0000 01AC 		.long	0x1ac
 358 0172 08        		.uleb128 0x8
 359 0173 0000 0000 		.long	.LBB2
 360 0177 0000 001C 		.long	.LBE2-.LBB2
 361 017b 0000 0199 		.long	0x199
 362 017f 09        		.uleb128 0x9
 363 0180 6900      		.string	"i"
 364 0182 07        		.byte	0x7
 365 0183 0000 006C 		.long	0x6c
 366 0187 0000 0000 		.long	.LLST0
 367 018b 0000 0000 		.long	.LVUS0
 368 018f 02        		.uleb128 0x2
 369 0190 0000 0000 		.long	.LVL2
 370 0194 0000 01AC 		.long	0x1ac
 371 0198 00        		.byte	0
 372 0199 02        		.uleb128 0x2
 373 019a 0000 0000 		.long	.LVL4
 374 019e 0000 01AC 		.long	0x1ac
 375 01a2 02        		.uleb128 0x2
 376 01a3 0000 0000 		.long	.LVL5
 377 01a7 0000 01AC 		.long	0x1ac
 378 01ab 00        		.byte	0
 379 01ac 11        		.uleb128 0x11
 380 01ad 0000 0000 		.long	.LASF19
 381 01b1 0000 0000 		.long	.LASF21
 382 01b5 04        		.byte	0x4
 383 01b6 00        		.byte	0
 384 01b7 00        		.byte	0
 385               		.section	.debug_abbrev,"",@progbits
 386               	.Ldebug_abbrev0:
 387 0000 01        		.uleb128 0x1
 388 0001 24        		.uleb128 0x24
 389 0002 00        		.byte	0


 390 0003 0B        		.uleb128 0xb
 391 0004 0B        		.uleb128 0xb
 392 0005 3E        		.uleb128 0x3e
 393 0006 0B        		.uleb128 0xb
 394 0007 03        		.uleb128 0x3
 395 0008 0E        		.uleb128 0xe
 396 0009 00        		.byte	0
 397 000a 00        		.byte	0
 398 000b 02        		.uleb128 0x2
 399 000c 48        		.uleb128 0x48
 400 000d 00        		.byte	0
 401 000e 7D        		.uleb128 0x7d
 402 000f 01        		.uleb128 0x1
 403 0010 7F        		.uleb128 0x7f
 404 0011 13        		.uleb128 0x13
 405 0012 00        		.byte	0
 406 0013 00        		.byte	0
 407 0014 03        		.uleb128 0x3
 408 0015 18        		.uleb128 0x18
 409 0016 00        		.byte	0
 410 0017 00        		.byte	0
 411 0018 00        		.byte	0
 412 0019 04        		.uleb128 0x4
 413 001a 0F        		.uleb128 0xf
 414 001b 00        		.byte	0
 415 001c 0B        		.uleb128 0xb
 416 001d 21        		.uleb128 0x21
 417 001e 04        		.sleb128 4
 418 001f 49        		.uleb128 0x49
 419 0020 13        		.uleb128 0x13
 420 0021 00        		.byte	0
 421 0022 00        		.byte	0
 422 0023 05        		.uleb128 0x5
 423 0024 2E        		.uleb128 0x2e
 424 0025 01        		.byte	0x1
 425 0026 3F        		.uleb128 0x3f
 426 0027 19        		.uleb128 0x19
 427 0028 03        		.uleb128 0x3
 428 0029 0E        		.uleb128 0xe
 429 002a 3A        		.uleb128 0x3a
 430 002b 21        		.uleb128 0x21
 431 002c 02        		.sleb128 2
 432 002d 3B        		.uleb128 0x3b
 433 002e 0B        		.uleb128 0xb
 434 002f 39        		.uleb128 0x39
 435 0030 21        		.uleb128 0x21
 436 0031 06        		.sleb128 6
 437 0032 3C        		.uleb128 0x3c
 438 0033 19        		.uleb128 0x19
 439 0034 01        		.uleb128 0x1
 440 0035 13        		.uleb128 0x13
 441 0036 00        		.byte	0
 442 0037 00        		.byte	0
 443 0038 06        		.uleb128 0x6
 444 0039 05        		.uleb128 0x5
 445 003a 00        		.byte	0
 446 003b 49        		.uleb128 0x49


 447 003c 13        		.uleb128 0x13
 448 003d 00        		.byte	0
 449 003e 00        		.byte	0
 450 003f 07        		.uleb128 0x7
 451 0040 2E        		.uleb128 0x2e
 452 0041 01        		.byte	0x1
 453 0042 3F        		.uleb128 0x3f
 454 0043 19        		.uleb128 0x19
 455 0044 03        		.uleb128 0x3
 456 0045 0E        		.uleb128 0xe
 457 0046 3A        		.uleb128 0x3a
 458 0047 21        		.uleb128 0x21
 459 0048 01        		.sleb128 1
 460 0049 3B        		.uleb128 0x3b
 461 004a 0B        		.uleb128 0xb
 462 004b 39        		.uleb128 0x39
 463 004c 21        		.uleb128 0x21
 464 004d 06        		.sleb128 6
 465 004e 11        		.uleb128 0x11
 466 004f 01        		.uleb128 0x1
 467 0050 12        		.uleb128 0x12
 468 0051 06        		.uleb128 0x6
 469 0052 40        		.uleb128 0x40
 470 0053 18        		.uleb128 0x18
 471 0054 7A        		.uleb128 0x7a
 472 0055 19        		.uleb128 0x19
 473 0056 01        		.uleb128 0x1
 474 0057 13        		.uleb128 0x13
 475 0058 00        		.byte	0
 476 0059 00        		.byte	0
 477 005a 08        		.uleb128 0x8
 478 005b 0B        		.uleb128 0xb
 479 005c 01        		.byte	0x1
 480 005d 11        		.uleb128 0x11
 481 005e 01        		.uleb128 0x1
 482 005f 12        		.uleb128 0x12
 483 0060 06        		.uleb128 0x6
 484 0061 01        		.uleb128 0x1
 485 0062 13        		.uleb128 0x13
 486 0063 00        		.byte	0
 487 0064 00        		.byte	0
 488 0065 09        		.uleb128 0x9
 489 0066 34        		.uleb128 0x34
 490 0067 00        		.byte	0
 491 0068 03        		.uleb128 0x3
 492 0069 08        		.uleb128 0x8
 493 006a 3A        		.uleb128 0x3a
 494 006b 21        		.uleb128 0x21
 495 006c 01        		.sleb128 1
 496 006d 3B        		.uleb128 0x3b
 497 006e 0B        		.uleb128 0xb
 498 006f 39        		.uleb128 0x39
 499 0070 21        		.uleb128 0x21
 500 0071 0A        		.sleb128 10
 501 0072 49        		.uleb128 0x49
 502 0073 13        		.uleb128 0x13
 503 0074 02        		.uleb128 0x2


 504 0075 17        		.uleb128 0x17
 505 0076 B742      		.uleb128 0x2137
 506 0078 17        		.uleb128 0x17
 507 0079 00        		.byte	0
 508 007a 00        		.byte	0
 509 007b 0A        		.uleb128 0xa
 510 007c 11        		.uleb128 0x11
 511 007d 01        		.byte	0x1
 512 007e 25        		.uleb128 0x25
 513 007f 0E        		.uleb128 0xe
 514 0080 13        		.uleb128 0x13
 515 0081 0B        		.uleb128 0xb
 516 0082 03        		.uleb128 0x3
 517 0083 0E        		.uleb128 0xe
 518 0084 1B        		.uleb128 0x1b
 519 0085 0E        		.uleb128 0xe
 520 0086 55        		.uleb128 0x55
 521 0087 17        		.uleb128 0x17
 522 0088 11        		.uleb128 0x11
 523 0089 01        		.uleb128 0x1
 524 008a 10        		.uleb128 0x10
 525 008b 17        		.uleb128 0x17
 526 008c 00        		.byte	0
 527 008d 00        		.byte	0
 528 008e 0B        		.uleb128 0xb
 529 008f 24        		.uleb128 0x24
 530 0090 00        		.byte	0
 531 0091 0B        		.uleb128 0xb
 532 0092 0B        		.uleb128 0xb
 533 0093 3E        		.uleb128 0x3e
 534 0094 0B        		.uleb128 0xb
 535 0095 03        		.uleb128 0x3
 536 0096 08        		.uleb128 0x8
 537 0097 00        		.byte	0
 538 0098 00        		.byte	0
 539 0099 0C        		.uleb128 0xc
 540 009a 26        		.uleb128 0x26
 541 009b 00        		.byte	0
 542 009c 49        		.uleb128 0x49
 543 009d 13        		.uleb128 0x13
 544 009e 00        		.byte	0
 545 009f 00        		.byte	0
 546 00a0 0D        		.uleb128 0xd
 547 00a1 15        		.uleb128 0x15
 548 00a2 01        		.byte	0x1
 549 00a3 01        		.uleb128 0x1
 550 00a4 13        		.uleb128 0x13
 551 00a5 00        		.byte	0
 552 00a6 00        		.byte	0
 553 00a7 0E        		.uleb128 0xe
 554 00a8 2E        		.uleb128 0x2e
 555 00a9 01        		.byte	0x1
 556 00aa 3F        		.uleb128 0x3f
 557 00ab 19        		.uleb128 0x19
 558 00ac 03        		.uleb128 0x3
 559 00ad 0E        		.uleb128 0xe
 560 00ae 3A        		.uleb128 0x3a


 561 00af 0B        		.uleb128 0xb
 562 00b0 3B        		.uleb128 0x3b
 563 00b1 0B        		.uleb128 0xb
 564 00b2 39        		.uleb128 0x39
 565 00b3 0B        		.uleb128 0xb
 566 00b4 27        		.uleb128 0x27
 567 00b5 19        		.uleb128 0x19
 568 00b6 3C        		.uleb128 0x3c
 569 00b7 19        		.uleb128 0x19
 570 00b8 01        		.uleb128 0x1
 571 00b9 13        		.uleb128 0x13
 572 00ba 00        		.byte	0
 573 00bb 00        		.byte	0
 574 00bc 0F        		.uleb128 0xf
 575 00bd 2E        		.uleb128 0x2e
 576 00be 01        		.byte	0x1
 577 00bf 3F        		.uleb128 0x3f
 578 00c0 19        		.uleb128 0x19
 579 00c1 03        		.uleb128 0x3
 580 00c2 0E        		.uleb128 0xe
 581 00c3 3A        		.uleb128 0x3a
 582 00c4 0B        		.uleb128 0xb
 583 00c5 3B        		.uleb128 0x3b
 584 00c6 0B        		.uleb128 0xb
 585 00c7 39        		.uleb128 0x39
 586 00c8 0B        		.uleb128 0xb
 587 00c9 27        		.uleb128 0x27
 588 00ca 19        		.uleb128 0x19
 589 00cb 49        		.uleb128 0x49
 590 00cc 13        		.uleb128 0x13
 591 00cd 3C        		.uleb128 0x3c
 592 00ce 19        		.uleb128 0x19
 593 00cf 01        		.uleb128 0x1
 594 00d0 13        		.uleb128 0x13
 595 00d1 00        		.byte	0
 596 00d2 00        		.byte	0
 597 00d3 10        		.uleb128 0x10
 598 00d4 2E        		.uleb128 0x2e
 599 00d5 01        		.byte	0x1
 600 00d6 3F        		.uleb128 0x3f
 601 00d7 19        		.uleb128 0x19
 602 00d8 03        		.uleb128 0x3
 603 00d9 0E        		.uleb128 0xe
 604 00da 3A        		.uleb128 0x3a
 605 00db 0B        		.uleb128 0xb
 606 00dc 3B        		.uleb128 0x3b
 607 00dd 0B        		.uleb128 0xb
 608 00de 39        		.uleb128 0x39
 609 00df 0B        		.uleb128 0xb
 610 00e0 49        		.uleb128 0x49
 611 00e1 13        		.uleb128 0x13
 612 00e2 11        		.uleb128 0x11
 613 00e3 01        		.uleb128 0x1
 614 00e4 12        		.uleb128 0x12
 615 00e5 06        		.uleb128 0x6
 616 00e6 40        		.uleb128 0x40
 617 00e7 18        		.uleb128 0x18


 618 00e8 7A        		.uleb128 0x7a
 619 00e9 19        		.uleb128 0x19
 620 00ea 01        		.uleb128 0x1
 621 00eb 13        		.uleb128 0x13
 622 00ec 00        		.byte	0
 623 00ed 00        		.byte	0
 624 00ee 11        		.uleb128 0x11
 625 00ef 2E        		.uleb128 0x2e
 626 00f0 00        		.byte	0
 627 00f1 3F        		.uleb128 0x3f
 628 00f2 19        		.uleb128 0x19
 629 00f3 3C        		.uleb128 0x3c
 630 00f4 19        		.uleb128 0x19
 631 00f5 6E        		.uleb128 0x6e
 632 00f6 0E        		.uleb128 0xe
 633 00f7 03        		.uleb128 0x3
 634 00f8 0E        		.uleb128 0xe
 635 00f9 3A        		.uleb128 0x3a
 636 00fa 0B        		.uleb128 0xb
 637 00fb 3B        		.uleb128 0x3b
 638 00fc 0B        		.uleb128 0xb
 639 00fd 00        		.byte	0
 640 00fe 00        		.byte	0
 641 00ff 00        		.byte	0
 642               		.section	.debug_loclists,"",@progbits
 643 0000 0000 0032 		.long	.Ldebug_loc3-.Ldebug_loc2
 644               	.Ldebug_loc2:
 645 0004 0005      		.word	0x5
 646 0006 04        		.byte	0x4
 647 0007 00        		.byte	0
 648 0008 0000 0000 		.long	0
 649               	.Ldebug_loc0:
 650               	.LVUS1:
 651 000c 02        		.uleb128 .LVU19
 652 000d 00        		.uleb128 .LVU21
 653 000e 00        		.uleb128 .LVU21
 654 000f 00        		.uleb128 0
 655               	.LLST1:
 656 0010 06        		.byte	0x6
 657 0011 0000 0000 		.long	.LVL6
 658 0015 04        		.byte	0x4
 659 0016 00        		.uleb128 .LVL6-.LVL6
 660 0017 08        		.uleb128 .LVL7-.LVL6
 661 0018 02        		.uleb128 0x2
 662 0019 31        		.byte	0x31
 663 001a 9F        		.byte	0x9f
 664 001b 04        		.byte	0x4
 665 001c 08        		.uleb128 .LVL7-.LVL6
 666 001d 32        		.uleb128 .LFE4-.LVL6
 667 001e 01        		.uleb128 0x1
 668 001f 52        		.byte	0x52
 669 0020 00        		.byte	0
 670               	.LVUS0:
 671 0021 02        		.uleb128 .LVU3
 672 0022 00        		.uleb128 .LVU5
 673 0023 00        		.uleb128 .LVU5
 674 0024 00        		.uleb128 0


 675               	.LLST0:
 676 0025 06        		.byte	0x6
 677 0026 0000 0000 		.long	.LVL0
 678 002a 04        		.byte	0x4
 679 002b 00        		.uleb128 .LVL0-.LVL0
 680 002c 08        		.uleb128 .LVL1-.LVL0
 681 002d 02        		.uleb128 0x2
 682 002e 31        		.byte	0x31
 683 002f 9F        		.byte	0x9f
 684 0030 04        		.byte	0x4
 685 0031 08        		.uleb128 .LVL1-.LVL0
 686 0032 32        		.uleb128 .LFE3-.LVL0
 687 0033 01        		.uleb128 0x1
 688 0034 52        		.byte	0x52
 689 0035 00        		.byte	0
 690               	.Ldebug_loc3:
 691               		.section	.debug_aranges,"",@progbits
 692 0000 0000 0024 		.long	0x24
 693 0004 0002      		.word	0x2
 694 0006 0000 0000 		.long	.Ldebug_info0
 695 000a 04        		.byte	0x4
 696 000b 00        		.byte	0
 697 000c 0000      		.word	0
 698 000e 0000      		.word	0
 699 0010 0000 0000 		.long	.Ltext0
 700 0014 0000 006C 		.long	.Letext0-.Ltext0
 701 0018 0000 0000 		.long	.LFB5
 702 001c 0000 002C 		.long	.LFE5-.LFB5
 703 0020 0000 0000 		.long	0
 704 0024 0000 0000 		.long	0
 705               		.section	.debug_rnglists,"",@progbits
 706               	.Ldebug_ranges0:
 707 0000 0000 0015 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 708               	.Ldebug_ranges2:
 709 0004 0005      		.word	0x5
 710 0006 04        		.byte	0x4
 711 0007 00        		.byte	0
 712 0008 0000 0000 		.long	0
 713               	.LLRL2:
 714 000c 07        		.byte	0x7
 715 000d 0000 0000 		.long	.Ltext0
 716 0011 6C        		.uleb128 .Letext0-.Ltext0
 717 0012 07        		.byte	0x7
 718 0013 0000 0000 		.long	.LFB5
 719 0017 2C        		.uleb128 .LFE5-.LFB5
 720 0018 00        		.byte	0
 721               	.Ldebug_ranges3:
 722               		.section	.debug_line,"",@progbits
 723               	.Ldebug_line0:
 724 0000 0000 0156 		.section	.debug_str,"MS",@progbits,1
 724      0003 0000 
 724      005E 0201 
 724      FB0E 0D00 
 724      0101 0101 
 725               	.LASF6:
 726 0000 6C6F 6E67 		.string	"long long int"
 726      206C 6F6E 


 726      6720 696E 
 726      7400 
 727               	.LASF9:
 728 000e 756E 7369 		.string	"unsigned int"
 728      676E 6564 
 728      2069 6E74 
 728      00
 729               	.LASF12:
 730 001b 696E 6974 		.string	"init_kernel"
 730      5F6B 6572 
 730      6E65 6C00 
 731               	.LASF20:
 732 0027 6D61 696E 		.string	"main"
 732      00
 733               	.LASF5:
 734 002c 6C6F 6E67 		.string	"long unsigned int"
 734      2075 6E73 
 734      6967 6E65 
 734      6420 696E 
 734      7400 
 735               	.LASF15:
 736 003e 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 736      4331 3720 
 736      3131 2E34 
 736      2E30 202D 
 736      6D63 7075 
 737               	.LASF7:
 738 0082 6C6F 6E67 		.string	"long long unsigned int"
 738      206C 6F6E 
 738      6720 756E 
 738      7369 676E 
 738      6564 2069 
 739               	.LASF17:
 740 0099 2F68 6F6D 		.string	"/home/students/22nen/1TE22129K/mtk/mtk_git/sofutojikken/jikken2/theme2/mtk"
 740      652F 7374 
 740      7564 656E 
 740      7473 2F32 
 740      326E 656E 
 741               	.LASF1:
 742 00e4 756E 7369 		.string	"unsigned char"
 742      676E 6564 
 742      2063 6861 
 742      7200 
 743               	.LASF10:
 744 00f2 6368 6172 		.string	"char"
 744      00
 745               	.LASF4:
 746 00f7 6C6F 6E67 		.string	"long int"
 746      2069 6E74 
 746      00
 747               	.LASF14:
 748 0100 7461 736B 		.string	"task1"
 748      3100 
 749               	.LASF13:
 750 0106 7461 736B 		.string	"task2"
 750      3200 
 751               	.LASF11:


 752 010c 6265 6769 		.string	"begin_sch"
 752      6E5F 7363 
 752      6800 
 753               	.LASF3:
 754 0116 7368 6F72 		.string	"short unsigned int"
 754      7420 756E 
 754      7369 676E 
 754      6564 2069 
 754      6E74 00
 755               	.LASF19:
 756 0129 7072 696E 		.string	"printf"
 756      7466 00
 757               	.LASF8:
 758 0130 6C6F 6E67 		.string	"long double"
 758      2064 6F75 
 758      626C 6500 
 759               	.LASF18:
 760 013c 7365 745F 		.string	"set_task"
 760      7461 736B 
 760      00
 761               	.LASF21:
 762 0145 5F5F 6275 		.string	"__builtin_printf"
 762      696C 7469 
 762      6E5F 7072 
 762      696E 7466 
 762      00
 763               	.LASF16:
 764 0156 7465 7374 		.string	"test2.c"
 764      322E 6300 
 765               	.LASF2:
 766 015e 7368 6F72 		.string	"short int"
 766      7420 696E 
 766      7400 
 767               	.LASF0:
 768 0168 7369 676E 		.string	"signed char"
 768      6564 2063 
 768      6861 7200 
 769               		.ident	"GCC: (GNU) 11.4.0"


