

   1               	        .data
   2               	        .align 2
   3               	environ:
   4 0000 0000 0000 	        .long 0
   5               	 	.align	2
   6               	
   7               	.extern main
   8               	.extern exit
   9               	.extern monitor_begin
  10               	.extern hardware_init_hook
  11               	.extern software_init_hook
  12               	.extern atexit
  13               	.extern __do_global_dtors
  14               	.extern __bss_start
  15               	.extern _end
  16               	
  17               	.global start
  18               	
  19               	.text
  20               	.even
  21               		/* See if user supplied their own stack (__stack != 0).  If not, then
  22               		 * default to using the value of %sp as set by the ROM monitor.
  23               		 */
  24 0000 207C 0000 		movel	#__stack, %a0
  24      0000 
  25 0006 B1FC 0000 		cmpl	#0, %a0
  25      0000 
  26 000c 6702      		jbeq    1f
  27 000e 2E48      		movel	%a0, %sp
  28               	1:
  29               		/* set up initial stack frame */
  30 0010 4E56 FFF8 		link	%a6, #-8
  31               	
  32               		/* zero out the bss section */
  33 0014 223C 0000 		movel	#__bss_start, %d1
  33      0000 
  34 001a 203C 0000 		movel	#_end, %d0
  34      0000 
  35 0020 B280      		cmpl	%d0, %d1
  36 0022 6712      		jbeq	3f
  37 0024 2041      		movl	%d1, %a0
  38 0026 9081      		subl	%d1, %d0
  39 0028 5380      		subql	#1, %d0
  40               	2:
  41 002a 4218      		clrb	(%a0)+
  42 002c 51C8 FFFC 		dbra	%d0, 2b
  43 0030 4240      		clrw	%d0
  44 0032 5380      		subql	#1, %d0
  45 0034 64F4      		jbcc	2b
  46               	3:
  47               		/* jmp monitor initialize after making up  bss */
  48 0036 4EF9 0000 		jmp	monitor_begin
  48      0000 
  49               	start:
  50               		/* monitor returns here.
  51               		 * re-setup stack for C programs.
  52               	         * See if user supplied their own stack (__stack != 0).  If not, then


  53               		 * default to using the value of %sp as set by the ROM monitor.
  54               		 */
  55 003c 207C 0000 		movel	#__stack, %a0
  55      0000 
  56 0042 B1FC 0000 		cmpl	#0, %a0
  56      0000 
  57 0048 6702      		jbeq    skip
  58 004a 2E48      		movel	%a0, %sp
  59               	skip:
  60               		/* set up initial stack frame */
  61 004c 4E56 FFF8 		link	%a6, #-8
  62               	
  63               		/*
  64               		 * initialize target specific stuff. Only execute these
  65               		 * functions it they exist.
  66               		 */
  67 0050 41F9 0000 		lea	hardware_init_hook, %a0
  67      0000 
  68 0056 B1FC 0000 		cmpl	#0, %a0
  68      0000 
  69 005c 6702      		jbeq	4f
  70 005e 4E90      		jsr     (%a0)
  71               	4:
  72 0060 41F9 0000 		lea	software_init_hook, %a0
  72      0000 
  73 0066 B1FC 0000 		cmpl	#0, %a0
  73      0000 
  74 006c 6702      		jbeq	5f
  75 006e 4E90      		jsr     (%a0)
  76               	5:
  77               	
  78               		/*
  79               		 * call the main routine from the application to get it going.
  80               		 * main (argc, argv, environ)
  81               		 * we pass argv as a pointer to NULL.
  82               		 */
  83               	
  84               		/* put __do_global_dtors in the atexit list so 
  85               		 * the destructors get run */
  86               	/* 
  87               		movel	#__do_global_dtors,(%sp)
  88               		jsr	atexit
  89               		movel	#__FINI_SECTION__,(%sp)
  90               		jsr	atexit
  91               		jsr	__INIT_SECTION__
  92               	*/
  93               		
  94               		** setup argv, argc and jump into main
  95 0070 4878 0000 	        pea     0
  96 0074 4879 0000 	        pea     environ
  96      0000 
  97 007a 486F 0004 	        pea     %sp@(4)
  98 007e 4878 0000 	        pea     0
  99 0082 4EB9 0000 		jsr	main
  99      0000 
 100 0088 2F00      		movel	%d0, %sp@-
 101               	


 102 008a 4EB9 0000 	        jsr     exit
 102      0000 
 103               	.even




   1               	** EECS-Exp II/III software-exp-I
   2               	** v1.0 / 2023-11-15
   3               	** Group 4
   4               	** 1TE21022R Seo Ichika, 	1TE21143S Miyata Yusaku, 	1TE21940P Saitoh Koshi
   5               	** 1TE21913T Takeishi Kota,	1TE21033K Goto Aoto,		1TE21057R Morokuma Haruto
   6               	
   7               	** INDEX
   8               	** STEP 1: 初期化ルーチン
   9               	** STEP 4-2: INTERUT INTERFACE
  10               	** STEP 6-3: INTERGET INTERFACE
  11               	** STEP 0-1: キューの初期化ルーチン(1/2)
  12               	** STEP 0-2: キューへの入力(INQ), 出力(OUTQ) ルーチン 
  13               	** STEP 4-1: INTERPUT
  14               	** STEP 5-1: PUTSTRING
  15               	** STEP 6-1: GETSTRING
  16               	** STEP 6-2: INTERGET
  17               	** STEP 7: タイマ制御部
  18               	** STEP 8: システムコールインタフェース
  19               	** STEP 0-1: キューの初期化ルーチン(2/2)
  20               	
  21               	/* STEP 1: 初期化ルーチンの作成 */
  22               	***************************************************************
  23               	**各種レジスタ定義
  24               	***************************************************************
  25               	***************
  26               	**レジスタ群の先頭
  27               	***************
  28               	.equ REGBASE,   0xFFF000          | DMAPを使用．
  29               	.equ IOBASE,    0x00d00000
  30               	***************
  31               	**割り込み関係のレジスタ
  32               	***************
  33               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  34               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  35               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  36               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  37               	***************
  38               	**タイマ関係のレジスタ
  39               	***************
  40               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  41               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  42               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  43               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  44               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  45               	***************
  46               	** UART1（送受信）関係のレジスタ
  47               	***************
  48               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  49               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  50               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  51               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  52               	***************
  53               	** LED
  54               	***************
  55               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  56               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  57               	.equ LED5,      IOBASE+0x000002b


  58               	.equ LED4,      IOBASE+0x0000029
  59               	.equ LED3,      IOBASE+0x000003f
  60               	.equ LED2,      IOBASE+0x000003d
  61               	.equ LED1,      IOBASE+0x000003b
  62               	.equ LED0,      IOBASE+0x0000039
  63               	
  64               	
  65               	***************
  66               	**システムコール番号
  67               	***************
  68               	.equ SYSCALL_NUM_GETSTRING,     1
  69               	.equ SYSCALL_NUM_PUTSTRING,     2
  70               	.equ SYSCALL_NUM_RESET_TIMER,   3
  71               	.equ SYSCALL_NUM_SET_TIMER,     4
  72               	
  73               	
  74               	***************************************************************
  75               	**スタック領域の確保
  76               	***************************************************************
  77               	.section .bss
  78               	.even
  79               	SYS_STK:
  80 0000 0000 0000 		.ds.b   0x4000  |システムスタック領域
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  81               		.even
  82               	SYS_STK_TOP:        |システムスタック領域の最後尾
  83               	task_p:
  84 4000 0000 0000 		.ds.l 1         |タイマ用
  85               	
  86               	***************************************************************
  87               	**初期化**内部デバイスレジスタには特定の値が設定されている．
  88               	**その理由を知るには，付録Bにある各レジスタの仕様を参照すること．
  89               	***************************************************************
  90               	.section .text
  91               	.even
  92               	.extern start
  93               	.global monitor_begin
  94               	monitor_begin:
  95               	boot:
  96               		*スーパーバイザ&各種設定を行っている最中の割込禁止
  97 0000 46FC 2700 		move.w #0x2700,%SR
  98 0004 4FF9 0000 		lea.l  SYS_STK_TOP, %SP | Set SSP
  98      0000 
  99               	
 100               	
 101               		****************
 102               		**割り込みコントローラの初期化
 103               		****************
 104 000a 13FC 0040 		move.b #0x40, IVR       |ユーザ割り込みベクタ番号を
 104      00FF F300 
 105               					| 0x40+levelに設定.
 106 0012 23FC 00FF 		move.l #0x00ffffff, IMR  |全割り込みマスク|**割り込みを許可
 106      FFFF 00FF 
 106      F304 


 107               	
 108               		****************
 109               		**送受信(UART1)関係の初期化(割り込みレベルは4に固定されている)
 110               		****************
 111 001c 33FC 0000 		move.w #0x0000, USTCNT1 |リセット
 111      00FF F900 
 112 0024 33FC E10C 		move.w #0xE10C, USTCNT1 |送受信可能,パリティなし, 1 stop, 8 bit,
 112      00FF F900 
 113               					|送受信割り込み禁止
 114 002c 33FC 0038 		move.w #0x0038, UBAUD1  | baud rate = 230400 bps
 114      00FF F902 
 115               	
 116               		****************
 117               		**タイマ関係の初期化(割り込みレベルは6に固定されている)
 118               		*****************
 119 0034 33FC 0004 		move.w #0x0004, TCTL1   | restart,割り込み不可,|システムクロックの1/16を単位と
 119      00FF F600 
 120               		|タイマ使用停止
 121               	
 122               	    *****************
 123               	    ** キューの初期化
 124               	    *****************
 125 003c 4EBA 00E6 		jsr INIT_Q
 126               	
 127               		****************
 128               		**割り込み処理ルーチンの初期化
 129               		****************
 130 0040 21FC 0000 		move.l #INTERFACE, 0x110			/* level 4, (64+4)*4 */ 
 130      0000 0110 
 131 0048 21FC 0000 		move.l #timer_interface, 0x118		/* level 6, (64+6)*4 */
 131      0000 0118 
 132 0050 21FC 0000 		move.l #SYSCALL_INTERFACE, 0x080	/* trap #0 割り込みベクタ設定 */
 132      0000 0080 
 133 0058 23FC 00FF 		move.l #0x00ff3ff9, IMR				/* 割り込み許可*/
 133      3FF9 00FF 
 133      F304 
 134 0062 46FC 2000 		move.w #0x2000,%SR					/* 走行レベルを0にする */
 135               	
 136 0066 4EF9 0000 		jmp start
 136      0000 
 137 006c 6000 0002 		bra MAIN
 138               	
 139               		
 140               	****************************************************************
 141               	***プログラム領域
 142               	****************************************************************
 143               	.section .text
 144               	.even
 145               	MAIN:
 146               		**走行モードとレベルの設定(「ユーザモード」への移行処理)
 147 0070 46FC 0000 		move.w #0x0000, %SR  | USER MODE, LEVEL 0
 148 0074 4FF9 0000 		lea.l USR_STK_TOP,%SP  | user stackの設定
 148      0000 
 149               		**システムコールによるRESET_TIMERの起動
 150 007a 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%D0
 151 007c 4E40      		trap   #0
 152               		**システムコールによるSET_TIMERの起動


 153 007e 7004      		move.l #SYSCALL_NUM_SET_TIMER, %D0
 154 0080 323C C350 		move.w #50000, %D1
 155 0084 243C 0000 		move.l #TT,    %D2
 155      0000 
 156 008a 4E40      		trap #0
 157               		
 158               	******************************
 159               	* sys_GETSTRING, sys_PUTSTRINGのテスト
 160               	*ターミナルの入力をエコーバックする
 161               	******************************
 162               	LOOP:
 163 008c 7001      		move.l #SYSCALL_NUM_GETSTRING, %D0
 164 008e 7200      		move.l #0,   %D1        | ch    = 0
 165 0090 243C 0000 		move.l #BUF, %D2        | p    = #BUF
 165      0000 
 166 0096 263C 0000 		move.l #256, %D3        | size = 256
 166      0100 
 167 009c 4E40      		trap #0
 168 009e 2600      		move.l %D0, %D3         | size = %D0 (length of given string)
 169 00a0 7002      		move.l #SYSCALL_NUM_PUTSTRING, %D0
 170 00a2 7200      		move.l #0,  %D1         | ch = 0
 171 00a4 243C 0000 		move.l #BUF,%D2         | p  = #BUF
 171      0000 
 172 00aa 4E40      		trap #0
 173 00ac 6000 FFDE 		bra LOOP
 174               	
 175               	******************************
 176               	*タイマのテスト
 177               	* ’******’を表示し改行する．
 178               	*５回実行すると，RESET_TIMERをする．
 179               	******************************
 180               	TT:
 181 00b0 48E7 FFFE 		movem.l %D0-%D7/%A0-%A6,-(%SP)
 182 00b4 0C79 0005 		cmpi.w #5,TTC            | TTCカウンタで5回実行したかどうか数える
 182      0000 0000 
 183 00bc 6700 001C 		beq TTKILL               | 5回実行したら，タイマを止める
 184 00c0 7002      		move.l #SYSCALL_NUM_PUTSTRING,%D0
 185 00c2 7200      		move.l #0,    %D1        | ch = 0
 186 00c4 243C 0000 		move.l #TMSG, %D2        | p  = #TMSG
 186      0000 
 187 00ca 7608      		move.l #8,    %D3        | size = 8
 188 00cc 4E40      		trap #0
 189 00ce 0679 0001 		addi.w #1,TTC            | TTCカウンタを1つ増やして
 189      0000 0000 
 190 00d6 6000 0006 		bra TTEND                |そのまま戻る
 191               	TTKILL:
 192 00da 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%D0
 193 00dc 4E40      		trap #0
 194               	TTEND:
 195 00de 4CDF 7FFF 		movem.l (%SP)+,%D0-%D7/%A0-%A6
 196 00e2 4E75      		rts
 197               	
 198               	
 199               	****************************************************************
 200               	***初期値のあるデータ領域
 201               	****************************************************************
 202               	.section .data


 203               	TMSG:
 204 0000 2A2A 2A2A 		.ascii  "******\r\n"      | \r:行頭へ(キャリッジリターン)
 204      2A2A 0D0A 
 205               		.even                     | \n:次の行へ(ラインフィード)
 206               	TTC:
 207 0008 0000      		.dc.w  0
 208               		.even
 209               	
 210               	****************************************************************
 211               	***初期値の無いデータ領域
 212               	****************************************************************
 213               	.section .bss
 214               	BUF:
 215 4004 0000 0000 		.ds.b 256           | BUF[256]
 215      0000 0000 
 215      0000 0000 
 215      0000 0000 
 215      0000 0000 
 216               		.even
 217               	USR_STK:
 218 4104 0000 0000 		.ds.b 0x4000        |ユーザスタック領域
 218      0000 0000 
 218      0000 0000 
 218      0000 0000 
 218      0000 0000 
 219               		.even
 220               	USR_STK_TOP:            |ユーザスタック領域の最後尾
 221               	
 222               	
 223               	.section .text
 224               	.even
 225               	
 226               	/* STEP 4-2: INTERUT INTERFACE, STEP 6-3: INTERGET INTERFACE */
 227               	** ここから送受信割り込みインタフェース
 228               	** 担当：齊藤
 229               	
 230               	********************************
 231               	**送受信割り込みインターフェース
 232               	********************************　
 233               	
 234               	***************************************************************************************************
 235               	**【手順説明】
 236               	** 受信レジスタ URX1 を %D3.W にコピー
 237               	** %D3.W の下位 8bit(データ部分) を %D2.B にコピー
 238               	** 今起こっている割り込みが，受信割り込みであるかを，%D3.W の 第 13 ビ
 239               	** 受信割り込みであった場合，チャンネル ch = %D1.L =0, データ data = %D2.B と
 240               	** 今起こっている 割り込みが，送信割り込みであるかを，送信レジスタ U
 241               	** 送信割り込みであった場合，ch=%D1.L=0 として INTERPUT を呼び出す
 242               	***************************************************************************************************
 243               	
 244               	***************************************************************************************************
 245               	**【受信＆送信レジスタの説明】
 246               	** UTX1 15bit 0:送信FIFOが空でない（INTERPUTで送信キューからOUTQ） 1:送信FIFOが
 247               	** URX1 13bit 0:受信FIFOが空              				 1:受信FIFOにデータがある（INTERGETで
 248               	***************************************************************************************************
 249               	
 250               	INTERFACE:


 251 00e4 48E7 7080 		movem.l %d1-%d3/%a0, -(%sp)
 252               	INTERGET_INTERFACE:
 253 00e8 3639 00FF 		move.w  URX1, %d3	|URX1をd3にコピー
 253      F904 
 254 00ee 1403      		move.b  %d3, %d2    |d3の下位8bitをコピー 　data = %d2.b
 255 00f0 0243 2000 		andi.w  #0x2000,%d3	|13ビット目をチェック（bit13=1なら%d3が0x2000となる）
 256 00f4 0C43 2000 		cmpi.w  #0x2000,%d3	|%d3が0x2000であるかチェック
 257 00f8 6600 000C 		bne     INTERPUT_INTERFACE |13ビット目が１だったら受信割込
 258 00fc 7200      		move.l  #0, %d1 	|受信割り込みだったので、ch=%d1.l=0としてINTERGETを呼び出す
 259 00fe 4EBA 0228 		jsr     INTERGET        
 260 0102 6000 001A 		bra	INTERFACE_FINISH
 261               	INTERPUT_INTERFACE:
 262 0106 3639 00FF 		move.w  UTX1, %d3
 262      F906 
 263 010c 0243 8000 		andi.w  #0x8000, %d3
 264 0110 0C43 0000 		cmpi.w  #0x0000, %d3 
 265 0114 6700 0008 		beq    INTERFACE_FINISH |UTX1 15bit = 0（送信FIFOが空でない）INTERPUT_FINISHへ
 266 0118 7200      		move.l #0, %d1        	|送信割り込みだったので、ch=%d1.l=0としてINTERPUTを呼び
 267 011a 4EBA 0126 		jsr    INTERPUT 
 268               	INTERFACE_FINISH:
 269 011e 4CDF 010E 		movem.l (%sp)+, %d1-%d3/%a0
 270 0122 4E73      		rte
 271               		
 272               	
 273               	/* STEP 0-1: キューの初期化ルーチン */
 274               	** (2) 送信キュー・受信キューの両方について，キューのデータ用および
 275               	INIT_Q:	
 276 0124 48E7 00C0 		movem.l %a0-%a1 ,-(%sp)
 277               	
 278               	/* キュー0の初期化 */
 279 0128 207C 0000 		movea.l	#Que0, %a0		/*構造体Que0の先頭アドレス*/
 279      0000 
 280 012e 227C 0000 		move.l  #top, %a1	
 280      000A 
 281 0134 D3C8      		add.l	%a0, %a1 		/*a1でキュー０の先頭番地を指定*/
 282 0136 2149 0000 		move.l  %a1, out(%a0) 	/*enqueポインタ初期化*/
 283 013a 2149 0004 		move.l  %a1, in(%a0) 	/*dequeポインタ初期化*/
 284 013e 117C 0000 		move.b	#0, s(%a0) 		/*カウンタの初期化*/
 284      0008 
 285               	
 286               	    /* キュー1の初期化 */
 287 0144 207C 0000 		movea.l #Que1, %a0 		/*構造体Que１の先頭アドレス*/
 287      0000 
 288 014a 227C 0000 		move.l  #top, %a1
 288      000A 
 289 0150 D3C8      		add.l   %a0, %a1 		/*a1でキュー1の先頭番地を指定*/
 290 0152 2149 0000 		move.l  %a1, out(%a0) 	/*enqueポインタ初期化*/
 291 0156 2149 0004 		move.l  %a1, in(%a0) 	/*dequeポインタ初期化*/
 292 015a 117C 0000 		move.b  #0, s(%a0) 		/*カウンタの初期化*/	
 292      0008 
 293               	
 294 0160 4CDF 0300 		movem.l (%sp)+, %a0-%a1
 295 0164 4E75      		rts
 296               	
 297               	
 298               	/* STEP 0-2: キューへの入力(INQ), 出力(OUTQ) ルーチンの作成 */
 299               	** INQ(no, data)


 300               	** argument:    (1) cue number no = %d0
 301               	**              (2) 8-bit data to write = %d1
 302               	** return:      result flag = %d0 (0: failure, 1: success)
 303               	
 304               	/* (1) */
 305               	INQ:						/* キューへの入力 */
 306 0166 40E7      		move.w	%sr, -(%sp)		/* (1) 現走行レベルの退避 */
 307 0168 46FC 2700 		move.w	#0x2700, %sr	/* (2) 割り込み禁止 */
 308 016c 48E7 00F0 		movem.l	%a0-%a3, -(%sp)	/* レジスタの退避 */
 309 0170 207C 0000 		movea.l	#Que0, %a0		/* キュー0参照用アドレス */
 309      0000 
 310 0176 0C80 0000 		cmpi.l	#0, %d0	        /* キュー番号の確認 */
 310      0000 
 311 017c 6700 0008 		beq	INQ_CHECK       	/*キュー1を使用*/
 312 0180 207C 0000 		movea.l	#Que1, %a0		/* キュー1参照用アドレス */
 312      0000 
 313               	/* (3) */
 314               	INQ_CHECK:
 315 0186 0C68 0100 		cmpi.w	#256 ,s(%a0)	/* s == 256 ?：キュー内のデータの個数を確認 */
 315      0008 
 316 018c 6600 0008 		bne	INQ_START			/* true:  キューが一杯でなければ書き込み可能 */
 317 0190 7000      		moveq.l	#0, %d0			/* false: (3-1) %D0 を0（失敗：queue full）に設定：書き込み失敗 
 318 0192 6000 0038 		bra	INQ_END             /* false: (3-2) (7)へ */
 319               	/* (4), (5-2) */
 320               	INQ_START:
 321               	/* (4) m[in] = data */
 322 0196 2268 0004 		movea.l	in(%a0), %a1	/* 書き込み先アドレスを格納 */
 323 019a 1281      		move.b	%d1, (%a1)		/* 書き込み処理 */
 324 019c 2448      		movea.l	%a0, %a2
 325 019e D5FC 0000 		adda.l	#bottom, %a2	/* キューの末尾のアドレスを格納 */
 325      010A 
 326               	
 327               	    /* (5) if (in == bottom) */
 328 01a4 B5E8 0004 		cmpa.l	in(%a0), %a2	/* 書き込んだ位置がキューの末尾か確認 */
 329 01a8 6700 000E 		beq	INQ_TOP
 330               	
 331               		/* (5-2) else in++  */
 332 01ac 06A8 0000 		addi.l	#1, in(%a0)		/* 書き込み位置のアドレスを1加算 */
 332      0001 0004 
 333 01b4 6000 000E 		bra	INQ_SUCCESS
 334               	
 335               	/* (5-1) */
 336               	INQ_TOP:
 337               	/*  (5-1) in=top */
 338 01b8 267C 0000 		move.l	#top, %a3
 338      000A 
 339 01be D7C8      		add.l	%a0, %a3		/* topのアドレスを求める */
 340 01c0 214B 0004 		move.l	%a3, in(%a0)	/* 書き込み位置をキューの先頭に移動 */
 341               	/* (6) */
 342               	INQ_SUCCESS:
 343               	/* s++, %D0 を1（成功）に設定 */
 344 01c4 0668 0001 		addi.w	#1, s(%a0)		/* 個数を1加算 */
 344      0008 
 345 01ca 7001      		moveq.l	#1, %d0			/* 書き込み成功 */
 346               	
 347               	/* (7) */
 348               	INQ_END:	


 349 01cc 4CDF 0F00 		movem.l	(%sp)+, %a0-%a3	/* レジスタの回復 */
 350 01d0 46DF      		move.w	(%sp)+, %sr		/* (7) 旧走行レベルの回復 */
 351 01d2 4E75      		rts
 352               	
 353               	**************************************************
 354               	***a0:選択された構造体の先頭アドレス（変更不可）
 355               	***a1:構造体の先頭アドレスのコピー（変更可
 356               	***************************************************
 357               	
 358               	** OUTQ(no, data)
 359               	** argument:    cue number no = %d0
 360               	** return:      (1) result flag = %d0 (0: failure, 1: success)
 361               	**              (2) 8-bit data to read = %d1
 362               		
 363               	/* (1), (2) */	
 364               	OUTQ:
 365 01d4 40E7      		move.w	%sr, -(%sp) 	/* (1) 現走行レベルの退避 */
 366 01d6 46FC 2700 		move.w	#0x2700, %sr 	/* (2) 割り込み禁止 */
 367 01da 48E7 00F0 		movem.l %a0-%a3, -(%sp) /* レジスタ退避 */
 368 01de 207C 0000 		movea.l #Que0, %a0		/* キュー0参照用アドレス */
 368      0000 
 369               	
 370               	    /* Que0 or Que1 */
 371 01e4 0C80 0000 		cmpi.l	#0, %d0	        /* キュー番号の確認 */
 371      0000 
 372 01ea 6700 0008 		beq	OUTQ_CHECK      	/* キュー0を使用 */
 373               		              			/* キュー1を使用 */
 374 01ee 207C 0000 		movea.l #Que1, %a0		/* キュー1参照用アドレス */
 374      0000 
 375               	/* (3) */	
 376               	OUTQ_CHECK:
 377               	/* (3) s == 0 ならば%D0 を0（失敗：queue empty）に設定し，(7) へ */
 378 01f4 0C68 0000 		cmpi.w	#0, s(%a0)      /* キュー内のデータの個数を確認 */
 378      0008 
 379 01fa 6600 0008 		bne	OUTQ_START      	/* キューが一杯でなければ読み出し可能 */
 380 01fe 7000      		moveq.l	 #0, %d0 		/*失敗*/
 381 0200 6000 0038 		bra	OUTQ_END
 382               	/* (4), (5-2) */
 383               	OUTQ_START:
 384 0204 2268 0000 		movea.l out(%a0), %a1   /* 読み出し先アドレスを格納*/
 385 0208 1211      		move.b  (%a1), %d1      /* (4) data = m[out]；読み出し処理*/
 386 020a 2448      		movea.l	%a0, %a2
 387 020c D5FC 0000 		adda.l	#bottom, %a2	/* キューの末尾のアドレスを格納 */
 387      010A 
 388               	
 389               	    /* (5) if (out == bottom) */
 390 0212 B5E8 0000 		cmpa.l	out(%a0), %a2	/* 読み込んだ位置がキューの末尾か確認 */
 391 0216 6700 000E 		beq	OUTQ_TOP
 392               	
 393               		/* (5-2) else out++  */
 394 021a 06A8 0000 		addi.l	#1, out(%a0)	/* 読み出し位置のアドレスを1加算 */
 394      0001 0000 
 395 0222 6000 000E 		bra OUTQ_SUCCESS
 396               	
 397               	/* (5-1) */
 398               	OUTQ_TOP:	
 399               	/*  (5-1) out=top */


 400 0226 267C 0000 		move.l	#top, %a3
 400      000A 
 401 022c D7C8      		add.l	%a0, %a3		/* topのアドレスを求める */
 402 022e 214B 0000 		move.l	%a3, out(%a0)	/* 読み出し位置をキューの先頭に移動 */
 403               	
 404               	/* (6) */
 405               	OUTQ_SUCCESS:
 406               	/* s––, %D0 を1（成功）に設定 */
 407 0232 0468 0001 		subi.w	#1, s(%a0)		/* 個数を1減算 */
 407      0008 
 408 0238 7001      		moveq.l	#1, %d0			/* 読み出し成功 */
 409               	
 410               	/* (7)  */
 411               	OUTQ_END:	
 412 023a 4CDF 0F00 		movem.l	(%sp)+, %a0-%a3	/* レジスタの回復 */
 413 023e 46DF      		move.w	(%sp)+, %sr		/* (7) 旧走行レベルの回復 */
 414 0240 4E75      		rts
 415               	
 416               	
 417               	**************************************************
 418               	***a0:選択された構造体の先頭アドレス（変更不可）
 419               	***a1:構造体の先頭アドレスのコピー（変更可）
 420               	***************************************************
 421               	
 422               	**ここからINTERPUT・PUTSTRING
 423               	**担当：諸隈・宮田・瀬尾
 424               	
 425               	INTERPUT:
 426               	    **(1) 割り込み禁止（走行レベルを7に設定）
 427 0242 46FC 2700 	    move.w  #0x2700, %SR
 428 0246 48E7 8000 	    movem.l %d0, -(%sp)
 429               		
 430               	    **(2) ch ≠ 0 ならば、何もせずに復帰
 431 024a 0C81 0000 	    cmp.l   #0, %d1
 431      0000 
 432 0250 6600 001C 	    bne     INTERPUT_Exit
 433               	
 434               	    **(3) OUTQ(1, data) を実行する (= 送信キューから8bitデータを1つ取り出しdat
 435 0254 7001      	    move.l  #1, %d0     | キュー番号を指定 (1は送信キュー)
 436 0256 4EBA FF7C 	    jsr     OUTQ
 437               	
 438               	    **(4) OUTQの戻り値が0 (失敗) ならば、送信割り込みをマスク (USTCNT1を操
 439 025a 0C80 0000 	    cmp.l  #0, %d0           | %D0にOUTQの戻り値が格納されている
 439      0000 
 440 0260 6700 0012 	    beq     INTERPUT_MUSK | OUTQが失敗した場合は何も送信せずに復帰
 441               	
 442               	    **(5) dataを送信レジスタUTX1に代入して送信 (上位8ビット分のヘッダを忘
 443               	    **上位8ビットのヘッダを付与しておく
 444 0264 0641 0800 	    add.w  #0x0800, %d1
 445 0268 33C1 00FF 	    move.w  %d1, UTX1
 445      F906 
 446               	    
 447               	INTERPUT_Exit:
 448               	    **(6) 旧走行レベルの回復
 449 026e 4CDF 0001 	    movem.l (%sp)+, %d0
 450 0272 4E75      	    rts
 451               	


 452               	INTERPUT_MUSK:
 453 0274 33FC E108 	    move.w #0xE108, USTCNT1
 453      00FF F900 
 454 027c 6000 FFF0 	    bra INTERPUT_Exit
 455               	
 456               	/* STEP 5: 送信制御部の完成（PUTSTRING）*/
 457               	
 458               	*****************************************
 459               	*** a0=i
 460               	*** d0=sz(実際に送信したデータ数)
 461               	*** d1=ch
 462               	*** d2=p(データ読み込み先の先頭アドレス)
 463               	*** d3=size(送信するデータ数)
 464               	*****************************************
 465               	
 466               	PUTSTRING:
 467 0280 48E7 00F0 	    movem.l	%a0-%a3, -(%sp)  /* レジスタ退避 */
 468               	
 469               	    ** (1) ch != 0 ならば，(11) へ．(=なにもせず復帰)
 470 0284 0C81 0000 	    cmp.l   #0, %d1          /* ch≠0ならば何もせず復帰 */
 470      0000 
 471 028a 6600 004C 	    bne     PUTSTRING_END
 472               		
 473               		** (2) sz <- 0, i <- p
 474 028e 41F9 0000 		lea.l	sz, %a0         /* sz <- 0 */
 474      0000 
 475 0294 43F9 0000 		lea.l	i, %a1          /*  i <- p */
 475      0000 
 476 029a 20BC 0000 	    move.l	#0, (%a0)
 476      0000 
 477 02a0 2282      		move.l	%d2, (%a1)
 478               	
 479               	    ** (3) size = 0 ならば，(10)へ
 480 02a2 0C83 0000 		cmp.l	#0, %d3
 480      0000 
 481 02a8 6700 002C 		beq	PUTSTRING_RETURN
 482               	
 483               	PUTSTRING_LOOP:
 484               	    ** (4) sz = size ならば，(9)へ
 485 02ac B690      		cmp.l	(%a0), %d3      /* sz = sizeならばUnmusk */
 486 02ae 6700 001E 	    beq	PUTSTRING_UNMUSK
 487               		
 488               	    ** (5) INQ(1, i) を実行し，送信キューへi番地のデータを書き込む．
 489 02b2 7001      	    move.l	#1, %d0         /* 送信キューを選択 */
 490 02b4 2651      	    movea.l	(%a1), %a3      /* 送信するデータを入力 */
 491 02b6 1213      	    move.b	(%a3), %d1      
 492 02b8 4EBA FEAC 		jsr	INQ	/*INQ(1, i)*/
 493               	    
 494               	    ** (6) INQ の復帰値が0 (失敗/ queue full) なら(9) へ
 495 02bc 0C80 0000 	    cmp.l	#0, %d0         /* INQの復帰値が0ならばUnmusk */
 495      0000 
 496 02c2 6700 000A 	    beq	PUTSTRING_UNMUSK
 497               	
 498               	    ** (7) sz++, i++, (10) sz -> %d0
 499 02c6 5290      	    add.l	#1, (%a0)       /* sz++ */
 500 02c8 5291      	    add.l	#1, (%a1)       /* i++ */
 501               	


 502               	    ** (8) (4)へ
 503 02ca 6000 FFE0 	    bra	PUTSTRING_LOOP
 504               		
 505               	
 506               	PUTSTRING_UNMUSK:
 507               	    ** (9) USTCNT1 を操作して送信割り込み許可(アンマスク)
 508 02ce 33FC E10C 	    move.w  #0xe10C, USTCNT1 /*送信割り込みをアンマスク*/
 508      00FF F900 
 509               	
 510               	PUTSTRING_RETURN:	
 511 02d6 2010      		move.l	(%a0), %d0	
 512               	
 513               	PUTSTRING_END:
 514 02d8 4CDF 0F00 	    movem.l	(%sp)+, %a0-%a3
 515 02dc 4E75      	    rts
 516               	
 517               		
 518               	/* STEP 6: 受信制御部の完成（GETSTRING, INTERGET）*/
 519               	/* STEP 6-1: GETSTRING */
 520               	GETSTRING:
 521 02de 48E7 7880 	    movem.l %d1-%d4/%a0, -(%sp)
 522               	
 523               	** (1) ch!=0ならば，なにも実行せず復帰
 524 02e2 0C81 0000 	    cmpi.l #0x0, %d1
 524      0000 
 525 02e8 6600 002E 	    bne GETSTRING_Exit /* d1 != 0ならば，走行レベルを回復させ処理を終了 */
 526               	
 527               	** (2) sz <- 0, i <- p
 528 02ec 7800      	    move.l #0, %d4
 529 02ee 2042      	    movea.l %d2, %a0
 530               	
 531               	GETSTRING_LOOP:
 532               	** (3) sz = sizeならば，(9)へ
 533 02f0 B684      	    cmp.l %d4, %d3
 534 02f2 6700 0024 	    beq GETSTRING_Exit
 535               	
 536               	** (4) OUTQ(0, data)により，受信キューから8bitデータ読み込み
 537 02f6 7000      	    move.l #0, %d0
 538 02f8 4EBA FEDA 	    jsr OUTQ
 539               	
 540               	** (5) OUTQの復帰値（%0の値）が0（＝失敗）なら(9)へ
 541 02fc 0C80 0000 	    cmp.l #0, %d0
 541      0000 
 542 0302 6700 0014 	    beq GETSTRING_Exit
 543               	
 544               	** (6) i番地にdataをコピー
 545 0306 1081      	    move.b %d1, (%a0)
 546               	
 547               	** (7) sz++, i++
 548 0308 0684 0000 	    addi.l #1, %d4
 548      0001 
 549 030e D1FC 0000 	    adda.l #1, %a0
 549      0001 
 550               	
 551               	** (8) (3)へ
 552 0314 6000 FFDA 	    bra GETSTRING_LOOP
 553               	


 554               	GETSTRING_Exit:
 555               	** (9) sz -> %d0
 556 0318 13FC 0038 	    move.b #'8',LED0
 556      00D0 0039 
 557 0320 2004      	    move.l %d4, %d0
 558 0322 4CDF 011E 	    movem.l (%sp)+, %d1-%d4/%a0
 559 0326 4E75      	    rts
 560               	
 561               	/* STEP 6-2: INTERGET */
 562               	***********************************************
 563               	*** INTERGET(ch, data)
 564               	*** 【機能】
 565               	*** - 受信データを受信キューに格納する
 566               	*** - チャネルchが0以外の場合は，なにも実行しない
 567               	*** 【入力】
 568               	*** - チャネル：ch -> %d1.l
 569               	*** - 受信データ：data -> %d2.b
 570               	*** 【戻り値】
 571               	*** なし
 572               	*** 【処理内容】
 573               	*** (1) ch!=0ならば，なにも実行せず復帰
 574               	*** (2) INQ(0, data)
 575               	***********************************************
 576               	
 577               	INTERGET:
 578 0328 48E7 E000 	    movem.l %d0-%d2, -(%sp)
 579               	
 580               	* (1) ch!=0ならば，なにも実行せず復帰
 581 032c 0C81 0000 	    cmpi.l #0x0, %d1
 581      0000 
 582 0332 6600 001A 	    bne INTERGET_Finish  /* 走行レベルを回復させ処理を終了 */
 583               	
 584               	* (2) INQ(0, data)
 585 0336 7000      	    move.l #0, %d0
 586 0338 1202      	    move.b %d2, %d1
 587 033a 13FC 0031 	    move.b #'1', LED2   /* 文字'1'をLEDの8桁目に表示 */
 587      00D0 003D 
 588 0342 4EBA FE22 	    jsr INQ
 589 0346 13FC 0033 	    move.b #'3', LED3   /* 文字'3'をLEDの6桁目に表示 */
 589      00D0 003F 
 590               	
 591               	INTERGET_Finish:
 592 034e 4CDF 0007 	    movem.l (%sp)+, %d0-%d2
 593 0352 4E75      	    rts
 594               	
 595               	/* STEP 7: タイマ制御部の完成（RESET_TIMER, SET_TIMER, CALL_RP, TIMER INTERFACE）*/
 596               	/* STEP 7-3: TIMER INTERFACE */
 597               	** こっからTIMER関係
 598               	** 担当：武石
 599               	timer_interface:
 600 0354 48E7 8000 	    movem.l %d0, -(%sp)         | レジスタ退避
 601 0358 3039 00FF 	    move.w TSTAT1, %d0          | とりあえずd0 = TSTAT1 にコピー
 601      F60A 
 602 035e 0240 0001 	    andi.w #0x0001, %d0         | d0 = d0 & 0x0001
 603 0362 6600 0004 	    bne timer_interface_label   | d0 = TSATA1 の第 0 ビットが 0 ならば timer_interface_lab
 604 0366 4E73      	    rte                         | 1 ならば rte で復帰
 605               	


 606               	timer_interface_label:
 607 0368 33FC 0000 	    move.w #0x0000, TSTAT1      | TSTAT1 = 0 (TSTAT1 のリセット)
 607      00FF F60A 
 608 0370 4EBA 0038 	    jsr CALL_RP                 | CALL RP を呼び出す
 609 0374 4CDF 0001 	    movem.l (%sp)+, %d0         | レジスタ回復
 610 0378 4E73      	    rte
 611               	
 612               	/* STEP 7-1: RESET TIMER */
 613               	RESET_TIMER:
 614 037a 33FC 0004 	    move.w #0x0004, TCTL1
 614      00FF F600 
 615 0382 4E75      	    rts
 616               	
 617               	/* STEP 7-2: SET TIMER */
 618               	SET_TIMER:
 619 0384 48E7 6000 	    movem.l	%d1-%d2, -(%sp)     | レジスタ退避
 620 0388 23C2 0000 	    move.l %d2, task_p          | 先頭アドレス p → %D2.L を，大域変数 task p に代
 620      0000 
 621 038e 33FC 00CE 	    move.w #0x00CE, TPRER1      | TPRER1の値は, 計算すると 206.2576 になった. 推奨値
 621      00FF F602 
 622 0396 33C1 00FF 	    move.w %d1, TCMP1           | タイマ割り込み発生周期 t を，タイマ 1 コンペ
 622      F604 
 623 039c 33FC 0015 	    move.w #0x0015, TCTL1       | TCTL1 = 0000 0000 0001 0101
 623      00FF F600 
 624 03a4 4CDF 0006 	    movem.l	(%sp)+, %d1-%d2     | レジスタ復帰
 625 03a8 4E75      	    rts
 626               	
 627               	/* STEP 7-3: CALL_RP */
 628               	CALL_RP:
 629 03aa 48E7 0080 	    movem.l	%a0, -(%sp)
 630 03ae 2079 0000 		movea.l task_p, %a0 
 630      0000 
 631 03b4 4E90      		jsr (%a0)
 632 03b6 4CDF 0100 		movem.l (%sp)+, %a0
 633 03ba 4E75      		rts
 634               	
 635               	
 636               	/* STEP 8: システムコールインタフェースの完成 */
 637               	** ここからシステムコールインタフェース
 638               	** 担当：後藤
 639               	
 640               	SYSCALL_INTERFACE:
 641               	** (1) システムコール番号 %D0 を 実行先アドレスに変換する．
 642               	** (2) システムコールを呼び出す
 643               	
 644 03bc 48E7 0080 	    movem.l %a0, -(%sp) |レジスタ退避
 645 03c0 0C80 0000 	    cmp.l #SYSCALL_NUM_GETSTRING, %d0
 645      0001 
 646 03c6 6700 0020 	    beq SYSCALL_1
 647 03ca 0C80 0000 	    cmp.l #SYSCALL_NUM_PUTSTRING, %d0
 647      0002 
 648 03d0 6700 0020 	    beq SYSCALL_2
 649 03d4 0C80 0000 	    cmp.l #SYSCALL_NUM_RESET_TIMER, %d0
 649      0003 
 650 03da 6700 0020 	    beq SYSCALL_3
 651 03de 0C80 0000 	    cmp.l #SYSCALL_NUM_SET_TIMER, %d0
 651      0004 


 652 03e4 6700 0020 	    beq SYSCALL_4
 653               	SYSCALL_1:
 654 03e8 203C 0000 	    move.l #GETSTRING, %d0
 654      0000 
 655 03ee 6000 0020 	    bra JUMP_SYSCALL
 656               	SYSCALL_2:
 657 03f2 203C 0000 	    move.l #PUTSTRING, %d0
 657      0000 
 658 03f8 6000 0016 	    bra JUMP_SYSCALL
 659               	SYSCALL_3:
 660 03fc 203C 0000 	    move.l #RESET_TIMER, %d0
 660      0000 
 661 0402 6000 000C 	    bra JUMP_SYSCALL
 662               	SYSCALL_4:
 663 0406 203C 0000 	    move.l #SET_TIMER, %d0
 663      0000 
 664 040c 6000 0002 	    bra JUMP_SYSCALL
 665               	JUMP_SYSCALL:
 666 0410 2040      	    movea.l %d0, %a0
 667 0412 4E90      	    jsr (%a0)
 668               	SYSCALL_INTERFACE_FINISH:
 669 0414 4CDF 0100 	    movem.l (%sp)+,%a0  |レジスタ復帰
 670 0418 4E73      	    rte
 671               	
 672               	    
 673               	.section .data
 674               	
 675               	/* STEP 0-1: キューの初期化ルーチン */
 676               	** (2) データ領域のアドレス（先頭・末尾）を代入，データ数の初期化
 677 000a 0000 0000 	Que_START:	.ds.b	536
 677      0000 0000 
 677      0000 0000 
 677      0000 0000 
 677      0000 0000 
 678               	
 679               		/*キューの各先頭アドレス*/
 680               	    .equ    Que0, Que_START
 681               	    .equ    Que1, Que0 + 0x0000010c
 682               		
 683               		/*キューの各要素のオフセット*/
 684               		.equ	out, 0
 685               		.equ	in, 4
 686               		.equ	s, 8  /*2byte分確保*/
 687               		.equ	top, 10
 688               		.equ	bottom, 266
 689               	
 690 0222 0000 0000 	sz:		.ds.l 1
 691 0226 0000 0000 	i: 		.ds.l 1
 692               	.end




   1               	#NO_APP
   2               		.file	"csys68k.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	read
   8               		.type	read, @function
   9               	read:
  10               	.LVL0:
  11               	.LFB0:
  12               		.file 1 "csys68k.c"
   1:csys68k.c     **** #include <stdarg.h>
   2:csys68k.c     **** #include <fcntl.h>
   3:csys68k.c     **** #include <errno.h>
   4:csys68k.c     **** 
   5:csys68k.c     **** extern void outbyte(unsigned char c, int fd);
   6:csys68k.c     **** extern char inbyte(int fd);
   7:csys68k.c     **** 
   8:csys68k.c     **** int read(int fd, char *buf, int nbytes)
   9:csys68k.c     **** {
  13               		.loc 1 9 1 view -0
  14               		.cfi_startproc
  15               		.loc 1 9 1 is_stmt 0 view .LVU1
  16 0000 48E7 3C38 		movem.l #15416,-(%sp)
  17               		.cfi_def_cfa_offset 32
  18               		.cfi_offset 2, -32
  19               		.cfi_offset 3, -28
  20               		.cfi_offset 4, -24
  21               		.cfi_offset 5, -20
  22               		.cfi_offset 10, -16
  23               		.cfi_offset 11, -12
  24               		.cfi_offset 12, -8
  25 0004 282F 0020 		move.l 32(%sp),%d4
  26 0008 286F 0024 		move.l 36(%sp),%a4
  27 000c 2A2F 0028 		move.l 40(%sp),%d5
  10:csys68k.c     ****   char c;
  28               		.loc 1 10 3 is_stmt 1 view .LVU2
  11:csys68k.c     ****   int  i;
  29               		.loc 1 11 3 view .LVU3
  12:csys68k.c     ****   int ch;
  30               		.loc 1 12 3 view .LVU4
  13:csys68k.c     ****   
  14:csys68k.c     ****   if(fd == 0 || fd == 3)  ch = 0;
  31               		.loc 1 14 3 view .LVU5
  32 0010 7003      		moveq #3,%d0
  33 0012 B084      		cmp.l %d4,%d0
  34 0014 6700 00B6 		jeq .L10
  35 0018 7004      		moveq #4,%d0
  36 001a B084      		cmp.l %d4,%d0
  37 001c 670E      		jeq .L11
  38 001e 4A84      		tst.l %d4
  39 0020 670C      		jeq .L2
  15:csys68k.c     ****   else if(fd == 4)        ch = 1;
  16:csys68k.c     ****   else                    return EBADF;
  17:csys68k.c     ****   
  18:csys68k.c     **** 


  19:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
  40               		.loc 1 19 10 is_stmt 0 view .LVU6
  41 0022 7609      		moveq #9,%d3
  42               	.L1:
  20:csys68k.c     ****     c = inbyte(ch);
  21:csys68k.c     **** 
  22:csys68k.c     ****     if (c == '\r' || c == '\n'){ /* CR -> CRLF */
  23:csys68k.c     ****       outbyte('\r', ch);
  24:csys68k.c     ****       outbyte('\n', ch);
  25:csys68k.c     ****       *(buf + i) = '\n';
  26:csys68k.c     **** 
  27:csys68k.c     ****     /* } else if (c == '\x8'){ */     /* backspace \x8 */
  28:csys68k.c     ****     } else if (c == '\x7f'){      /* backspace \x8 -> \x7f (by terminal config.) */
  29:csys68k.c     ****       if (i > 0){
  30:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
  31:csys68k.c     ****         outbyte(' ', ch);   /* spc */
  32:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
  33:csys68k.c     **** 	      i--;
  34:csys68k.c     ****       }
  35:csys68k.c     ****       i--;
  36:csys68k.c     ****       continue;
  37:csys68k.c     **** 
  38:csys68k.c     ****     } else {
  39:csys68k.c     ****       outbyte(c, ch);
  40:csys68k.c     ****       *(buf + i) = c;
  41:csys68k.c     ****     }
  42:csys68k.c     **** 
  43:csys68k.c     ****     if (*(buf + i) == '\n'){
  44:csys68k.c     ****       return (i + 1);
  45:csys68k.c     ****     }
  46:csys68k.c     ****   }
  47:csys68k.c     ****   return (i);
  48:csys68k.c     **** }
  43               		.loc 1 48 1 view .LVU7
  44 0024 2003      		move.l %d3,%d0
  45 0026 4CDF 1C3C 		movem.l (%sp)+,#7228
  46 002a 4E75      		rts
  47               	.L11:
   9:csys68k.c     ****   char c;
  48               		.loc 1 9 1 view .LVU8
  49 002c 7801      		moveq #1,%d4
  50               	.L2:
  51               	.LVL1:
  19:csys68k.c     ****     c = inbyte(ch);
  52               		.loc 1 19 3 is_stmt 1 view .LVU9
  19:csys68k.c     ****     c = inbyte(ch);
  53               		.loc 1 19 17 view .LVU10
  19:csys68k.c     ****     c = inbyte(ch);
  54               		.loc 1 19 10 is_stmt 0 view .LVU11
  55 002e 7600      		moveq #0,%d3
  19:csys68k.c     ****     c = inbyte(ch);
  56               		.loc 1 19 17 view .LVU12
  57 0030 4A85      		tst.l %d5
  58 0032 6FF0      		jle .L1
  59 0034 47F9 0000 		lea inbyte,%a3
  59      0000 
  60 003a 45F9 0000 		lea outbyte,%a2


  60      0000 
  61               	.LVL2:
  62               	.L9:
  20:csys68k.c     ****     c = inbyte(ch);
  63               		.loc 1 20 5 is_stmt 1 view .LVU13
  20:csys68k.c     ****     c = inbyte(ch);
  64               		.loc 1 20 9 is_stmt 0 view .LVU14
  65 0040 2F04      		move.l %d4,-(%sp)
  66               		.cfi_def_cfa_offset 36
  67 0042 4E93      		jsr (%a3)
  68               	.LVL3:
  69 0044 1400      		move.b %d0,%d2
  70               	.LVL4:
  22:csys68k.c     ****       outbyte('\r', ch);
  71               		.loc 1 22 5 is_stmt 1 view .LVU15
  22:csys68k.c     ****       outbyte('\r', ch);
  72               		.loc 1 22 8 is_stmt 0 view .LVU16
  73 0046 588F      		addq.l #4,%sp
  74               		.cfi_def_cfa_offset 32
  75 0048 0C00 000D 		cmp.b #13,%d0
  76 004c 6730      		jeq .L4
  77               	.L24:
  22:csys68k.c     ****       outbyte('\r', ch);
  78               		.loc 1 22 19 discriminator 1 view .LVU17
  79 004e 0C00 000A 		cmp.b #10,%d0
  80 0052 672A      		jeq .L4
  28:csys68k.c     ****       if (i > 0){
  81               		.loc 1 28 12 is_stmt 1 view .LVU18
  28:csys68k.c     ****       if (i > 0){
  82               		.loc 1 28 15 is_stmt 0 view .LVU19
  83 0054 0C00 007F 		cmp.b #127,%d0
  84 0058 6748      		jeq .L23
  39:csys68k.c     ****       *(buf + i) = c;
  85               		.loc 1 39 7 is_stmt 1 view .LVU20
  86 005a 2F04      		move.l %d4,-(%sp)
  87               		.cfi_def_cfa_offset 36
  88 005c 7000      		moveq #0,%d0
  89               	.LVL5:
  39:csys68k.c     ****       *(buf + i) = c;
  90               		.loc 1 39 7 is_stmt 0 view .LVU21
  91 005e 1002      		move.b %d2,%d0
  92 0060 2F00      		move.l %d0,-(%sp)
  93               		.cfi_def_cfa_offset 40
  94 0062 4E92      		jsr (%a2)
  95               	.LVL6:
  40:csys68k.c     ****     }
  96               		.loc 1 40 7 is_stmt 1 view .LVU22
  40:csys68k.c     ****     }
  97               		.loc 1 40 18 is_stmt 0 view .LVU23
  98 0064 1982 3800 		move.b %d2,(%a4,%d3.l)
  43:csys68k.c     ****       return (i + 1);
  99               		.loc 1 43 5 is_stmt 1 view .LVU24
  44:csys68k.c     ****     }
 100               		.loc 1 44 17 is_stmt 0 view .LVU25
 101 0068 5283      		addq.l #1,%d3
 102               	.LVL7:
  44:csys68k.c     ****     }


 103               		.loc 1 44 17 view .LVU26
 104 006a 508F      		addq.l #8,%sp
 105               		.cfi_def_cfa_offset 32
 106               	.LVL8:
  19:csys68k.c     ****     c = inbyte(ch);
 107               		.loc 1 19 28 is_stmt 1 view .LVU27
  19:csys68k.c     ****     c = inbyte(ch);
 108               		.loc 1 19 17 view .LVU28
 109 006c B685      		cmp.l %d5,%d3
 110 006e 6CB4      		jge .L1
 111               	.L22:
 112               	.LVL9:
  20:csys68k.c     **** 
 113               		.loc 1 20 5 view .LVU29
  20:csys68k.c     **** 
 114               		.loc 1 20 9 is_stmt 0 view .LVU30
 115 0070 2F04      		move.l %d4,-(%sp)
 116               		.cfi_def_cfa_offset 36
 117 0072 4E93      		jsr (%a3)
 118               	.LVL10:
 119 0074 1400      		move.b %d0,%d2
 120               	.LVL11:
  22:csys68k.c     ****       outbyte('\r', ch);
 121               		.loc 1 22 5 is_stmt 1 view .LVU31
  22:csys68k.c     ****       outbyte('\r', ch);
 122               		.loc 1 22 8 is_stmt 0 view .LVU32
 123 0076 588F      		addq.l #4,%sp
 124               		.cfi_def_cfa_offset 32
 125 0078 0C00 000D 		cmp.b #13,%d0
 126 007c 66D0      		jne .L24
 127               	.L4:
  23:csys68k.c     ****       outbyte('\n', ch);
 128               		.loc 1 23 7 is_stmt 1 view .LVU33
 129 007e 2F04      		move.l %d4,-(%sp)
 130               		.cfi_def_cfa_offset 36
 131 0080 4878 000D 		pea 13.w
 132               		.cfi_def_cfa_offset 40
 133 0084 4E92      		jsr (%a2)
 134               	.LVL12:
  24:csys68k.c     ****       *(buf + i) = '\n';
 135               		.loc 1 24 7 view .LVU34
 136 0086 2F04      		move.l %d4,-(%sp)
 137               		.cfi_def_cfa_offset 44
 138 0088 4878 000A 		pea 10.w
 139               		.cfi_def_cfa_offset 48
 140 008c 4E92      		jsr (%a2)
 141               	.LVL13:
  25:csys68k.c     **** 
 142               		.loc 1 25 7 view .LVU35
  25:csys68k.c     **** 
 143               		.loc 1 25 18 is_stmt 0 view .LVU36
 144 008e 19BC 000A 		move.b #10,(%a4,%d3.l)
 144      3800 
  43:csys68k.c     ****       return (i + 1);
 145               		.loc 1 43 5 is_stmt 1 view .LVU37
  44:csys68k.c     ****     }
 146               		.loc 1 44 7 view .LVU38


  44:csys68k.c     ****     }
 147               		.loc 1 44 17 is_stmt 0 view .LVU39
 148 0094 5283      		addq.l #1,%d3
 149               	.LVL14:
  44:csys68k.c     ****     }
 150               		.loc 1 44 17 view .LVU40
 151 0096 4FEF 0010 		lea (16,%sp),%sp
 152               		.cfi_def_cfa_offset 32
 153               		.loc 1 48 1 view .LVU41
 154 009a 2003      		move.l %d3,%d0
 155 009c 4CDF 1C3C 		movem.l (%sp)+,#7228
 156               	.LVL15:
 157               		.loc 1 48 1 view .LVU42
 158 00a0 4E75      		rts
 159               	.LVL16:
 160               	.L23:
  29:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
 161               		.loc 1 29 7 is_stmt 1 view .LVU43
  29:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
 162               		.loc 1 29 10 is_stmt 0 view .LVU44
 163 00a2 4A83      		tst.l %d3
 164 00a4 679A      		jeq .L9
  33:csys68k.c     ****       }
 165               		.loc 1 33 9 view .LVU45
 166 00a6 5383      		subq.l #1,%d3
 167               	.LVL17:
  30:csys68k.c     ****         outbyte(' ', ch);   /* spc */
 168               		.loc 1 30 9 is_stmt 1 view .LVU46
 169 00a8 2F04      		move.l %d4,-(%sp)
 170               		.cfi_def_cfa_offset 36
 171 00aa 4878 0008 		pea 8.w
 172               		.cfi_def_cfa_offset 40
 173 00ae 4E92      		jsr (%a2)
 174               	.LVL18:
  31:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
 175               		.loc 1 31 9 view .LVU47
 176 00b0 2F04      		move.l %d4,-(%sp)
 177               		.cfi_def_cfa_offset 44
 178 00b2 4878 0020 		pea 32.w
 179               		.cfi_def_cfa_offset 48
 180 00b6 4E92      		jsr (%a2)
 181               	.LVL19:
  32:csys68k.c     **** 	      i--;
 182               		.loc 1 32 9 view .LVU48
 183 00b8 2F04      		move.l %d4,-(%sp)
 184               		.cfi_def_cfa_offset 52
 185 00ba 4878 0008 		pea 8.w
 186               		.cfi_def_cfa_offset 56
 187 00be 4E92      		jsr (%a2)
 188               	.LVL20:
  33:csys68k.c     ****       }
 189               		.loc 1 33 8 view .LVU49
  35:csys68k.c     ****       continue;
 190               		.loc 1 35 7 view .LVU50
  36:csys68k.c     **** 
 191               		.loc 1 36 7 view .LVU51
 192 00c0 4FEF 0018 		lea (24,%sp),%sp


 193               		.cfi_def_cfa_offset 32
 194               	.LVL21:
  19:csys68k.c     ****     c = inbyte(ch);
 195               		.loc 1 19 28 view .LVU52
  19:csys68k.c     ****     c = inbyte(ch);
 196               		.loc 1 19 17 view .LVU53
 197 00c4 B685      		cmp.l %d5,%d3
 198 00c6 6DA8      		jlt .L22
 199 00c8 6000 FF5A 		jra .L1
 200               	.LVL22:
 201               	.L10:
   9:csys68k.c     ****   char c;
 202               		.loc 1 9 1 is_stmt 0 view .LVU54
 203 00cc 7800      		moveq #0,%d4
 204 00ce 6000 FF5E 		jra .L2
 205               		.cfi_endproc
 206               	.LFE0:
 207               		.size	read, .-read
 208               		.align	2
 209               		.globl	write
 210               		.type	write, @function
 211               	write:
 212               	.LVL23:
 213               	.LFB1:
  49:csys68k.c     **** 
  50:csys68k.c     **** int write (int fd, char *buf, int nbytes)
  51:csys68k.c     **** {
 214               		.loc 1 51 1 is_stmt 1 view -0
 215               		.cfi_startproc
 216               		.loc 1 51 1 is_stmt 0 view .LVU56
 217 00d2 48E7 3830 		movem.l #14384,-(%sp)
 218               		.cfi_def_cfa_offset 24
 219               		.cfi_offset 2, -24
 220               		.cfi_offset 3, -20
 221               		.cfi_offset 4, -16
 222               		.cfi_offset 10, -12
 223               		.cfi_offset 11, -8
 224 00d6 282F 0020 		move.l 32(%sp),%d4
  52:csys68k.c     ****   int i, j;
 225               		.loc 1 52 3 is_stmt 1 view .LVU57
  53:csys68k.c     ****   int ch;
 226               		.loc 1 53 3 view .LVU58
  54:csys68k.c     ****   
  55:csys68k.c     ****   if(fd == 1 || fd == 2 || fd == 3) ch = 0;
 227               		.loc 1 55 3 view .LVU59
 228               		.loc 1 55 25 is_stmt 0 view .LVU60
 229 00da 202F 0018 		move.l 24(%sp),%d0
 230 00de 5380      		subq.l #1,%d0
 231               		.loc 1 55 5 view .LVU61
 232 00e0 7202      		moveq #2,%d1
 233 00e2 B280      		cmp.l %d0,%d1
 234 00e4 643E      		jcc .L32
  56:csys68k.c     ****   else if(fd == 4)                  ch = 1;
 235               		.loc 1 56 8 is_stmt 1 view .LVU62
 236               		.loc 1 56 10 is_stmt 0 view .LVU63
 237 00e6 7004      		moveq #4,%d0
 238 00e8 B0AF 0018 		cmp.l 24(%sp),%d0


 239 00ec 665C      		jne .L33
 240               		.loc 1 56 40 view .LVU64
 241 00ee 7401      		moveq #1,%d2
 242               	.L26:
 243               	.LVL24:
  57:csys68k.c     ****   else                              return EBADF;
  58:csys68k.c     **** 
  59:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
 244               		.loc 1 59 3 is_stmt 1 view .LVU65
 245               		.loc 1 59 17 view .LVU66
 246 00f0 4A84      		tst.l %d4
 247 00f2 6F28      		jle .L31
 248 00f4 246F 001C 		move.l 28(%sp),%a2
 249 00f8 260A      		move.l %a2,%d3
 250 00fa D684      		add.l %d4,%d3
 251 00fc 47F9 0000 		lea outbyte,%a3
 251      0000 
 252               	.LVL25:
 253               	.L30:
  60:csys68k.c     ****     if (*(buf + i) == '\n') {
 254               		.loc 1 60 5 view .LVU67
 255               		.loc 1 60 9 is_stmt 0 view .LVU68
 256 0102 121A      		move.b (%a2)+,%d1
 257               	.LVL26:
 258               		.loc 1 60 8 view .LVU69
 259 0104 0C01 000A 		cmp.b #10,%d1
 260 0108 671E      		jeq .L37
  61:csys68k.c     ****       outbyte('\r', ch);          /* LF -> CRLF */
  62:csys68k.c     ****     }
  63:csys68k.c     ****     outbyte(*(buf + i), ch);
 261               		.loc 1 63 5 is_stmt 1 view .LVU70
 262 010a 2F02      		move.l %d2,-(%sp)
 263               		.cfi_def_cfa_offset 28
 264 010c 0281 0000 		and.l #255,%d1
 264      00FF 
 265 0112 2F01      		move.l %d1,-(%sp)
 266               		.cfi_def_cfa_offset 32
 267 0114 4E93      		jsr (%a3)
 268               	.LVL27:
  64:csys68k.c     ****     for (j = 0; j < 300; j++);
 269               		.loc 1 64 5 view .LVU71
 270               		.loc 1 64 19 view .LVU72
  59:csys68k.c     ****     if (*(buf + i) == '\n') {
 271               		.loc 1 59 28 view .LVU73
  59:csys68k.c     ****     if (*(buf + i) == '\n') {
 272               		.loc 1 59 17 view .LVU74
 273 0116 508F      		addq.l #8,%sp
 274               		.cfi_def_cfa_offset 24
 275 0118 B68A      		cmp.l %a2,%d3
 276 011a 66E6      		jne .L30
 277               	.LVL28:
 278               	.L31:
  57:csys68k.c     **** 
 279               		.loc 1 57 44 is_stmt 0 view .LVU75
 280 011c 2004      		move.l %d4,%d0
  65:csys68k.c     ****   }
  66:csys68k.c     ****   return (nbytes);


  67:csys68k.c     **** }
 281               		.loc 1 67 1 view .LVU76
 282 011e 4CDF 0C1C 		movem.l (%sp)+,#3100
 283               	.LVL29:
 284               		.loc 1 67 1 view .LVU77
 285 0122 4E75      		rts
 286               	.L32:
  55:csys68k.c     ****   else if(fd == 4)                  ch = 1;
 287               		.loc 1 55 40 view .LVU78
 288 0124 7400      		moveq #0,%d2
 289 0126 60C8      		jra .L26
 290               	.LVL30:
 291               	.L37:
  61:csys68k.c     ****     }
 292               		.loc 1 61 7 is_stmt 1 view .LVU79
 293 0128 2F02      		move.l %d2,-(%sp)
 294               		.cfi_def_cfa_offset 28
 295 012a 4878 000D 		pea 13.w
 296               		.cfi_def_cfa_offset 32
 297 012e 4E93      		jsr (%a3)
 298               	.LVL31:
  63:csys68k.c     ****     for (j = 0; j < 300; j++);
 299               		.loc 1 63 13 is_stmt 0 view .LVU80
 300 0130 122A FFFF 		move.b -1(%a2),%d1
 301 0134 508F      		addq.l #8,%sp
 302               		.cfi_def_cfa_offset 24
  63:csys68k.c     ****     for (j = 0; j < 300; j++);
 303               		.loc 1 63 5 is_stmt 1 view .LVU81
 304 0136 2F02      		move.l %d2,-(%sp)
 305               		.cfi_def_cfa_offset 28
 306 0138 0281 0000 		and.l #255,%d1
 306      00FF 
 307 013e 2F01      		move.l %d1,-(%sp)
 308               		.cfi_def_cfa_offset 32
 309 0140 4E93      		jsr (%a3)
 310               	.LVL32:
  64:csys68k.c     ****   }
 311               		.loc 1 64 5 view .LVU82
  64:csys68k.c     ****   }
 312               		.loc 1 64 19 view .LVU83
  59:csys68k.c     ****     if (*(buf + i) == '\n') {
 313               		.loc 1 59 28 view .LVU84
  59:csys68k.c     ****     if (*(buf + i) == '\n') {
 314               		.loc 1 59 17 view .LVU85
 315 0142 508F      		addq.l #8,%sp
 316               		.cfi_def_cfa_offset 24
 317 0144 B68A      		cmp.l %a2,%d3
 318 0146 66BA      		jne .L30
 319 0148 60D2      		jra .L31
 320               	.LVL33:
 321               	.L33:
  57:csys68k.c     **** 
 322               		.loc 1 57 44 is_stmt 0 view .LVU86
 323 014a 7009      		moveq #9,%d0
 324               		.loc 1 67 1 view .LVU87
 325 014c 4CDF 0C1C 		movem.l (%sp)+,#3100
 326 0150 4E75      		rts


 327               		.cfi_endproc
 328               	.LFE1:
 329               		.size	write, .-write
 330               	.Letext0:
 331               		.section	.debug_info,"",@progbits
 332               	.Ldebug_info0:
 333 0000 0000 01F2 		.long	0x1f2
 334 0004 0005      		.word	0x5
 335 0006 01        		.byte	0x1
 336 0007 04        		.byte	0x4
 337 0008 0000 0000 		.long	.Ldebug_abbrev0
 338 000c 07        		.uleb128 0x7
 339 000d 0000 0000 		.long	.LASF12
 340 0011 1D        		.byte	0x1d
 341 0012 0000 0000 		.long	.LASF13
 342 0016 0000 0000 		.long	.LASF14
 343 001a 0000 0000 		.long	.Ltext0
 344 001e 0000 0152 		.long	.Letext0-.Ltext0
 345 0022 0000 0000 		.long	.Ldebug_line0
 346 0026 01        		.uleb128 0x1
 347 0027 01        		.byte	0x1
 348 0028 06        		.byte	0x6
 349 0029 0000 0000 		.long	.LASF0
 350 002d 01        		.uleb128 0x1
 351 002e 01        		.byte	0x1
 352 002f 08        		.byte	0x8
 353 0030 0000 0000 		.long	.LASF1
 354 0034 01        		.uleb128 0x1
 355 0035 02        		.byte	0x2
 356 0036 05        		.byte	0x5
 357 0037 0000 0000 		.long	.LASF2
 358 003b 01        		.uleb128 0x1
 359 003c 02        		.byte	0x2
 360 003d 07        		.byte	0x7
 361 003e 0000 0000 		.long	.LASF3
 362 0042 01        		.uleb128 0x1
 363 0043 04        		.byte	0x4
 364 0044 05        		.byte	0x5
 365 0045 0000 0000 		.long	.LASF4
 366 0049 01        		.uleb128 0x1
 367 004a 04        		.byte	0x4
 368 004b 07        		.byte	0x7
 369 004c 0000 0000 		.long	.LASF5
 370 0050 01        		.uleb128 0x1
 371 0051 08        		.byte	0x8
 372 0052 05        		.byte	0x5
 373 0053 0000 0000 		.long	.LASF6
 374 0057 01        		.uleb128 0x1
 375 0058 08        		.byte	0x8
 376 0059 07        		.byte	0x7
 377 005a 0000 0000 		.long	.LASF7
 378 005e 01        		.uleb128 0x1
 379 005f 0C        		.byte	0xc
 380 0060 04        		.byte	0x4
 381 0061 0000 0000 		.long	.LASF8
 382 0065 01        		.uleb128 0x1
 383 0066 04        		.byte	0x4


 384 0067 07        		.byte	0x7
 385 0068 0000 0000 		.long	.LASF9
 386 006c 08        		.uleb128 0x8
 387 006d 04        		.byte	0x4
 388 006e 05        		.byte	0x5
 389 006f 696E 7400 		.string	"int"
 390 0073 09        		.uleb128 0x9
 391 0074 04        		.byte	0x4
 392 0075 0000 0079 		.long	0x79
 393 0079 01        		.uleb128 0x1
 394 007a 01        		.byte	0x1
 395 007b 06        		.byte	0x6
 396 007c 0000 0000 		.long	.LASF10
 397 0080 0A        		.uleb128 0xa
 398 0081 0000 0000 		.long	.LASF15
 399 0085 01        		.byte	0x1
 400 0086 05        		.byte	0x5
 401 0087 0D        		.byte	0xd
 402 0088 0000 0097 		.long	0x97
 403 008c 05        		.uleb128 0x5
 404 008d 0000 002D 		.long	0x2d
 405 0091 05        		.uleb128 0x5
 406 0092 0000 006C 		.long	0x6c
 407 0096 00        		.byte	0
 408 0097 0B        		.uleb128 0xb
 409 0098 0000 0000 		.long	.LASF16
 410 009c 01        		.byte	0x1
 411 009d 06        		.byte	0x6
 412 009e 0D        		.byte	0xd
 413 009f 0000 0079 		.long	0x79
 414 00a3 0000 00AD 		.long	0xad
 415 00a7 05        		.uleb128 0x5
 416 00a8 0000 006C 		.long	0x6c
 417 00ac 00        		.byte	0
 418 00ad 0C        		.uleb128 0xc
 419 00ae 0000 0000 		.long	.LASF17
 420 00b2 01        		.byte	0x1
 421 00b3 32        		.byte	0x32
 422 00b4 05        		.byte	0x5
 423 00b5 0000 006C 		.long	0x6c
 424 00b9 0000 0000 		.long	.LFB1
 425 00bd 0000 0080 		.long	.LFE1-.LFB1
 426 00c1 01        		.uleb128 0x1
 427 00c2 9C        		.byte	0x9c
 428 00c3 0000 0139 		.long	0x139
 429 00c7 04        		.uleb128 0x4
 430 00c8 6664 00   		.string	"fd"
 431 00cb 32        		.byte	0x32
 432 00cc 10        		.byte	0x10
 433 00cd 0000 006C 		.long	0x6c
 434 00d1 02        		.uleb128 0x2
 435 00d2 91        		.byte	0x91
 436 00d3 00        		.sleb128 0
 437 00d4 04        		.uleb128 0x4
 438 00d5 6275 6600 		.string	"buf"
 439 00d9 32        		.byte	0x32
 440 00da 1A        		.byte	0x1a


 441 00db 0000 0073 		.long	0x73
 442 00df 02        		.uleb128 0x2
 443 00e0 91        		.byte	0x91
 444 00e1 04        		.sleb128 4
 445 00e2 06        		.uleb128 0x6
 446 00e3 0000 0000 		.long	.LASF11
 447 00e7 32        		.byte	0x32
 448 00e8 23        		.byte	0x23
 449 00e9 0000 006C 		.long	0x6c
 450 00ed 02        		.uleb128 0x2
 451 00ee 91        		.byte	0x91
 452 00ef 08        		.sleb128 8
 453 00f0 03        		.uleb128 0x3
 454 00f1 6900      		.string	"i"
 455 00f3 34        		.byte	0x34
 456 00f4 07        		.byte	0x7
 457 00f5 0000 006C 		.long	0x6c
 458 00f9 0000 0000 		.long	.LLST3
 459 00fd 0000 0000 		.long	.LVUS3
 460 0101 0D        		.uleb128 0xd
 461 0102 6A00      		.string	"j"
 462 0104 01        		.byte	0x1
 463 0105 34        		.byte	0x34
 464 0106 0A        		.byte	0xa
 465 0107 0000 006C 		.long	0x6c
 466 010b 03        		.uleb128 0x3
 467 010c 6368 00   		.string	"ch"
 468 010f 35        		.byte	0x35
 469 0110 07        		.byte	0x7
 470 0111 0000 006C 		.long	0x6c
 471 0115 0000 0000 		.long	.LLST4
 472 0119 0000 0000 		.long	.LVUS4
 473 011d 02        		.uleb128 0x2
 474 011e 0000 0000 		.long	.LVL27
 475 0122 0000 0080 		.long	0x80
 476 0126 02        		.uleb128 0x2
 477 0127 0000 0000 		.long	.LVL31
 478 012b 0000 0080 		.long	0x80
 479 012f 02        		.uleb128 0x2
 480 0130 0000 0000 		.long	.LVL32
 481 0134 0000 0080 		.long	0x80
 482 0138 00        		.byte	0
 483 0139 0E        		.uleb128 0xe
 484 013a 0000 0000 		.long	.LASF18
 485 013e 01        		.byte	0x1
 486 013f 08        		.byte	0x8
 487 0140 05        		.byte	0x5
 488 0141 0000 006C 		.long	0x6c
 489 0145 0000 0000 		.long	.LFB0
 490 0149 0000 00D2 		.long	.LFE0-.LFB0
 491 014d 01        		.uleb128 0x1
 492 014e 9C        		.byte	0x9c
 493 014f 04        		.uleb128 0x4
 494 0150 6664 00   		.string	"fd"
 495 0153 08        		.byte	0x8
 496 0154 0E        		.byte	0xe
 497 0155 0000 006C 		.long	0x6c


 498 0159 02        		.uleb128 0x2
 499 015a 91        		.byte	0x91
 500 015b 00        		.sleb128 0
 501 015c 04        		.uleb128 0x4
 502 015d 6275 6600 		.string	"buf"
 503 0161 08        		.byte	0x8
 504 0162 18        		.byte	0x18
 505 0163 0000 0073 		.long	0x73
 506 0167 02        		.uleb128 0x2
 507 0168 91        		.byte	0x91
 508 0169 04        		.sleb128 4
 509 016a 06        		.uleb128 0x6
 510 016b 0000 0000 		.long	.LASF11
 511 016f 08        		.byte	0x8
 512 0170 21        		.byte	0x21
 513 0171 0000 006C 		.long	0x6c
 514 0175 02        		.uleb128 0x2
 515 0176 91        		.byte	0x91
 516 0177 08        		.sleb128 8
 517 0178 03        		.uleb128 0x3
 518 0179 6300      		.string	"c"
 519 017b 0A        		.byte	0xa
 520 017c 08        		.byte	0x8
 521 017d 0000 0079 		.long	0x79
 522 0181 0000 0000 		.long	.LLST0
 523 0185 0000 0000 		.long	.LVUS0
 524 0189 03        		.uleb128 0x3
 525 018a 6900      		.string	"i"
 526 018c 0B        		.byte	0xb
 527 018d 08        		.byte	0x8
 528 018e 0000 006C 		.long	0x6c
 529 0192 0000 0000 		.long	.LLST1
 530 0196 0000 0000 		.long	.LVUS1
 531 019a 03        		.uleb128 0x3
 532 019b 6368 00   		.string	"ch"
 533 019e 0C        		.byte	0xc
 534 019f 07        		.byte	0x7
 535 01a0 0000 006C 		.long	0x6c
 536 01a4 0000 0000 		.long	.LLST2
 537 01a8 0000 0000 		.long	.LVUS2
 538 01ac 02        		.uleb128 0x2
 539 01ad 0000 0000 		.long	.LVL3
 540 01b1 0000 0097 		.long	0x97
 541 01b5 02        		.uleb128 0x2
 542 01b6 0000 0000 		.long	.LVL6
 543 01ba 0000 0080 		.long	0x80
 544 01be 02        		.uleb128 0x2
 545 01bf 0000 0000 		.long	.LVL10
 546 01c3 0000 0097 		.long	0x97
 547 01c7 02        		.uleb128 0x2
 548 01c8 0000 0000 		.long	.LVL12
 549 01cc 0000 0080 		.long	0x80
 550 01d0 02        		.uleb128 0x2
 551 01d1 0000 0000 		.long	.LVL13
 552 01d5 0000 0080 		.long	0x80
 553 01d9 02        		.uleb128 0x2
 554 01da 0000 0000 		.long	.LVL18


 555 01de 0000 0080 		.long	0x80
 556 01e2 02        		.uleb128 0x2
 557 01e3 0000 0000 		.long	.LVL19
 558 01e7 0000 0080 		.long	0x80
 559 01eb 02        		.uleb128 0x2
 560 01ec 0000 0000 		.long	.LVL20
 561 01f0 0000 0080 		.long	0x80
 562 01f4 00        		.byte	0
 563 01f5 00        		.byte	0
 564               		.section	.debug_abbrev,"",@progbits
 565               	.Ldebug_abbrev0:
 566 0000 01        		.uleb128 0x1
 567 0001 24        		.uleb128 0x24
 568 0002 00        		.byte	0
 569 0003 0B        		.uleb128 0xb
 570 0004 0B        		.uleb128 0xb
 571 0005 3E        		.uleb128 0x3e
 572 0006 0B        		.uleb128 0xb
 573 0007 03        		.uleb128 0x3
 574 0008 0E        		.uleb128 0xe
 575 0009 00        		.byte	0
 576 000a 00        		.byte	0
 577 000b 02        		.uleb128 0x2
 578 000c 48        		.uleb128 0x48
 579 000d 00        		.byte	0
 580 000e 7D        		.uleb128 0x7d
 581 000f 01        		.uleb128 0x1
 582 0010 7F        		.uleb128 0x7f
 583 0011 13        		.uleb128 0x13
 584 0012 00        		.byte	0
 585 0013 00        		.byte	0
 586 0014 03        		.uleb128 0x3
 587 0015 34        		.uleb128 0x34
 588 0016 00        		.byte	0
 589 0017 03        		.uleb128 0x3
 590 0018 08        		.uleb128 0x8
 591 0019 3A        		.uleb128 0x3a
 592 001a 21        		.uleb128 0x21
 593 001b 01        		.sleb128 1
 594 001c 3B        		.uleb128 0x3b
 595 001d 0B        		.uleb128 0xb
 596 001e 39        		.uleb128 0x39
 597 001f 0B        		.uleb128 0xb
 598 0020 49        		.uleb128 0x49
 599 0021 13        		.uleb128 0x13
 600 0022 02        		.uleb128 0x2
 601 0023 17        		.uleb128 0x17
 602 0024 B742      		.uleb128 0x2137
 603 0026 17        		.uleb128 0x17
 604 0027 00        		.byte	0
 605 0028 00        		.byte	0
 606 0029 04        		.uleb128 0x4
 607 002a 05        		.uleb128 0x5
 608 002b 00        		.byte	0
 609 002c 03        		.uleb128 0x3
 610 002d 08        		.uleb128 0x8
 611 002e 3A        		.uleb128 0x3a


 612 002f 21        		.uleb128 0x21
 613 0030 01        		.sleb128 1
 614 0031 3B        		.uleb128 0x3b
 615 0032 0B        		.uleb128 0xb
 616 0033 39        		.uleb128 0x39
 617 0034 0B        		.uleb128 0xb
 618 0035 49        		.uleb128 0x49
 619 0036 13        		.uleb128 0x13
 620 0037 02        		.uleb128 0x2
 621 0038 18        		.uleb128 0x18
 622 0039 00        		.byte	0
 623 003a 00        		.byte	0
 624 003b 05        		.uleb128 0x5
 625 003c 05        		.uleb128 0x5
 626 003d 00        		.byte	0
 627 003e 49        		.uleb128 0x49
 628 003f 13        		.uleb128 0x13
 629 0040 00        		.byte	0
 630 0041 00        		.byte	0
 631 0042 06        		.uleb128 0x6
 632 0043 05        		.uleb128 0x5
 633 0044 00        		.byte	0
 634 0045 03        		.uleb128 0x3
 635 0046 0E        		.uleb128 0xe
 636 0047 3A        		.uleb128 0x3a
 637 0048 21        		.uleb128 0x21
 638 0049 01        		.sleb128 1
 639 004a 3B        		.uleb128 0x3b
 640 004b 0B        		.uleb128 0xb
 641 004c 39        		.uleb128 0x39
 642 004d 0B        		.uleb128 0xb
 643 004e 49        		.uleb128 0x49
 644 004f 13        		.uleb128 0x13
 645 0050 02        		.uleb128 0x2
 646 0051 18        		.uleb128 0x18
 647 0052 00        		.byte	0
 648 0053 00        		.byte	0
 649 0054 07        		.uleb128 0x7
 650 0055 11        		.uleb128 0x11
 651 0056 01        		.byte	0x1
 652 0057 25        		.uleb128 0x25
 653 0058 0E        		.uleb128 0xe
 654 0059 13        		.uleb128 0x13
 655 005a 0B        		.uleb128 0xb
 656 005b 03        		.uleb128 0x3
 657 005c 0E        		.uleb128 0xe
 658 005d 1B        		.uleb128 0x1b
 659 005e 0E        		.uleb128 0xe
 660 005f 11        		.uleb128 0x11
 661 0060 01        		.uleb128 0x1
 662 0061 12        		.uleb128 0x12
 663 0062 06        		.uleb128 0x6
 664 0063 10        		.uleb128 0x10
 665 0064 17        		.uleb128 0x17
 666 0065 00        		.byte	0
 667 0066 00        		.byte	0
 668 0067 08        		.uleb128 0x8


 669 0068 24        		.uleb128 0x24
 670 0069 00        		.byte	0
 671 006a 0B        		.uleb128 0xb
 672 006b 0B        		.uleb128 0xb
 673 006c 3E        		.uleb128 0x3e
 674 006d 0B        		.uleb128 0xb
 675 006e 03        		.uleb128 0x3
 676 006f 08        		.uleb128 0x8
 677 0070 00        		.byte	0
 678 0071 00        		.byte	0
 679 0072 09        		.uleb128 0x9
 680 0073 0F        		.uleb128 0xf
 681 0074 00        		.byte	0
 682 0075 0B        		.uleb128 0xb
 683 0076 0B        		.uleb128 0xb
 684 0077 49        		.uleb128 0x49
 685 0078 13        		.uleb128 0x13
 686 0079 00        		.byte	0
 687 007a 00        		.byte	0
 688 007b 0A        		.uleb128 0xa
 689 007c 2E        		.uleb128 0x2e
 690 007d 01        		.byte	0x1
 691 007e 3F        		.uleb128 0x3f
 692 007f 19        		.uleb128 0x19
 693 0080 03        		.uleb128 0x3
 694 0081 0E        		.uleb128 0xe
 695 0082 3A        		.uleb128 0x3a
 696 0083 0B        		.uleb128 0xb
 697 0084 3B        		.uleb128 0x3b
 698 0085 0B        		.uleb128 0xb
 699 0086 39        		.uleb128 0x39
 700 0087 0B        		.uleb128 0xb
 701 0088 27        		.uleb128 0x27
 702 0089 19        		.uleb128 0x19
 703 008a 3C        		.uleb128 0x3c
 704 008b 19        		.uleb128 0x19
 705 008c 01        		.uleb128 0x1
 706 008d 13        		.uleb128 0x13
 707 008e 00        		.byte	0
 708 008f 00        		.byte	0
 709 0090 0B        		.uleb128 0xb
 710 0091 2E        		.uleb128 0x2e
 711 0092 01        		.byte	0x1
 712 0093 3F        		.uleb128 0x3f
 713 0094 19        		.uleb128 0x19
 714 0095 03        		.uleb128 0x3
 715 0096 0E        		.uleb128 0xe
 716 0097 3A        		.uleb128 0x3a
 717 0098 0B        		.uleb128 0xb
 718 0099 3B        		.uleb128 0x3b
 719 009a 0B        		.uleb128 0xb
 720 009b 39        		.uleb128 0x39
 721 009c 0B        		.uleb128 0xb
 722 009d 27        		.uleb128 0x27
 723 009e 19        		.uleb128 0x19
 724 009f 49        		.uleb128 0x49
 725 00a0 13        		.uleb128 0x13


 726 00a1 3C        		.uleb128 0x3c
 727 00a2 19        		.uleb128 0x19
 728 00a3 01        		.uleb128 0x1
 729 00a4 13        		.uleb128 0x13
 730 00a5 00        		.byte	0
 731 00a6 00        		.byte	0
 732 00a7 0C        		.uleb128 0xc
 733 00a8 2E        		.uleb128 0x2e
 734 00a9 01        		.byte	0x1
 735 00aa 3F        		.uleb128 0x3f
 736 00ab 19        		.uleb128 0x19
 737 00ac 03        		.uleb128 0x3
 738 00ad 0E        		.uleb128 0xe
 739 00ae 3A        		.uleb128 0x3a
 740 00af 0B        		.uleb128 0xb
 741 00b0 3B        		.uleb128 0x3b
 742 00b1 0B        		.uleb128 0xb
 743 00b2 39        		.uleb128 0x39
 744 00b3 0B        		.uleb128 0xb
 745 00b4 27        		.uleb128 0x27
 746 00b5 19        		.uleb128 0x19
 747 00b6 49        		.uleb128 0x49
 748 00b7 13        		.uleb128 0x13
 749 00b8 11        		.uleb128 0x11
 750 00b9 01        		.uleb128 0x1
 751 00ba 12        		.uleb128 0x12
 752 00bb 06        		.uleb128 0x6
 753 00bc 40        		.uleb128 0x40
 754 00bd 18        		.uleb128 0x18
 755 00be 7A        		.uleb128 0x7a
 756 00bf 19        		.uleb128 0x19
 757 00c0 01        		.uleb128 0x1
 758 00c1 13        		.uleb128 0x13
 759 00c2 00        		.byte	0
 760 00c3 00        		.byte	0
 761 00c4 0D        		.uleb128 0xd
 762 00c5 34        		.uleb128 0x34
 763 00c6 00        		.byte	0
 764 00c7 03        		.uleb128 0x3
 765 00c8 08        		.uleb128 0x8
 766 00c9 3A        		.uleb128 0x3a
 767 00ca 0B        		.uleb128 0xb
 768 00cb 3B        		.uleb128 0x3b
 769 00cc 0B        		.uleb128 0xb
 770 00cd 39        		.uleb128 0x39
 771 00ce 0B        		.uleb128 0xb
 772 00cf 49        		.uleb128 0x49
 773 00d0 13        		.uleb128 0x13
 774 00d1 00        		.byte	0
 775 00d2 00        		.byte	0
 776 00d3 0E        		.uleb128 0xe
 777 00d4 2E        		.uleb128 0x2e
 778 00d5 01        		.byte	0x1
 779 00d6 3F        		.uleb128 0x3f
 780 00d7 19        		.uleb128 0x19
 781 00d8 03        		.uleb128 0x3
 782 00d9 0E        		.uleb128 0xe


 783 00da 3A        		.uleb128 0x3a
 784 00db 0B        		.uleb128 0xb
 785 00dc 3B        		.uleb128 0x3b
 786 00dd 0B        		.uleb128 0xb
 787 00de 39        		.uleb128 0x39
 788 00df 0B        		.uleb128 0xb
 789 00e0 27        		.uleb128 0x27
 790 00e1 19        		.uleb128 0x19
 791 00e2 49        		.uleb128 0x49
 792 00e3 13        		.uleb128 0x13
 793 00e4 11        		.uleb128 0x11
 794 00e5 01        		.uleb128 0x1
 795 00e6 12        		.uleb128 0x12
 796 00e7 06        		.uleb128 0x6
 797 00e8 40        		.uleb128 0x40
 798 00e9 18        		.uleb128 0x18
 799 00ea 7A        		.uleb128 0x7a
 800 00eb 19        		.uleb128 0x19
 801 00ec 00        		.byte	0
 802 00ed 00        		.byte	0
 803 00ee 00        		.byte	0
 804               		.section	.debug_loclists,"",@progbits
 805 0000 0000 0116 		.long	.Ldebug_loc3-.Ldebug_loc2
 806               	.Ldebug_loc2:
 807 0004 0005      		.word	0x5
 808 0006 04        		.byte	0x4
 809 0007 00        		.byte	0
 810 0008 0000 0000 		.long	0
 811               	.Ldebug_loc0:
 812               	.LVUS3:
 813 000c 01        		.uleb128 .LVU66
 814 000d 00        		.uleb128 .LVU67
 815 000e 00        		.uleb128 .LVU67
 816 000f 00        		.uleb128 .LVU69
 817 0010 00        		.uleb128 .LVU69
 818 0011 03        		.uleb128 .LVU74
 819 0012 03        		.uleb128 .LVU74
 820 0013 00        		.uleb128 .LVU75
 821 0014 00        		.uleb128 .LVU79
 822 0015 03        		.uleb128 .LVU85
 823 0016 03        		.uleb128 .LVU85
 824 0017 00        		.uleb128 .LVU86
 825               	.LLST3:
 826 0018 04        		.byte	0x4
 827 0019 F001      		.uleb128 .LVL24-.Ltext0
 828 001b 8202      		.uleb128 .LVL25-.Ltext0
 829 001d 02        		.uleb128 0x2
 830 001e 30        		.byte	0x30
 831 001f 9F        		.byte	0x9f
 832 0020 04        		.byte	0x4
 833 0021 8202      		.uleb128 .LVL25-.Ltext0
 834 0023 8402      		.uleb128 .LVL26-.Ltext0
 835 0025 07        		.uleb128 0x7
 836 0026 7A        		.byte	0x7a
 837 0027 00        		.sleb128 0
 838 0028 91        		.byte	0x91
 839 0029 74        		.sleb128 -12


 840 002a 06        		.byte	0x6
 841 002b 1C        		.byte	0x1c
 842 002c 9F        		.byte	0x9f
 843 002d 04        		.byte	0x4
 844 002e 8402      		.uleb128 .LVL26-.Ltext0
 845 0030 9602      		.uleb128 .LVL27-.Ltext0
 846 0032 08        		.uleb128 0x8
 847 0033 91        		.byte	0x91
 848 0034 74        		.sleb128 -12
 849 0035 06        		.byte	0x6
 850 0036 20        		.byte	0x20
 851 0037 7A        		.byte	0x7a
 852 0038 00        		.sleb128 0
 853 0039 22        		.byte	0x22
 854 003a 9F        		.byte	0x9f
 855 003b 04        		.byte	0x4
 856 003c 9602      		.uleb128 .LVL27-.Ltext0
 857 003e 9C02      		.uleb128 .LVL28-.Ltext0
 858 0040 07        		.uleb128 0x7
 859 0041 7A        		.byte	0x7a
 860 0042 00        		.sleb128 0
 861 0043 91        		.byte	0x91
 862 0044 74        		.sleb128 -12
 863 0045 06        		.byte	0x6
 864 0046 1C        		.byte	0x1c
 865 0047 9F        		.byte	0x9f
 866 0048 04        		.byte	0x4
 867 0049 A802      		.uleb128 .LVL30-.Ltext0
 868 004b C202      		.uleb128 .LVL32-.Ltext0
 869 004d 08        		.uleb128 0x8
 870 004e 91        		.byte	0x91
 871 004f 74        		.sleb128 -12
 872 0050 06        		.byte	0x6
 873 0051 20        		.byte	0x20
 874 0052 7A        		.byte	0x7a
 875 0053 00        		.sleb128 0
 876 0054 22        		.byte	0x22
 877 0055 9F        		.byte	0x9f
 878 0056 04        		.byte	0x4
 879 0057 C202      		.uleb128 .LVL32-.Ltext0
 880 0059 CA02      		.uleb128 .LVL33-.Ltext0
 881 005b 07        		.uleb128 0x7
 882 005c 7A        		.byte	0x7a
 883 005d 00        		.sleb128 0
 884 005e 91        		.byte	0x91
 885 005f 74        		.sleb128 -12
 886 0060 06        		.byte	0x6
 887 0061 1C        		.byte	0x1c
 888 0062 9F        		.byte	0x9f
 889 0063 00        		.byte	0
 890               	.LVUS4:
 891 0064 00        		.uleb128 .LVU65
 892 0065 00        		.uleb128 .LVU77
 893 0066 00        		.uleb128 .LVU79
 894 0067 00        		.uleb128 .LVU86
 895               	.LLST4:
 896 0068 04        		.byte	0x4


 897 0069 F001      		.uleb128 .LVL24-.Ltext0
 898 006b A202      		.uleb128 .LVL29-.Ltext0
 899 006d 01        		.uleb128 0x1
 900 006e 52        		.byte	0x52
 901 006f 04        		.byte	0x4
 902 0070 A802      		.uleb128 .LVL30-.Ltext0
 903 0072 CA02      		.uleb128 .LVL33-.Ltext0
 904 0074 01        		.uleb128 0x1
 905 0075 52        		.byte	0x52
 906 0076 00        		.byte	0
 907               	.LVUS0:
 908 0077 00        		.uleb128 .LVU15
 909 0078 00        		.uleb128 .LVU21
 910 0079 00        		.uleb128 .LVU21
 911 007a 00        		.uleb128 .LVU31
 912 007b 00        		.uleb128 .LVU31
 913 007c 00        		.uleb128 .LVU34
 914 007d 00        		.uleb128 .LVU34
 915 007e 00        		.uleb128 .LVU42
 916 007f 00        		.uleb128 .LVU43
 917 0080 00        		.uleb128 .LVU47
 918 0081 00        		.uleb128 .LVU47
 919 0082 00        		.uleb128 .LVU54
 920               	.LLST0:
 921 0083 04        		.byte	0x4
 922 0084 46        		.uleb128 .LVL4-.Ltext0
 923 0085 5E        		.uleb128 .LVL5-.Ltext0
 924 0086 01        		.uleb128 0x1
 925 0087 50        		.byte	0x50
 926 0088 04        		.byte	0x4
 927 0089 5E        		.uleb128 .LVL5-.Ltext0
 928 008a 76        		.uleb128 .LVL11-.Ltext0
 929 008b 01        		.uleb128 0x1
 930 008c 52        		.byte	0x52
 931 008d 04        		.byte	0x4
 932 008e 76        		.uleb128 .LVL11-.Ltext0
 933 008f 8501      		.uleb128 .LVL12-1-.Ltext0
 934 0091 01        		.uleb128 0x1
 935 0092 50        		.byte	0x50
 936 0093 04        		.byte	0x4
 937 0094 8501      		.uleb128 .LVL12-1-.Ltext0
 938 0096 A001      		.uleb128 .LVL15-.Ltext0
 939 0098 01        		.uleb128 0x1
 940 0099 52        		.byte	0x52
 941 009a 04        		.byte	0x4
 942 009b A201      		.uleb128 .LVL16-.Ltext0
 943 009d AF01      		.uleb128 .LVL18-1-.Ltext0
 944 009f 01        		.uleb128 0x1
 945 00a0 50        		.byte	0x50
 946 00a1 04        		.byte	0x4
 947 00a2 AF01      		.uleb128 .LVL18-1-.Ltext0
 948 00a4 CC01      		.uleb128 .LVL22-.Ltext0
 949 00a6 01        		.uleb128 0x1
 950 00a7 52        		.byte	0x52
 951 00a8 00        		.byte	0
 952               	.LVUS1:
 953 00a9 01        		.uleb128 .LVU10


 954 00aa 00        		.uleb128 .LVU13
 955 00ab 00        		.uleb128 .LVU13
 956 00ac 00        		.uleb128 .LVU26
 957 00ad 00        		.uleb128 .LVU26
 958 00ae 00        		.uleb128 .LVU27
 959 00af 00        		.uleb128 .LVU29
 960 00b0 00        		.uleb128 .LVU40
 961 00b1 00        		.uleb128 .LVU40
 962 00b2 00        		.uleb128 .LVU42
 963 00b3 00        		.uleb128 .LVU42
 964 00b4 00        		.uleb128 .LVU43
 965 00b5 00        		.uleb128 .LVU43
 966 00b6 00        		.uleb128 .LVU46
 967 00b7 00        		.uleb128 .LVU46
 968 00b8 01        		.uleb128 .LVU50
 969 00b9 01        		.uleb128 .LVU50
 970 00ba 02        		.uleb128 .LVU51
 971 00bb 02        		.uleb128 .LVU51
 972 00bc 00        		.uleb128 .LVU52
 973               	.LLST1:
 974 00bd 04        		.byte	0x4
 975 00be 2E        		.uleb128 .LVL1-.Ltext0
 976 00bf 40        		.uleb128 .LVL2-.Ltext0
 977 00c0 02        		.uleb128 0x2
 978 00c1 30        		.byte	0x30
 979 00c2 9F        		.byte	0x9f
 980 00c3 04        		.byte	0x4
 981 00c4 40        		.uleb128 .LVL2-.Ltext0
 982 00c5 6A        		.uleb128 .LVL7-.Ltext0
 983 00c6 01        		.uleb128 0x1
 984 00c7 53        		.byte	0x53
 985 00c8 04        		.byte	0x4
 986 00c9 6A        		.uleb128 .LVL7-.Ltext0
 987 00ca 6C        		.uleb128 .LVL8-.Ltext0
 988 00cb 03        		.uleb128 0x3
 989 00cc 73        		.byte	0x73
 990 00cd 7F        		.sleb128 -1
 991 00ce 9F        		.byte	0x9f
 992 00cf 04        		.byte	0x4
 993 00d0 70        		.uleb128 .LVL9-.Ltext0
 994 00d1 9601      		.uleb128 .LVL14-.Ltext0
 995 00d3 01        		.uleb128 0x1
 996 00d4 53        		.byte	0x53
 997 00d5 04        		.byte	0x4
 998 00d6 9601      		.uleb128 .LVL14-.Ltext0
 999 00d8 A001      		.uleb128 .LVL15-.Ltext0
 1000 00da 03        		.uleb128 0x3
 1001 00db 73        		.byte	0x73
 1002 00dc 7F        		.sleb128 -1
 1003 00dd 9F        		.byte	0x9f
 1004 00de 04        		.byte	0x4
 1005 00df A001      		.uleb128 .LVL15-.Ltext0
 1006 00e1 A201      		.uleb128 .LVL16-.Ltext0
 1007 00e3 03        		.uleb128 0x3
 1008 00e4 70        		.byte	0x70
 1009 00e5 7F        		.sleb128 -1
 1010 00e6 9F        		.byte	0x9f


 1011 00e7 04        		.byte	0x4
 1012 00e8 A201      		.uleb128 .LVL16-.Ltext0
 1013 00ea A801      		.uleb128 .LVL17-.Ltext0
 1014 00ec 01        		.uleb128 0x1
 1015 00ed 53        		.byte	0x53
 1016 00ee 04        		.byte	0x4
 1017 00ef A801      		.uleb128 .LVL17-.Ltext0
 1018 00f1 C001      		.uleb128 .LVL20-.Ltext0
 1019 00f3 03        		.uleb128 0x3
 1020 00f4 73        		.byte	0x73
 1021 00f5 01        		.sleb128 1
 1022 00f6 9F        		.byte	0x9f
 1023 00f7 04        		.byte	0x4
 1024 00f8 C001      		.uleb128 .LVL20-.Ltext0
 1025 00fa C001      		.uleb128 .LVL20-.Ltext0
 1026 00fc 01        		.uleb128 0x1
 1027 00fd 53        		.byte	0x53
 1028 00fe 04        		.byte	0x4
 1029 00ff C001      		.uleb128 .LVL20-.Ltext0
 1030 0101 C401      		.uleb128 .LVL21-.Ltext0
 1031 0103 03        		.uleb128 0x3
 1032 0104 73        		.byte	0x73
 1033 0105 7F        		.sleb128 -1
 1034 0106 9F        		.byte	0x9f
 1035 0107 00        		.byte	0
 1036               	.LVUS2:
 1037 0108 00        		.uleb128 .LVU9
 1038 0109 00        		.uleb128 .LVU42
 1039 010a 00        		.uleb128 .LVU43
 1040 010b 00        		.uleb128 .LVU54
 1041               	.LLST2:
 1042 010c 04        		.byte	0x4
 1043 010d 2E        		.uleb128 .LVL1-.Ltext0
 1044 010e A001      		.uleb128 .LVL15-.Ltext0
 1045 0110 01        		.uleb128 0x1
 1046 0111 54        		.byte	0x54
 1047 0112 04        		.byte	0x4
 1048 0113 A201      		.uleb128 .LVL16-.Ltext0
 1049 0115 CC01      		.uleb128 .LVL22-.Ltext0
 1050 0117 01        		.uleb128 0x1
 1051 0118 54        		.byte	0x54
 1052 0119 00        		.byte	0
 1053               	.Ldebug_loc3:
 1054               		.section	.debug_aranges,"",@progbits
 1055 0000 0000 001C 		.long	0x1c
 1056 0004 0002      		.word	0x2
 1057 0006 0000 0000 		.long	.Ldebug_info0
 1058 000a 04        		.byte	0x4
 1059 000b 00        		.byte	0
 1060 000c 0000      		.word	0
 1061 000e 0000      		.word	0
 1062 0010 0000 0000 		.long	.Ltext0
 1063 0014 0000 0152 		.long	.Letext0-.Ltext0
 1064 0018 0000 0000 		.long	0
 1065 001c 0000 0000 		.long	0
 1066               		.section	.debug_line,"",@progbits
 1067               	.Ldebug_line0:


 1068 0000 0000 015C 		.section	.debug_str,"MS",@progbits,1
 1068      0003 0000 
 1068      0020 0201 
 1068      FB0E 0D00 
 1068      0101 0101 
 1069               	.LASF6:
 1070 0000 6C6F 6E67 		.string	"long long int"
 1070      206C 6F6E 
 1070      6720 696E 
 1070      7400 
 1071               	.LASF9:
 1072 000e 756E 7369 		.string	"unsigned int"
 1072      676E 6564 
 1072      2069 6E74 
 1072      00
 1073               	.LASF12:
 1074 001b 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 1074      4331 3720 
 1074      3131 2E34 
 1074      2E30 202D 
 1074      6D63 7075 
 1075               	.LASF14:
 1076 005f 2F68 6F6D 		.string	"/home/students/7527360469/\343\203\211\343\202\255\343\203\245\343\203\241\343\203\263\34
 1076      652F 7374 
 1076      7564 656E 
 1076      7473 2F37 
 1076      3532 3733 
 1077               	.LASF5:
 1078 0098 6C6F 6E67 		.string	"long unsigned int"
 1078      2075 6E73 
 1078      6967 6E65 
 1078      6420 696E 
 1078      7400 
 1079               	.LASF7:
 1080 00aa 6C6F 6E67 		.string	"long long unsigned int"
 1080      206C 6F6E 
 1080      6720 756E 
 1080      7369 676E 
 1080      6564 2069 
 1081               	.LASF13:
 1082 00c1 6373 7973 		.string	"csys68k.c"
 1082      3638 6B2E 
 1082      6300 
 1083               	.LASF17:
 1084 00cb 7772 6974 		.string	"write"
 1084      6500 
 1085               	.LASF1:
 1086 00d1 756E 7369 		.string	"unsigned char"
 1086      676E 6564 
 1086      2063 6861 
 1086      7200 
 1087               	.LASF10:
 1088 00df 6368 6172 		.string	"char"
 1088      00
 1089               	.LASF4:
 1090 00e4 6C6F 6E67 		.string	"long int"
 1090      2069 6E74 


 1090      00
 1091               	.LASF11:
 1092 00ed 6E62 7974 		.string	"nbytes"
 1092      6573 00
 1093               	.LASF18:
 1094 00f4 7265 6164 		.string	"read"
 1094      00
 1095               	.LASF3:
 1096 00f9 7368 6F72 		.string	"short unsigned int"
 1096      7420 756E 
 1096      7369 676E 
 1096      6564 2069 
 1096      6E74 00
 1097               	.LASF0:
 1098 010c 7369 676E 		.string	"signed char"
 1098      6564 2063 
 1098      6861 7200 
 1099               	.LASF8:
 1100 0118 6C6F 6E67 		.string	"long double"
 1100      2064 6F75 
 1100      626C 6500 
 1101               	.LASF16:
 1102 0124 696E 6279 		.string	"inbyte"
 1102      7465 00
 1103               	.LASF2:
 1104 012b 7368 6F72 		.string	"short int"
 1104      7420 696E 
 1104      7400 
 1105               	.LASF15:
 1106 0135 6F75 7462 		.string	"outbyte"
 1106      7974 6500 
 1107               		.ident	"GCC: (GNU) 11.4.0"




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	***************
  44               	**システムコール番号
  45               	***************
  46               	.equ SYSCALL_NUM_GETSTRING,     1
  47               	.equ SYSCALL_NUM_PUTSTRING,     2
  48               	.equ SYSCALL_NUM_RESET_TIMER,   3
  49               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.global inbyte
   3               	
   4               	.text
   5               	.even
   6               	
   7               	inbyte:
   8 0000 48E7 70C0 		movem.l %a0-%a1/%d1-%d3, -(%SP)	/* STORE REGISTERS */


   9 0004 41F9 0000 		lea.l ibDATA, %a0				/* SET ADDRESS OF ibDATA TO a0 */
   9      0000 
  10               	inbyte_loop:
  11               		/* GET THE ARGUMENT OF INBYTE */
  12 000a 7218      		move.l	#24, %d1				/* CALCULATE OFFSET: 6 [Registers] * 4 [BYTES / Register] = 24 [Bytes] */
  13 000c 224F      		move.l	%sp, %a1				/* Note (1/2): This argument is sign-extended to 4 bytes,  */
  14 000e D3C1      		adda.l	%d1, %a1				/* Note (2/2): so, offset is not necessary compared to the inbyte: in theme 2 *
  15               		
  16               		/* SYSCALL: GETSTRING */
  17 0010 7001      		move.l #SYSCALL_NUM_GETSTRING, %D0
  18 0012 2211      		move.l (%a1), %d1         		| ch   = fd
  19 0014 2408      		move.l %a0,   %d2         		| p    = #ibDATA
  20 0016 7601      		move.l #1,    %d3          		| size = 1
  21 0018 4E40      		trap #0
  22               	
  23               		/* FLAG CHECK */
  24 001a 0C80 0000 		cmp.l #0, %d0					/* see if GETSTRING is successful */
  24      0000 
  25 0020 6700 FFE8 		beq inbyte_loop					/* if false, retry */
  26               	
  27               		/* SUCCESS */
  28 0024 1010      		move.b (%a0), %d0				/* copy retuned data to d0 */
  29 0026 13C0 00D0 		move.b %d0, LED7
  29      002F 
  30 002c 4CDF 030E 		movem.l (%SP)+, %a0-%a1/%d1-%d3	/* STORE REGISTERS */
  31 0030 4E75      		rts
  32               	        
  33               	.section .bss
  34               	.even
  35               	
  36               	.global DATA
  37               	ibDATA:
  38 0000 00        		.ds.b 1
  39 0001 00        		.even




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	***************
  44               	**システムコール番号
  45               	***************
  46               	.equ SYSCALL_NUM_GETSTRING,     1
  47               	.equ SYSCALL_NUM_PUTSTRING,     2
  48               	.equ SYSCALL_NUM_RESET_TIMER,   3
  49               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.section .text
   3               	
   4               	.global swtch
   5               	.global pv_handler
   6               	.global init_timer
   7               	.global first_task
   8               	.global P


   9               	.global V
  10               	
  11               	**齊藤　作成**
  12               	********************************************************************************************
  13               	**【機能】
  14               	**Pシステムコールの入口…Cから呼ばれる関数（サブルーチン）として作
  15               	**Cプログラムから引数（セマフォID）付きで呼び出される
  16               	**中では適切な値をレジスタに置き，TRAP #1 命令を実行する．
  17               	********************************************************************************************
  18               	**【レジスタ用途】
  19               	**d0:p_body()のIDとして０を代入
  20               	**d1:セマフォIDを代入
  21               	*********************************************************************************************
  22               	
  23               	.text
  24               	.even
  25               	P:	
  26 0000 48E7 6040 		movem.l %d1-%d2/%a1,-(%sp)	|レジスタ退避	
  27 0004 7000      		move.l #0,%d0				|d0 = 0
  28 0006 224F      		movea.l	%sp, %a1			|スタックポインタをa1にコピー
  29 0008 7410      		move.l	#16,   %d2			|a1,d1,d2,PC各4ずつ
  30 000a D3C2      		adda.l	%d2,   %a1			|スタックポインタにプラス16
  31 000c 2211      		move.l	(%a1), %d1			|↑その位置の中身(セマフォID)をd1にコピー
  32 000e 4E41      		trap #1						|pv_handlerを呼び出す
  33 0010 4CDF 0206 		movem.l (%sp)+,%d1-%d2/%a1	|レジスタ復帰
  34 0014 4E75      		rts
  35               		
  36               	**齊藤　作成**
  37               	********************************************************************************************
  38               	**【機能】
  39               	**Vシステムコールの入口…Cから呼ばれる関数（サブルーチン）として作
  40               	**Cプログラムから引数（セマフォID）付きで呼び出される
  41               	**中では適切な値をレジスタに置き，TRAP #1 命令を実行する．
  42               	********************************************************************************************
  43               	**【レジスタ用途】
  44               	**d0:v_body()のIDとして1を代入
  45               	**d1:セマフォIDを代入
  46               	*********************************************************************************************
  47               	
  48               	.text
  49               	.even
  50               	V:	
  51 0016 48E7 6040 		movem.l %d1-%d2/%a1,-(%sp)	| レジスタ退避	
  52 001a 7001      		move.l #1,%d0				| d0 = 1
  53 001c 224F      		movea.l	%sp, %a1			| スタックポインタをa1にコピー
  54 001e 7410      		move.l	#16,   %d2			| a1,d1,d2,PC各4ずつ
  55 0020 D3C2      		adda.l	%d2,   %a1			| スタックポインタにプラス16
  56 0022 2211      		move.l	(%a1), %d1			| ↑その位置の中身(セマフォID)をd1にコピー
  57 0024 4E41      		trap #1						| pv_handlerを呼び出す
  58 0026 4CDF 0206 		movem.l (%sp)+,%d1-%d2/%a1	| レジスタ復帰
  59 002a 4E75      		rts
  60               		
  61               	**齊藤作成**
  62               	*****************************************
  63               	**☆P.sとV.s中のtrap#1命令で呼び出される☆
  64               	*****************************************
  65               	**【機能】


  66               	**タスクの切り換え…割り込み処理ルーチンとして作成．
  67               	**関数として呼び出されることはあってはならないが，
  68               	**Cプログラムから関数として見えるようにしておくと，Cプログラム内で
  69               	**参照することができるので，例外ベクタに登録するのが容易である．
  70               	***************************************************************************************************
  71               	**【レジスタ用途】
  72               	**d0:0ならp_body()、1ならv_body()
  73               	**d1:セマフォID
  74               	**両関数とも引数にセマフォIDを取るので、これをスタックに積んだ後サ
  75               	*********************************************************************************************
  76               	.extern p_body
  77               	.extern v_body
  78               	
  79               	.text
  80               	.even
  81               	pv_handler:
  82 002c 40E7      		move.w	%SR, -(%sp)	|現走行レベルの退避	
  83 002e 48E7 8080 		movem.l %d0/%a0, -(%sp)	|レジスタ退避
  84 0032 46FC 2700 		move.w	#0x2700, %SR	|割り込み禁止 走行レベル７
  85               		/*d0の値チェック*/
  86 0036 0C80 0000 		cmp.l #0, %d0
  86      0000 
  87 003c 6700 000C 	    beq SYSCALL_p
  88 0040 0C80 0000 		cmp.l #1, %d0
  88      0001 
  89 0046 6700 000C 		beq SYSCALL_v
  90               	SYSCALL_p:
  91 004a 203C 0000 		move.l #p_body, %d0
  91      0000 
  92 0050 6000 000C 		bra JUMP_pv
  93               	SYSCALL_v:
  94 0054 203C 0000 		move.l #v_body, %d0
  94      0000 
  95 005a 6000 0002 		bra JUMP_pv
  96               	JUMP_pv:	
  97 005e 2040      		movea.l %d0, %a0	
  98 0060 2F01      		move.l %d1,-(%sp)	|セマフォIDをスタックに積む
  99 0062 4E90      		jsr (%a0)			|p_body or v_body にジャンプ
 100               	
 101               	pv_FINISH:
 102 0064 588F      		addq.l #4,%sp		|引数として使われて削除されているのでスタックポインタを
 103 0066 4CDF 0101 		movem.l (%sp)+,%d0/%a0 	|レジスタ復帰
 104 006a 46DF      		move.w	(%sp)+, %SR	|旧走行レベルの回復
 105 006c 4E73      		rte
 106               		
 107               	.extern task_tab
 108               	.extern curr_task
 109               	.extern next_task
 110               	
 111               	
 112               	swtch:
 113               	*********
 114               	***1. SR をスタックに積んで，RTE で復帰できるようにする．
 115               	***2. 実行中のタスクのレジスタの退避：
 116               	***D0〜D7，A0〜A6，USP をタスクのスーパバイザスタックに積む．
 117               	***3. SSP の保存:
 118               	***このタスクの TCB の位置を求め， SSP を正しい位置に記録する．


 119               	***4. curr task を変更:
 120               	***curr task に next task を代入する．swtch の呼び出し前にスケジューラ sched 
 121               	***ているため，next task には次に実行するタスク ID がセットされている．
 122               	***5. 次のタスクの SSP の読み出し：
 123               	***新たな curr task の値を元に TCB の位置を割り出して，その中に記録され
 124               	***値を回復する．これにより，スーパバイザスタックが次のタスクのもの
 125               	***6. 次のタスクのレジスタの読み出し：
 126               	***切り換わったスーパバイザスタックから USP，D0〜D7，A0〜A6 の値を回復
 127               	***7. タスク切り替えをおこす:
 128               	***RTE を実行する．
 129               	*********
 130               		***1. SR をスタックに積んで，RTE で復帰できるようにする．
 131 006e 40E7      		move.w %sr, -(%sp)      		/*SRを退避*/
 132               	
 133               		***2. 実行中のタスクのレジスタの退避：
 134 0070 48E7 FFFE 		movem.l %d0-%d7/%a0-%a6, -(%sp)	/*実行中のタスクのレジスタを退避*/
 135 0074 4E6E      		move.l %USP, %a6        		/*USPをa6に転送*/
 136 0076 2F0E      		move.l %a6, -(%sp)      		/*USPを退避*/
 137               	
 138               		***3. SSP の保存:
 139 0078 7000      		move.l #0, %d0  
 140 007a 2039 0000 		move.l curr_task, %d0	/*カレントタスクのIDを転送*/
 140      0000 
 141 0080 41F9 0000 		lea.l task_tab, %a0		/*タスクコントロールブロックの先頭アドレスを転送*/
 141      0000 
 142 0086 C0FC 0014 		mulu #20, %d0			/*カレントIDを20倍*/
 143 008a D1C0      		adda.l %d0, %a0			/*カレントタスクのTCBのアドレスを求める*/
 144 008c 5888      		addq.l #4, %a0			/*SSPの位置を計算*/
 145 008e 208F      		move.l %sp, (%a0)		/*SSPを保存*/
 146               	
 147               		***4. curr task を変更:
 148 0090 43F9 0000 		lea.l curr_task, %a1    /*カレントタスクのアドレスをa1に転送*/
 148      0000 
 149 0096 22B9 0000 		move.l next_task, (%a1) /*next_taskの値をa1に格納*/
 149      0000 
 150               	
 151               		***5. 次のタスクの SSP の読み出し：
 152 009c 2039 0000 		move.l curr_task, %d0   /*カレントタスクのIDを転送*/
 152      0000 
 153 00a2 41F9 0000 		lea.l task_tab, %a0     /*タスクコントロールブロックの先頭アドレスを転送*/
 153      0000 
 154 00a8 C0FC 0014 		mulu #20, %d0			/*カレントIDを20倍*/
 155 00ac D1C0      		adda.l %d0, %a0         /*カレントタスクのTCBのアドレスを求める*/
 156 00ae 5888      		addq.l #4, %a0			/*SSPの位置を計算*/
 157 00b0 2E50      		move.l (%a0), %sp       /*SSPを回復*/
 158               	
 159               		***6. 次のタスクのレジスタの読み出し：
 160 00b2 2C5F      		move.l (%sp)+, %a6     			/*a6を復帰*/
 161 00b4 4E66      		move.l %a6, %USP        		/*USPを回復*/
 162 00b6 4CDF 7FFF 		movem.l (%sp)+, %d0-%d7/%a0-%a6 /*全レジスタ回復*/
 163               	
 164               		***7. タスク切り替えをおこす:
 165 00ba 4E73      		rte
 166               	
 167               	.extern addq
 168               	.extern sched
 169               	.extern ready


 170               	
 171               	first_task:
 172               	************
 173               	***1. TCB 先頭番地の計算：
 174               	***curr task の TCB のアドレスを見つける．
 175               	***2. USP，SSP の値の回復：
 176               	***このタスクの TCB に記録されている SSP の値およびスーパバイザスタッ
 177               	***る USP の値を回復する．
 178               	***3. 残りの全レジスタの回復：
 179               	***スーパーバイザスタックに積まれている残り 15 本のレジスタの値を回
 180               	***4. ユーザタスクの起動：
 181               	***RTE 命令を実行する．
 182               	************
 183               		***1.TCBの先頭番地の計算
 184 00bc 7200      		move.l #0, %d1        
 185 00be 2239 0000 		move.l curr_task, %d1   /* カレントタスクのIDを転送 */
 185      0000 
 186 00c4 41F9 0000 		lea.l task_tab, %a0     /* タスクコントロールブロックの先頭アドレスを転送 *
 186      0000 
 187 00ca C2FC 0014 		mulu #20, %d1           /* カレントIDを20倍 */
 188 00ce D1C1      		adda.l %d1, %a0         /* カレントタスクのTCBのアドレスを求める */
 189               	
 190               		***2. USP，SSP の値の回復：
 191 00d0 5888      		addq.l #4, %a0          /* SSPの位置を計算 */
 192 00d2 2E50      		move.l (%a0), %sp       /* SSPを回復 */
 193 00d4 2C5F      		move.l (%sp)+, %a6      /* a6を復帰 */
 194 00d6 4E66      		move.l %a6,%USP         /* USPを回復 */
 195               	
 196               		***3. 残りの全レジスタの回復：
 197               		***move.w	(%sp)+, %SR	|旧走行レベルの回復
 198 00d8 4CDF 7FFF 		movem.l (%sp)+, %d0-%d7/%a0-%a6     /*全レジスタ回復*/
 199               	
 200               		***4. ユーザタスクの起動：
 201 00dc 13FC 0038 		move.b #'8',LED7
 201      00D0 002F 
 202 00e4 4E73      		rte     				/*ユーザタスクの起動*/
 203               	
 204               	/*
 205               	; 7. init_timer
 206               	; クロック割り込みルーチンhard_clockをベクトルテーブルに登録するルーチ
 207               	; 
 208               	; 担当：武石
 209               	*/
 210               	
 211               	init_timer:
 212 00e6 48E7 E000 	    movem.l %d0-%d2,-(%sp)
 213               	
 214 00ea 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%d0 | SYSCALL_NUM_RESET_TIMER=3
 215 00ec 4E40      		trap   #0
 216               	
 217 00ee 7004      		move.l #SYSCALL_NUM_SET_TIMER, %d0  | SYSCALL_NUM_SET_TIMER=4
 218 00f0 323C 00C8 		move.w #200, %d1                  | たいたい1秒
 219 00f4 243C 0000 		move.l #hard_clock, %d2
 219      0000 
 220 00fa 4E40      		trap #0
 221               	
 222 00fc 4CDF 0007 	    movem.l (%sp)+, %d0-%d2


 223 0100 4E75      	    rts
 224               	    
 225               	/*
 226               	; 6. hard_clock
 227               	; クロック割り込みルーチン。モニタのシステムコールTRAP #0 を利用して
 228               	; 
 229               	; 担当：武石
 230               	*/
 231               	
 232               	hard_clock:
 233               	    * 1. 実行中のタスクのレジスタの退避
 234 0102 48E7 C040 	    movem.l %d0-%d1/%a1,-(%sp)
 235               	
 236               	    * テキストp22参照
 237 0106 224F      	    movea.l	%sp, %a1
 238 0108 700C      	    move.l #12, %d0     | レジスタ3つ分
 239 010a D3C0      	    adda.l %d0, %a1     | a1 = SR
 240 010c 3211      	    move.w (%a1), %d1   | d1 = (SR)
 241 010e 0241 2000 	    andi.w #0x2000, %d1 | d1 = (SR) & 0x2000
 242 0112 0C41 2000 	    cmpi.w #0x2000, %d1 | 13bit目が1かどうか
 243 0116 6700 0020 	    beq hard_clock_end  | 13bit目が1でなければ(ユーザーモードであれば)終了
 244               	
 245               	    * 2. addq()により, curr_taskをreadyの末尾に追加.
 246 011a 2F39 0000 	    move.l curr_task, -(%sp)
 246      0000 
 247 0120 2F3C 0000 	    move.l #ready, -(%sp)
 247      0000 
 248 0126 4EB9 0000 	    jsr addq
 248      0000 
 249 012c 508F      	    add.l #8, %sp
 250               	
 251               	    * 3. schedを起動.
 252 012e 4EB9 0000 	    jsr sched
 252      0000 
 253               	
 254               	    * 4. swtchを起動.
 255 0134 4EBA FF38 	    jsr swtch
 256               	
 257               	hard_clock_end:
 258               	    * 5. レジスタの復帰.
 259 0138 4CDF 0203 	    movem.l (%sp)+, %d0-%d1/%a1 
 260 013c 4E75      	    rts




   1               	#NO_APP
   2               		.file	"mtk_c.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	init_kernel
   8               		.type	init_kernel, @function
   9               	init_kernel:
  10               	.LFB3:
  11               		.file 1 "mtk_c.c"
   1:mtk_c.c       **** #include <stdio.h>
   2:mtk_c.c       **** #include "mtk_c.h"
   3:mtk_c.c       **** 
   4:mtk_c.c       **** SEMAPHORE_TYPE 	semaphore[NUMSEMAPHORE];	// セマフォの配列
   5:mtk_c.c       **** TCB_TYPE 	    task_tab[NUMTASK + 1];		// タスクコントロールブロックの配列
   6:mtk_c.c       **** STACK_TYPE	    stacks[NUMTASK];		    // タスクスタックの配列
   7:mtk_c.c       **** 
   8:mtk_c.c       **** TASK_ID_TYPE	curr_task;	                // 現在実行中のタスクID
   9:mtk_c.c       **** TASK_ID_TYPE	new_task;	                // 現在登録作業中のタスクID
  10:mtk_c.c       **** TASK_ID_TYPE	next_task;	                // 次に実行するタスクID
  11:mtk_c.c       **** TASK_ID_TYPE	ready;		                // 実行待ちタスクのキュー
  12:mtk_c.c       **** 
  13:mtk_c.c       **** /************************************************************************************
  14:mtk_c.c       **** **カーネルの初期化 init kernel()
  15:mtk_c.c       **** **引数なし．以下のような処理を行う．
  16:mtk_c.c       **** **1. TCB 配列の初期化：すべて空タスクとする
  17:mtk_c.c       **** **2. ready キューの初期化：空（タスク ID=0）とする
  18:mtk_c.c       **** **3. P・V システムコールの割り込み処理ルーチン (pv handler) を TRAP #1 の割
  19:mtk_c.c       **** **4. セマフォの値を初期化する
  20:mtk_c.c       **** ************************************************************************************/
  21:mtk_c.c       **** void init_kernel(){
  12               		.loc 1 21 19 view -0
  13               		.cfi_startproc
  22:mtk_c.c       **** 	int i;
  14               		.loc 1 22 2 view .LVU1
  23:mtk_c.c       **** 	
  24:mtk_c.c       **** 	for(i = 0; i < NUMTASK+1; i++){ 	/* TCB配列の初期化 */	
  15               		.loc 1 24 2 view .LVU2
  16               	.LVL0:
  17               		.loc 1 24 15 view .LVU3
  18 0000 41F9 0000 		lea task_tab,%a0
  18      0000 
  19 0006 203C 0000 		move.l #task_tab+120,%d0
  19      0000 
  20               	.LVL1:
  21               	.L2:
  25:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  22               		.loc 1 25 3 discriminator 3 view .LVU4
  23               		.loc 1 25 25 is_stmt 0 discriminator 3 view .LVU5
  24 000c 4290      		clr.l (%a0)
  26:mtk_c.c       **** 		task_tab[i].stack_ptr = NULL;
  25               		.loc 1 26 3 is_stmt 1 discriminator 3 view .LVU6
  26               		.loc 1 26 25 is_stmt 0 discriminator 3 view .LVU7
  27 000e 42A8 0004 		clr.l 4(%a0)
  27:mtk_c.c       **** 		task_tab[i].priority = 0;
  28               		.loc 1 27 3 is_stmt 1 discriminator 3 view .LVU8


  29               		.loc 1 27 24 is_stmt 0 discriminator 3 view .LVU9
  30 0012 42A8 0008 		clr.l 8(%a0)
  28:mtk_c.c       **** 		task_tab[i].status = UNDEFINED;
  31               		.loc 1 28 3 is_stmt 1 discriminator 3 view .LVU10
  32               		.loc 1 28 22 is_stmt 0 discriminator 3 view .LVU11
  33 0016 42A8 000C 		clr.l 12(%a0)
  29:mtk_c.c       **** 		task_tab[i].next = NULLTASKID;							
  34               		.loc 1 29 3 is_stmt 1 discriminator 3 view .LVU12
  35               		.loc 1 29 20 is_stmt 0 discriminator 3 view .LVU13
  36 001a 42A8 0010 		clr.l 16(%a0)
  24:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  37               		.loc 1 24 29 is_stmt 1 discriminator 3 view .LVU14
  24:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  38               		.loc 1 24 15 discriminator 3 view .LVU15
  39 001e 41E8 0014 		lea (20,%a0),%a0
  40 0022 B1C0      		cmp.l %d0,%a0
  41 0024 66E6      		jne .L2
  30:mtk_c.c       **** 	}
  31:mtk_c.c       **** 
  32:mtk_c.c       **** 	ready = NULLTASKID;	/* readyキューの初期化 */					
  42               		.loc 1 32 2 view .LVU16
  43               		.loc 1 32 8 is_stmt 0 view .LVU17
  44 0026 42B9 0000 		clr.l ready
  44      0000 
  33:mtk_c.c       **** 
  34:mtk_c.c       **** 	*(int*) 0x0084 = (int)pv_handler; /* pv_handlerをTRAP#1の割り込みベクタに登録 */
  45               		.loc 1 34 2 is_stmt 1 view .LVU18
  46               		.loc 1 34 17 is_stmt 0 view .LVU19
  47 002c 21FC 0000 		move.l #pv_handler,132.w
  47      0000 0084 
  35:mtk_c.c       **** 
  36:mtk_c.c       ****     for(i = 0; i < NUMSEMAPHORE; i++){  /* セマフォの値を初期化 */
  48               		.loc 1 36 5 is_stmt 1 view .LVU20
  49               	.LVL2:
  50               		.loc 1 36 18 view .LVU21
  37:mtk_c.c       ****         semaphore[i].count = 1;
  51               		.loc 1 37 9 view .LVU22
  52               		.loc 1 37 28 is_stmt 0 view .LVU23
  53 0034 7001      		moveq #1,%d0
  54 0036 23C0 0000 		move.l %d0,semaphore
  54      0000 
  38:mtk_c.c       ****         semaphore[i].task_list = NULLTASKID;
  55               		.loc 1 38 9 is_stmt 1 view .LVU24
  56               		.loc 1 38 32 is_stmt 0 view .LVU25
  57 003c 42B9 0000 		clr.l semaphore+4
  57      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  58               		.loc 1 36 35 is_stmt 1 view .LVU26
  59               	.LVL3:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  60               		.loc 1 36 18 view .LVU27
  37:mtk_c.c       ****         semaphore[i].count = 1;
  61               		.loc 1 37 9 view .LVU28
  37:mtk_c.c       ****         semaphore[i].count = 1;
  62               		.loc 1 37 28 is_stmt 0 view .LVU29
  63 0042 23C0 0000 		move.l %d0,semaphore+8
  63      0000 


  64               		.loc 1 38 9 is_stmt 1 view .LVU30
  65               		.loc 1 38 32 is_stmt 0 view .LVU31
  66 0048 42B9 0000 		clr.l semaphore+12
  66      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  67               		.loc 1 36 35 is_stmt 1 view .LVU32
  68               	.LVL4:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  69               		.loc 1 36 18 view .LVU33
  37:mtk_c.c       ****         semaphore[i].count = 1;
  70               		.loc 1 37 9 view .LVU34
  37:mtk_c.c       ****         semaphore[i].count = 1;
  71               		.loc 1 37 28 is_stmt 0 view .LVU35
  72 004e 23C0 0000 		move.l %d0,semaphore+16
  72      0000 
  73               		.loc 1 38 9 is_stmt 1 view .LVU36
  74               		.loc 1 38 32 is_stmt 0 view .LVU37
  75 0054 42B9 0000 		clr.l semaphore+20
  75      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  76               		.loc 1 36 35 is_stmt 1 view .LVU38
  77               	.LVL5:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  78               		.loc 1 36 18 view .LVU39
  39:mtk_c.c       ****     }
  40:mtk_c.c       **** }
  79               		.loc 1 40 1 is_stmt 0 view .LVU40
  80 005a 4E75      		rts
  81               		.cfi_endproc
  82               	.LFE3:
  83               		.size	init_kernel, .-init_kernel
  84               		.align	2
  85               		.globl	set_task
  86               		.type	set_task, @function
  87               	set_task:
  88               	.LVL6:
  89               	.LFB4:
  41:mtk_c.c       **** 
  42:mtk_c.c       **** /************************************************************************************
  43:mtk_c.c       **** **ユーザタスクの初期化と登録 set task()
  44:mtk_c.c       **** **引数にはユーザタスク関数へのポインタ（タスク関数の先頭番地）を取
  45:mtk_c.c       **** **1. タスク ID の決定：
  46:mtk_c.c       **** **task tab[] の中に空きスロットを見つけ (0 番は除く)，その ID を new task に
  47:mtk_c.c       **** **2. TCB の更新：
  48:mtk_c.c       **** **上で見つけた TCB に，task addr，status を登録する．
  49:mtk_c.c       **** **3. スタックの初期化：
  50:mtk_c.c       **** **関数 init stack() を起動する．関数 init stack() の戻り値を TCB の stack ptr に
  51:mtk_c.c       **** **する．
  52:mtk_c.c       **** **4. キューへの登録：
  53:mtk_c.c       **** **ready キューに new task を登録する．
  54:mtk_c.c       **** **Cでは，配列の名前はその配列のアドレスを意味する．TCB へ登録するス
  55:mtk_c.c       **** **これらの機能を用いて表すことができる．
  56:mtk_c.c       **** ************************************************************************************/
  57:mtk_c.c       **** void set_task(void (*usertask_ptr)()){
  90               		.loc 1 57 38 is_stmt 1 view -0
  91               		.cfi_startproc
  92               		.loc 1 57 38 is_stmt 0 view .LVU42


  93 005c 2F0A      		move.l %a2,-(%sp)
  94               		.cfi_def_cfa_offset 8
  95               		.cfi_offset 10, -8
  96 005e 2F02      		move.l %d2,-(%sp)
  97               		.cfi_def_cfa_offset 12
  98               		.cfi_offset 2, -12
  58:mtk_c.c       ****     TASK_ID_TYPE i;
  99               		.loc 1 58 5 is_stmt 1 view .LVU43
  59:mtk_c.c       ****     
  60:mtk_c.c       ****     for(i = 1; i < NUMTASK+1; i++){
 100               		.loc 1 60 5 view .LVU44
 101               	.LVL7:
 102               		.loc 1 60 18 view .LVU45
 103 0060 41F9 0000 		lea task_tab+32,%a0
 103      0000 
 104               		.loc 1 60 11 is_stmt 0 view .LVU46
 105 0066 7201      		moveq #1,%d1
 106               	.LVL8:
 107               	.L12:
  61:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 108               		.loc 1 61 9 is_stmt 1 view .LVU47
 109               		.loc 1 61 11 is_stmt 0 view .LVU48
 110 0068 70FD      		moveq #-3,%d0
 111 006a C090      		and.l (%a0),%d0
 112 006c 6712      		jeq .L18
  60:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 113               		.loc 1 60 32 is_stmt 1 discriminator 2 view .LVU49
 114 006e 5281      		addq.l #1,%d1
 115               	.LVL9:
  60:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 116               		.loc 1 60 18 discriminator 2 view .LVU50
 117 0070 41E8 0014 		lea (20,%a0),%a0
 118 0074 7006      		moveq #6,%d0
 119 0076 B081      		cmp.l %d1,%d0
 120 0078 66EE      		jne .L12
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
  63:mtk_c.c       ****             task_tab[i].task_addr = usertask_ptr; /* TCB の更新 */
  64:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
  65:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
  66:mtk_c.c       ****             addq(&ready, new_task); /* キューへの登録 */
  67:mtk_c.c       ****             break;
  68:mtk_c.c       ****         }
  69:mtk_c.c       ****     }
  70:mtk_c.c       **** }
 121               		.loc 1 70 1 is_stmt 0 view .LVU51
 122 007a 241F      		move.l (%sp)+,%d2
 123 007c 245F      		move.l (%sp)+,%a2
 124 007e 4E75      		rts
 125               	.L18:
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
 126               		.loc 1 62 13 is_stmt 1 view .LVU52
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
 127               		.loc 1 62 22 is_stmt 0 view .LVU53
 128 0080 23C1 0000 		move.l %d1,new_task
 128      0000 
  63:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
 129               		.loc 1 63 13 is_stmt 1 view .LVU54


  63:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
 130               		.loc 1 63 35 is_stmt 0 view .LVU55
 131 0086 43F9 0000 		lea task_tab,%a1
 131      0000 
 132 008c 2041      		move.l %d1,%a0
 133 008e D1C1      		add.l %d1,%a0
 134 0090 D1C8      		add.l %a0,%a0
 135 0092 D1C1      		add.l %d1,%a0
 136 0094 D1C8      		add.l %a0,%a0
 137 0096 D1C8      		add.l %a0,%a0
 138 0098 23AF 000C 		move.l 12(%sp),(%a1,%a0.l)
 138      8800 
  64:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
 139               		.loc 1 64 13 is_stmt 1 view .LVU56
  64:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
 140               		.loc 1 64 32 is_stmt 0 view .LVU57
 141 009e 41F1 8800 		lea (%a1,%a0.l),%a0
 142 00a2 7001      		moveq #1,%d0
 143 00a4 2140 000C 		move.l %d0,12(%a0)
  65:mtk_c.c       ****             addq(&ready, new_task); /* キューへの登録 */
 144               		.loc 1 65 13 is_stmt 1 view .LVU58
 145               	.LVL10:
 146               	.LBB22:
 147               	.LBI22:
  71:mtk_c.c       **** 
  72:mtk_c.c       **** /***************************************************************************************
  73:mtk_c.c       **** **ユーザタスク用のスタックの初期化 init stack()
  74:mtk_c.c       **** **タスク ID を引数としてとる．戻り値に初期化が完了した時点でのユーザ
  75:mtk_c.c       **** **アドレス (void * 型) を返す．引数を id とすると，以下の処理を行なう．
  76:mtk_c.c       **** **1. stacks[id - 1] の sstack を図 2.8 のように設定する．図中の「initial(初期)PC
  77:mtk_c.c       **** **はタスクの実行開始アドレス task tab[id].task addr を設定する．「initial SR」
  78:mtk_c.c       **** **は 0x0000 を，15×4 バイト分の領域を飛ばして，「initial USP」の部分はユー
  79:mtk_c.c       **** **プ stacks[id - 1].ustack[STKSIZE] を設定する．
  80:mtk_c.c       **** **2. 図 2.8 の (*) のアドレスを戻り値として返す．
  81:mtk_c.c       **** **なお，int 型へのポインタ ssp を宣言しておくと，ssp の値が現在のスーパ
  82:mtk_c.c       **** **トップを指しているならば，4 バイトの値をプッシュすることは，*(--ssp)
  83:mtk_c.c       **** **これを利用すると，上記の操作は簡単である．また，2 バイトの値をプ
  84:mtk_c.c       **** **short int 型へのポインタを宣言しておき，これを利用すると良い．
  85:mtk_c.c       **** *****************************************************************************************/
  86:mtk_c.c       **** void *init_stack(TASK_ID_TYPE id){
 148               		.loc 1 86 7 view .LVU59
 149               	.LBB23:
  87:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 150               		.loc 1 87 5 view .LVU60
 151 00a8 2001      		move.l %d1,%d0
 152 00aa 740B      		moveq #11,%d2
 153 00ac E5A8      		lsl.l %d2,%d0
 154               		.loc 1 87 10 is_stmt 0 view .LVU61
 155 00ae 2440      		move.l %d0,%a2
 156 00b0 D5FC 0000 		add.l #stacks,%a2
 156      0000 
 157               	.LVL11:
  88:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 158               		.loc 1 88 5 is_stmt 1 view .LVU62
 159               		.loc 1 88 18 is_stmt 0 view .LVU63
 160 00b6 256F 000C 		move.l 12(%sp),-4(%a2)
 160      FFFC 


  89:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 161               		.loc 1 89 5 is_stmt 1 view .LVU64
 162               	.LVL12:
  90:mtk_c.c       ****     *(--short_ssp) = 0x0000; /* initial SRの設定 */
 163               		.loc 1 90 5 view .LVU65
 164               		.loc 1 90 20 is_stmt 0 view .LVU66
 165 00bc 426A FFFA 		clr.w -6(%a2)
  91:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 166               		.loc 1 91 5 is_stmt 1 view .LVU67
 167               	.LVL13:
  92:mtk_c.c       ****     int_ssp -= 15; /* 15*4バイト分の領域を飛ばす */
 168               		.loc 1 92 5 view .LVU68
  93:mtk_c.c       ****     /*修正*/
  94:mtk_c.c       ****     *(--int_ssp) = &stacks[id-1].ustack[STKSIZE]; /* initial USPの設定 */
 169               		.loc 1 94 5 view .LVU69
 170               		.loc 1 94 20 is_stmt 0 view .LVU70
 171 00c0 0680 0000 		add.l #stacks-1024,%d0
 171      0000 
 172 00c6 2540 FFBA 		move.l %d0,-70(%a2)
  95:mtk_c.c       **** 
  96:mtk_c.c       ****     return (void*)int_ssp;
 173               		.loc 1 96 5 is_stmt 1 view .LVU71
 174               	.LVL14:
  94:mtk_c.c       **** 
 175               		.loc 1 94 18 is_stmt 0 view .LVU72
 176 00ca 45EA FFBA 		lea (-70,%a2),%a2
 177               	.LVL15:
  94:mtk_c.c       **** 
 178               		.loc 1 94 18 view .LVU73
 179 00ce 214A 0004 		move.l %a2,4(%a0)
 180               	.LBE23:
 181               	.LBE22:
  66:mtk_c.c       ****             break;
 182               		.loc 1 66 13 is_stmt 1 view .LVU74
 183               	.LVL16:
 184               	.LBB24:
 185               	.LBI24:
  97:mtk_c.c       **** }
  98:mtk_c.c       **** 
  99:mtk_c.c       **** /*********
 100:mtk_c.c       **** ***1. 最初のタスクの決定：
 101:mtk_c.c       **** ***キュー ready から removeq() によってタスクを１つ取り出し，curr task に代
 102:mtk_c.c       **** ***2. タイマの設定:
 103:mtk_c.c       **** ***関数 init timer() を呼び出し，タスクスイッチを行うためのタイマを設定
 104:mtk_c.c       **** ***3. 最初のタスクの起動：
 105:mtk_c.c       **** ***関数 first task() を起動して最初のタスクに制御を移す．これは m68k-elf-gcc
 106:mtk_c.c       **** ***によってアセンブリ言語サブルーチン first task の呼び出しに変換される
 107:mtk_c.c       **** *********/
 108:mtk_c.c       **** void begin_sch(){
 109:mtk_c.c       ****     curr_task=removeq(&ready);
 110:mtk_c.c       ****     init_timer();
 111:mtk_c.c       ****     first_task();
 112:mtk_c.c       ****     printf("hello world\n");
 113:mtk_c.c       **** }
 114:mtk_c.c       **** 
 115:mtk_c.c       **** // タスクのキューの最後尾へのTCBの追加
 116:mtk_c.c       **** void addq(TASK_ID_TYPE* que_ptr, TASK_ID_TYPE id){


 186               		.loc 1 116 6 view .LVU75
 187               	.LBB25:
 117:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 188               		.loc 1 117 2 view .LVU76
 189               		.loc 1 117 5 is_stmt 0 view .LVU77
 190 00d2 2079 0000 		move.l ready,%a0
 190      0000 
 191               		.loc 1 117 4 view .LVU78
 192 00d8 B0FC 0000 		cmp.w #0,%a0
 193 00dc 660C      		jne .L8
 194               	.LVL17:
 118:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 195               		.loc 1 118 3 is_stmt 1 view .LVU79
 196               		.loc 1 118 12 is_stmt 0 view .LVU80
 197 00de 23C1 0000 		move.l %d1,ready
 197      0000 
 198               	.LBE25:
 199               	.LBE24:
  70:mtk_c.c       **** 
 200               		.loc 1 70 1 view .LVU81
 201 00e4 241F      		move.l (%sp)+,%d2
 202 00e6 245F      		move.l (%sp)+,%a2
 203               	.LVL18:
  70:mtk_c.c       **** 
 204               		.loc 1 70 1 view .LVU82
 205 00e8 4E75      		rts
 206               	.LVL19:
 207               	.L8:
 208               	.LBB28:
 209               	.LBB27:
 210               	.LBB26:
 119:mtk_c.c       **** 	}
 120:mtk_c.c       **** 	else{
 121:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[*que_ptr];	// 先頭のタスクのポインタ設定
 211               		.loc 1 121 3 is_stmt 1 view .LVU83
 122:mtk_c.c       **** 		while(1){
 212               		.loc 1 122 3 view .LVU84
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 213               		.loc 1 123 4 view .LVU85
 214               		.loc 1 123 18 is_stmt 0 view .LVU86
 215 00ea 2008      		move.l %a0,%d0
 216 00ec D088      		add.l %a0,%d0
 217 00ee D080      		add.l %d0,%d0
 218 00f0 D088      		add.l %a0,%d0
 219 00f2 D080      		add.l %d0,%d0
 220 00f4 D080      		add.l %d0,%d0
 221 00f6 41F1 0800 		lea (%a1,%d0.l),%a0
 222               	.LVL20:
 223               		.loc 1 123 18 view .LVU87
 224 00fa 2028 0010 		move.l 16(%a0),%d0
 225               		.loc 1 123 6 view .LVU88
 226 00fe 6726      		jeq .L11
 227               	.LVL21:
 228               	.L10:
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 125:mtk_c.c       **** 				break;
 126:mtk_c.c       **** 			}


 127:mtk_c.c       **** 			else{
 128:mtk_c.c       **** 				task_ptr = &task_tab[(*task_ptr).next];		//次のタスクにポインタを移動
 229               		.loc 1 128 5 is_stmt 1 view .LVU89
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 230               		.loc 1 122 8 view .LVU90
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 231               		.loc 1 122 3 view .LVU91
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 232               		.loc 1 123 4 view .LVU92
 233 0100 2040      		move.l %d0,%a0
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 234               		.loc 1 123 18 is_stmt 0 view .LVU93
 235 0102 D080      		add.l %d0,%d0
 236               	.LVL22:
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 237               		.loc 1 123 18 view .LVU94
 238 0104 D080      		add.l %d0,%d0
 239 0106 D088      		add.l %a0,%d0
 240 0108 D080      		add.l %d0,%d0
 241 010a D080      		add.l %d0,%d0
 242 010c 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 243               		.loc 1 123 6 view .LVU95
 244 0110 66EE      		jne .L10
 245               		.loc 1 128 14 view .LVU96
 246 0112 2008      		move.l %a0,%d0
 247 0114 D088      		add.l %a0,%d0
 248 0116 D080      		add.l %d0,%d0
 249 0118 D088      		add.l %a0,%d0
 250 011a D080      		add.l %d0,%d0
 251 011c D080      		add.l %d0,%d0
 252 011e 2040      		move.l %d0,%a0
 253               	.LVL23:
 254               		.loc 1 128 14 view .LVU97
 255 0120 D1FC 0000 		add.l #task_tab,%a0
 255      0000 
 256               	.L11:
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 257               		.loc 1 124 5 is_stmt 1 view .LVU98
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 258               		.loc 1 124 22 is_stmt 0 view .LVU99
 259 0126 2141 0010 		move.l %d1,16(%a0)
 125:mtk_c.c       **** 			}
 260               		.loc 1 125 5 is_stmt 1 view .LVU100
 261               	.LBE26:
 262               	.LBE27:
 263               	.LBE28:
  70:mtk_c.c       **** 
 264               		.loc 1 70 1 is_stmt 0 view .LVU101
 265 012a 241F      		move.l (%sp)+,%d2
 266 012c 245F      		move.l (%sp)+,%a2
 267               	.LVL24:
  70:mtk_c.c       **** 
 268               		.loc 1 70 1 view .LVU102
 269 012e 4E75      		rts
 270               		.cfi_endproc
 271               	.LFE4:


 272               		.size	set_task, .-set_task
 273               		.align	2
 274               		.globl	init_stack
 275               		.type	init_stack, @function
 276               	init_stack:
 277               	.LVL25:
 278               	.LFB5:
  86:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 279               		.loc 1 86 34 is_stmt 1 view -0
 280               		.cfi_startproc
  86:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 281               		.loc 1 86 34 is_stmt 0 view .LVU104
 282 0130 2F02      		move.l %d2,-(%sp)
 283               		.cfi_def_cfa_offset 8
 284               		.cfi_offset 2, -8
 285 0132 202F 0008 		move.l 8(%sp),%d0
  87:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 286               		.loc 1 87 5 is_stmt 1 view .LVU105
 287 0136 2400      		move.l %d0,%d2
 288 0138 720B      		moveq #11,%d1
 289 013a E3AA      		lsl.l %d1,%d2
  87:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 290               		.loc 1 87 10 is_stmt 0 view .LVU106
 291 013c 2042      		move.l %d2,%a0
 292 013e D1FC 0000 		add.l #stacks,%a0
 292      0000 
 293               	.LVL26:
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 294               		.loc 1 88 5 is_stmt 1 view .LVU107
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 295               		.loc 1 88 32 is_stmt 0 view .LVU108
 296 0144 2200      		move.l %d0,%d1
 297 0146 D280      		add.l %d0,%d1
 298 0148 D281      		add.l %d1,%d1
 299 014a D280      		add.l %d0,%d1
 300 014c D281      		add.l %d1,%d1
 301 014e D281      		add.l %d1,%d1
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 302               		.loc 1 88 18 view .LVU109
 303 0150 43F9 0000 		lea task_tab,%a1
 303      0000 
 304 0156 2171 1800 		move.l (%a1,%d1.l),-4(%a0)
 304      FFFC 
  89:mtk_c.c       ****     *(--short_ssp) = 0x0000; /* initial SRの設定 */
 305               		.loc 1 89 5 is_stmt 1 view .LVU110
 306               	.LVL27:
  90:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 307               		.loc 1 90 5 view .LVU111
  90:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 308               		.loc 1 90 20 is_stmt 0 view .LVU112
 309 015c 4268 FFFA 		clr.w -6(%a0)
  91:mtk_c.c       ****     int_ssp -= 15; /* 15*4バイト分の領域を飛ばす */
 310               		.loc 1 91 5 is_stmt 1 view .LVU113
 311               	.LVL28:
  92:mtk_c.c       ****     /*修正*/
 312               		.loc 1 92 5 view .LVU114
  94:mtk_c.c       **** 


 313               		.loc 1 94 5 view .LVU115
  94:mtk_c.c       **** 
 314               		.loc 1 94 20 is_stmt 0 view .LVU116
 315 0160 0682 0000 		add.l #stacks-1024,%d2
 315      0000 
 316 0166 2142 FFBA 		move.l %d2,-70(%a0)
  96:mtk_c.c       **** }
 317               		.loc 1 96 5 is_stmt 1 view .LVU117
  97:mtk_c.c       **** 
 318               		.loc 1 97 1 is_stmt 0 view .LVU118
 319 016a 70BA      		moveq #-70,%d0
 320 016c D088      		add.l %a0,%d0
 321               	.LVL29:
  97:mtk_c.c       **** 
 322               		.loc 1 97 1 view .LVU119
 323 016e 241F      		move.l (%sp)+,%d2
 324 0170 4E75      		rts
 325               		.cfi_endproc
 326               	.LFE5:
 327               		.size	init_stack, .-init_stack
 328               		.section	.rodata.str1.1,"aMS",@progbits,1
 329               	.LC0:
 330 0000 6865 6C6C 		.string	"hello world"
 330      6F20 776F 
 330      726C 6400 
 331               		.text
 332               		.align	2
 333               		.globl	begin_sch
 334               		.type	begin_sch, @function
 335               	begin_sch:
 336               	.LFB6:
 108:mtk_c.c       ****     curr_task=removeq(&ready);
 337               		.loc 1 108 17 is_stmt 1 view -0
 338               		.cfi_startproc
 109:mtk_c.c       ****     init_timer();
 339               		.loc 1 109 5 view .LVU121
 340               	.LVL30:
 341               	.LBB29:
 342               	.LBI29:
 129:mtk_c.c       **** 			}
 130:mtk_c.c       **** 		}
 131:mtk_c.c       **** 	}
 132:mtk_c.c       **** }
 133:mtk_c.c       **** 
 134:mtk_c.c       **** // タスクのキューの先頭からのTCBの除去
 135:mtk_c.c       **** TASK_ID_TYPE removeq(TASK_ID_TYPE* que_ptr){
 343               		.loc 1 135 14 view .LVU122
 344               	.LBB30:
 136:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 345               		.loc 1 136 2 view .LVU123
 346               		.loc 1 136 15 is_stmt 0 view .LVU124
 347 0172 2039 0000 		move.l ready,%d0
 347      0000 
 348               	.LVL31:
 137:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 349               		.loc 1 137 2 is_stmt 1 view .LVU125
 350               		.loc 1 137 4 is_stmt 0 view .LVU126


 351 0178 671A      		jeq .L22
 352               	.LBB31:
 138:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 353               		.loc 1 138 3 is_stmt 1 view .LVU127
 354               	.LVL32:
 139:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 355               		.loc 1 139 3 view .LVU128
 356               		.loc 1 139 25 is_stmt 0 view .LVU129
 357 017a 2040      		move.l %d0,%a0
 358 017c D1C0      		add.l %d0,%a0
 359 017e D1C8      		add.l %a0,%a0
 360 0180 D1C0      		add.l %d0,%a0
 361 0182 D1C8      		add.l %a0,%a0
 362 0184 D1C8      		add.l %a0,%a0
 363 0186 D1FC 0000 		add.l #task_tab+16,%a0
 363      0000 
 364               		.loc 1 139 12 view .LVU130
 365 018c 23D0 0000 		move.l (%a0),ready
 365      0000 
 140:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 366               		.loc 1 140 3 is_stmt 1 view .LVU131
 367               		.loc 1 140 20 is_stmt 0 view .LVU132
 368 0192 4290      		clr.l (%a0)
 369               	.LVL33:
 370               	.L22:
 371               		.loc 1 140 20 view .LVU133
 372               	.LBE31:
 141:mtk_c.c       **** 	}
 142:mtk_c.c       **** 	return r_id;									// キューの先頭のタスクのidを返す
 373               		.loc 1 142 2 is_stmt 1 view .LVU134
 374               		.loc 1 142 2 is_stmt 0 view .LVU135
 375               	.LBE30:
 376               	.LBE29:
 109:mtk_c.c       ****     init_timer();
 377               		.loc 1 109 14 view .LVU136
 378 0194 23C0 0000 		move.l %d0,curr_task
 378      0000 
 110:mtk_c.c       ****     first_task();
 379               		.loc 1 110 5 is_stmt 1 view .LVU137
 380 019a 4EB9 0000 		jsr init_timer
 380      0000 
 381               	.LVL34:
 111:mtk_c.c       ****     printf("hello world\n");
 382               		.loc 1 111 5 view .LVU138
 383 01a0 4EB9 0000 		jsr first_task
 383      0000 
 384               	.LVL35:
 112:mtk_c.c       **** }
 385               		.loc 1 112 5 view .LVU139
 386 01a6 4879 0000 		pea .LC0
 386      0000 
 387               		.cfi_def_cfa_offset 8
 388 01ac 4EB9 0000 		jsr puts
 388      0000 
 389               	.LVL36:
 113:mtk_c.c       **** 
 390               		.loc 1 113 1 is_stmt 0 view .LVU140


 391 01b2 588F      		addq.l #4,%sp
 392               		.cfi_def_cfa_offset 4
 393 01b4 4E75      		rts
 394               		.cfi_endproc
 395               	.LFE6:
 396               		.size	begin_sch, .-begin_sch
 397               		.align	2
 398               		.globl	addq
 399               		.type	addq, @function
 400               	addq:
 401               	.LVL37:
 402               	.LFB7:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 403               		.loc 1 116 50 is_stmt 1 view -0
 404               		.cfi_startproc
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 405               		.loc 1 116 50 is_stmt 0 view .LVU142
 406 01b6 206F 0004 		move.l 4(%sp),%a0
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 407               		.loc 1 117 2 is_stmt 1 view .LVU143
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 408               		.loc 1 117 5 is_stmt 0 view .LVU144
 409 01ba 2210      		move.l (%a0),%d1
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 410               		.loc 1 117 4 view .LVU145
 411 01bc 6606      		jne .L29
 118:mtk_c.c       **** 	}
 412               		.loc 1 118 3 is_stmt 1 view .LVU146
 118:mtk_c.c       **** 	}
 413               		.loc 1 118 12 is_stmt 0 view .LVU147
 414 01be 20AF 0008 		move.l 8(%sp),(%a0)
 132:mtk_c.c       **** 
 415               		.loc 1 132 1 view .LVU148
 416 01c2 4E75      		rts
 417               	.L29:
 418               	.LBB32:
 121:mtk_c.c       **** 		while(1){
 419               		.loc 1 121 3 is_stmt 1 view .LVU149
 420               	.LVL38:
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 421               		.loc 1 122 3 view .LVU150
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 422               		.loc 1 123 4 view .LVU151
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 423               		.loc 1 123 18 is_stmt 0 view .LVU152
 424 01c4 43F9 0000 		lea task_tab,%a1
 424      0000 
 425 01ca 2001      		move.l %d1,%d0
 426 01cc D081      		add.l %d1,%d0
 427 01ce D080      		add.l %d0,%d0
 428 01d0 D081      		add.l %d1,%d0
 429 01d2 D080      		add.l %d0,%d0
 430 01d4 D080      		add.l %d0,%d0
 431 01d6 41F1 0800 		lea (%a1,%d0.l),%a0
 432 01da 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 433               		.loc 1 123 6 view .LVU153


 434 01de 6726      		jeq .L32
 435               	.LVL39:
 436               	.L31:
 128:mtk_c.c       **** 			}
 437               		.loc 1 128 5 is_stmt 1 view .LVU154
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 438               		.loc 1 122 8 view .LVU155
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 439               		.loc 1 122 3 view .LVU156
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 440               		.loc 1 123 4 view .LVU157
 441 01e0 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 442               		.loc 1 123 18 is_stmt 0 view .LVU158
 443 01e2 D080      		add.l %d0,%d0
 444               	.LVL40:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 445               		.loc 1 123 18 view .LVU159
 446 01e4 D080      		add.l %d0,%d0
 447 01e6 D081      		add.l %d1,%d0
 448 01e8 D080      		add.l %d0,%d0
 449 01ea D080      		add.l %d0,%d0
 450 01ec 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 451               		.loc 1 123 6 view .LVU160
 452 01f0 66EE      		jne .L31
 128:mtk_c.c       **** 			}
 453               		.loc 1 128 14 view .LVU161
 454 01f2 2001      		move.l %d1,%d0
 455 01f4 D081      		add.l %d1,%d0
 456 01f6 D080      		add.l %d0,%d0
 457 01f8 D081      		add.l %d1,%d0
 458 01fa D080      		add.l %d0,%d0
 459 01fc D080      		add.l %d0,%d0
 460 01fe 2040      		move.l %d0,%a0
 461 0200 D1FC 0000 		add.l #task_tab,%a0
 461      0000 
 462               	.LVL41:
 463               	.L32:
 124:mtk_c.c       **** 				break;
 464               		.loc 1 124 5 is_stmt 1 view .LVU162
 124:mtk_c.c       **** 				break;
 465               		.loc 1 124 22 is_stmt 0 view .LVU163
 466 0206 216F 0008 		move.l 8(%sp),16(%a0)
 466      0010 
 125:mtk_c.c       **** 			}
 467               		.loc 1 125 5 is_stmt 1 view .LVU164
 468               	.LBE32:
 132:mtk_c.c       **** 
 469               		.loc 1 132 1 is_stmt 0 view .LVU165
 470 020c 4E75      		rts
 471               		.cfi_endproc
 472               	.LFE7:
 473               		.size	addq, .-addq
 474               		.align	2
 475               		.globl	removeq
 476               		.type	removeq, @function


 477               	removeq:
 478               	.LVL42:
 479               	.LFB8:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 480               		.loc 1 135 44 is_stmt 1 view -0
 481               		.cfi_startproc
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 482               		.loc 1 135 44 is_stmt 0 view .LVU167
 483 020e 226F 0004 		move.l 4(%sp),%a1
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 484               		.loc 1 136 2 is_stmt 1 view .LVU168
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 485               		.loc 1 136 15 is_stmt 0 view .LVU169
 486 0212 2011      		move.l (%a1),%d0
 487               	.LVL43:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 488               		.loc 1 137 2 is_stmt 1 view .LVU170
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 489               		.loc 1 137 4 is_stmt 0 view .LVU171
 490 0214 6716      		jeq .L37
 491               	.LBB33:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 492               		.loc 1 138 3 is_stmt 1 view .LVU172
 493               	.LVL44:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 494               		.loc 1 139 3 view .LVU173
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 495               		.loc 1 139 25 is_stmt 0 view .LVU174
 496 0216 2040      		move.l %d0,%a0
 497 0218 D1C0      		add.l %d0,%a0
 498 021a D1C8      		add.l %a0,%a0
 499 021c D1C0      		add.l %d0,%a0
 500 021e D1C8      		add.l %a0,%a0
 501 0220 D1C8      		add.l %a0,%a0
 502 0222 D1FC 0000 		add.l #task_tab+16,%a0
 502      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 503               		.loc 1 139 12 view .LVU175
 504 0228 2290      		move.l (%a0),(%a1)
 140:mtk_c.c       **** 	}
 505               		.loc 1 140 3 is_stmt 1 view .LVU176
 140:mtk_c.c       **** 	}
 506               		.loc 1 140 20 is_stmt 0 view .LVU177
 507 022a 4290      		clr.l (%a0)
 508               	.LBE33:
 509               		.loc 1 142 2 is_stmt 1 view .LVU178
 510               	.LVL45:
 511               	.L37:
 143:mtk_c.c       **** }
 512               		.loc 1 143 1 is_stmt 0 view .LVU179
 513 022c 4E75      		rts
 514               		.cfi_endproc
 515               	.LFE8:
 516               		.size	removeq, .-removeq
 517               		.align	2
 518               		.globl	sched
 519               		.type	sched, @function


 520               	sched:
 521               	.LFB9:
 144:mtk_c.c       **** 
 145:mtk_c.c       **** // タスクのスケジュール関数
 146:mtk_c.c       **** void sched(){
 522               		.loc 1 146 13 is_stmt 1 view -0
 523               		.cfi_startproc
 147:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 524               		.loc 1 147 2 view .LVU181
 525               	.LVL46:
 526               	.LBB37:
 527               	.LBI37:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 528               		.loc 1 135 14 view .LVU182
 529               	.LBB38:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 530               		.loc 1 136 2 view .LVU183
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 531               		.loc 1 136 15 is_stmt 0 view .LVU184
 532 022e 2039 0000 		move.l ready,%d0
 532      0000 
 533               	.LVL47:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 534               		.loc 1 137 2 is_stmt 1 view .LVU185
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 535               		.loc 1 137 4 is_stmt 0 view .LVU186
 536 0234 6722      		jeq .L45
 537               	.LBB39:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 538               		.loc 1 138 3 is_stmt 1 view .LVU187
 539               	.LVL48:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 540               		.loc 1 139 3 view .LVU188
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 541               		.loc 1 139 25 is_stmt 0 view .LVU189
 542 0236 2040      		move.l %d0,%a0
 543 0238 D1C0      		add.l %d0,%a0
 544 023a D1C8      		add.l %a0,%a0
 545 023c D1C0      		add.l %d0,%a0
 546 023e D1C8      		add.l %a0,%a0
 547 0240 D1C8      		add.l %a0,%a0
 548 0242 D1FC 0000 		add.l #task_tab+16,%a0
 548      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 549               		.loc 1 139 12 view .LVU190
 550 0248 23D0 0000 		move.l (%a0),ready
 550      0000 
 140:mtk_c.c       **** 	}
 551               		.loc 1 140 3 is_stmt 1 view .LVU191
 140:mtk_c.c       **** 	}
 552               		.loc 1 140 20 is_stmt 0 view .LVU192
 553 024e 4290      		clr.l (%a0)
 554               	.LBE39:
 142:mtk_c.c       **** }
 555               		.loc 1 142 2 is_stmt 1 view .LVU193
 556               	.LVL49:
 142:mtk_c.c       **** }


 557               		.loc 1 142 2 is_stmt 0 view .LVU194
 558               	.LBE38:
 559               	.LBE37:
 560               		.loc 1 147 12 view .LVU195
 561 0250 23C0 0000 		move.l %d0,next_task
 561      0000 
 148:mtk_c.c       **** 	if(next_task == NULLTASKID){
 562               		.loc 1 148 2 is_stmt 1 view .LVU196
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 150:mtk_c.c       **** 	}		
 151:mtk_c.c       **** }
 563               		.loc 1 151 1 is_stmt 0 view .LVU197
 564 0256 4E75      		rts
 565               	.LVL50:
 566               	.L45:
 567               	.LBB41:
 568               	.LBB40:
 142:mtk_c.c       **** }
 569               		.loc 1 142 2 is_stmt 1 view .LVU198
 142:mtk_c.c       **** }
 570               		.loc 1 142 2 is_stmt 0 view .LVU199
 571               	.LBE40:
 572               	.LBE41:
 148:mtk_c.c       **** 	if(next_task == NULLTASKID){
 573               		.loc 1 148 2 is_stmt 1 view .LVU200
 574               	.L46:
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 575               		.loc 1 149 3 discriminator 1 view .LVU201
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 576               		.loc 1 149 8 discriminator 1 view .LVU202
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 577               		.loc 1 149 3 discriminator 1 view .LVU203
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 578               		.loc 1 149 8 discriminator 1 view .LVU204
 579 0258 60FE      		jra .L46
 580               		.cfi_endproc
 581               	.LFE9:
 582               		.size	sched, .-sched
 583               		.align	2
 584               		.globl	sleep
 585               		.type	sleep, @function
 586               	sleep:
 587               	.LVL51:
 588               	.LFB11:
 152:mtk_c.c       **** 
 153:mtk_c.c       **** //齊藤作成
 154:mtk_c.c       **** //引数としてセマフォID（割り込み時のレジスタD1が保持）をとる
 155:mtk_c.c       **** //1.セマフォの値を減らす
 156:mtk_c.c       **** //2.セマフォが獲得（セマフォの値が０以上）ならばなにもしない（ユー
 157:mtk_c.c       **** //セマフォが獲得できない（セマフォの値が負）ならばsleep(s_id)を実行し
 158:mtk_c.c       **** 
 159:mtk_c.c       **** 
 160:mtk_c.c       **** void p_body(TASK_ID_TYPE s_id){
 161:mtk_c.c       **** 	semaphore[s_id].count --;
 162:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 163:mtk_c.c       **** 		sleep(s_id);
 164:mtk_c.c       **** 		}


 165:mtk_c.c       **** }
 166:mtk_c.c       **** 
 167:mtk_c.c       **** void sleep(int ch){
 589               		.loc 1 167 19 view -0
 590               		.cfi_startproc
 591               		.loc 1 167 19 is_stmt 0 view .LVU206
 592 025a 2F02      		move.l %d2,-(%sp)
 593               		.cfi_def_cfa_offset 8
 594               		.cfi_offset 2, -8
 168:mtk_c.c       **** 	addq(&semaphore[ch].task_list, curr_task);		//ch＝セマフォIDの待ち行列に現タスクを
 595               		.loc 1 168 2 is_stmt 1 view .LVU207
 596 025c 2439 0000 		move.l curr_task,%d2
 596      0000 
 597               	.LVL52:
 598               	.LBB50:
 599               	.LBI50:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 600               		.loc 1 116 6 view .LVU208
 601               	.LBB51:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 602               		.loc 1 117 2 view .LVU209
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 603               		.loc 1 117 5 is_stmt 0 view .LVU210
 604 0262 202F 0008 		move.l 8(%sp),%d0
 605 0266 E788      		lsl.l #3,%d0
 606 0268 0680 0000 		add.l #semaphore+4,%d0
 606      0000 
 607               	.LVL53:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 608               		.loc 1 117 5 view .LVU211
 609 026e 2040      		move.l %d0,%a0
 610 0270 2210      		move.l (%a0),%d1
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 611               		.loc 1 117 4 view .LVU212
 612 0272 6636      		jne .L51
 118:mtk_c.c       **** 	}
 613               		.loc 1 118 3 is_stmt 1 view .LVU213
 118:mtk_c.c       **** 	}
 614               		.loc 1 118 12 is_stmt 0 view .LVU214
 615 0274 2082      		move.l %d2,(%a0)
 616 0276 43F9 0000 		lea task_tab,%a1
 616      0000 
 617               	.LVL54:
 118:mtk_c.c       **** 	}
 618               		.loc 1 118 12 view .LVU215
 619               	.LBE51:
 620               	.LBE50:
 169:mtk_c.c       **** 	sched();						//次に実行するタスクのIDをnext_taskにセット
 621               		.loc 1 169 2 is_stmt 1 view .LVU216
 622               	.LBB54:
 623               	.LBI54:
 146:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 624               		.loc 1 146 6 view .LVU217
 625               	.LBB55:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 626               		.loc 1 147 2 view .LVU218
 627               	.LBB56:


 628               	.LBI56:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 629               		.loc 1 135 14 view .LVU219
 630               	.LBB57:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 631               		.loc 1 136 2 view .LVU220
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 632               		.loc 1 136 15 is_stmt 0 view .LVU221
 633 027c 2239 0000 		move.l ready,%d1
 633      0000 
 634               	.LVL55:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 635               		.loc 1 137 2 is_stmt 1 view .LVU222
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 636               		.loc 1 137 4 is_stmt 0 view .LVU223
 637 0282 6774      		jeq .L55
 638               	.L61:
 639               	.LBB58:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 640               		.loc 1 138 3 is_stmt 1 view .LVU224
 641               	.LVL56:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 642               		.loc 1 139 3 view .LVU225
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 643               		.loc 1 139 25 is_stmt 0 view .LVU226
 644 0284 2001      		move.l %d1,%d0
 645 0286 D081      		add.l %d1,%d0
 646 0288 D080      		add.l %d0,%d0
 647 028a D081      		add.l %d1,%d0
 648 028c D080      		add.l %d0,%d0
 649 028e D080      		add.l %d0,%d0
 650 0290 41F1 0810 		lea 16(%a1,%d0.l),%a0
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 651               		.loc 1 139 12 view .LVU227
 652 0294 23D0 0000 		move.l (%a0),ready
 652      0000 
 140:mtk_c.c       **** 	}
 653               		.loc 1 140 3 is_stmt 1 view .LVU228
 140:mtk_c.c       **** 	}
 654               		.loc 1 140 20 is_stmt 0 view .LVU229
 655 029a 4290      		clr.l (%a0)
 656               	.LBE58:
 142:mtk_c.c       **** }
 657               		.loc 1 142 2 is_stmt 1 view .LVU230
 658               	.LVL57:
 142:mtk_c.c       **** }
 659               		.loc 1 142 2 is_stmt 0 view .LVU231
 660               	.LBE57:
 661               	.LBE56:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 662               		.loc 1 147 12 view .LVU232
 663 029c 23C1 0000 		move.l %d1,next_task
 663      0000 
 148:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 664               		.loc 1 148 2 is_stmt 1 view .LVU233
 665               	.LBE55:
 666               	.LBE54:


 170:mtk_c.c       **** 	swtch();						//タスクを切り替える
 667               		.loc 1 170 2 view .LVU234
 171:mtk_c.c       **** }
 668               		.loc 1 171 1 is_stmt 0 view .LVU235
 669 02a2 241F      		move.l (%sp)+,%d2
 170:mtk_c.c       **** 	swtch();						//タスクを切り替える
 670               		.loc 1 170 2 view .LVU236
 671 02a4 4EF9 0000 		jra swtch
 671      0000 
 672               	.LVL58:
 673               	.L51:
 674               	.LBB62:
 675               	.LBB53:
 676               	.LBB52:
 121:mtk_c.c       **** 		while(1){
 677               		.loc 1 121 3 is_stmt 1 view .LVU237
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 678               		.loc 1 122 3 view .LVU238
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 679               		.loc 1 123 4 view .LVU239
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 680               		.loc 1 123 18 is_stmt 0 view .LVU240
 681 02aa 43F9 0000 		lea task_tab,%a1
 681      0000 
 682 02b0 2001      		move.l %d1,%d0
 683               	.LVL59:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 684               		.loc 1 123 18 view .LVU241
 685 02b2 D081      		add.l %d1,%d0
 686 02b4 D080      		add.l %d0,%d0
 687 02b6 D081      		add.l %d1,%d0
 688 02b8 D080      		add.l %d0,%d0
 689 02ba D080      		add.l %d0,%d0
 690 02bc 41F1 0800 		lea (%a1,%d0.l),%a0
 691               	.LVL60:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 692               		.loc 1 123 18 view .LVU242
 693 02c0 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 694               		.loc 1 123 6 view .LVU243
 695 02c4 6726      		jeq .L54
 696               	.LVL61:
 697               	.L53:
 128:mtk_c.c       **** 			}
 698               		.loc 1 128 5 is_stmt 1 view .LVU244
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 699               		.loc 1 122 8 view .LVU245
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 700               		.loc 1 122 3 view .LVU246
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 701               		.loc 1 123 4 view .LVU247
 702 02c6 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 703               		.loc 1 123 18 is_stmt 0 view .LVU248
 704 02c8 D080      		add.l %d0,%d0
 705               	.LVL62:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録


 706               		.loc 1 123 18 view .LVU249
 707 02ca D080      		add.l %d0,%d0
 708 02cc D081      		add.l %d1,%d0
 709 02ce D080      		add.l %d0,%d0
 710 02d0 D080      		add.l %d0,%d0
 711 02d2 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 712               		.loc 1 123 6 view .LVU250
 713 02d6 66EE      		jne .L53
 128:mtk_c.c       **** 			}
 714               		.loc 1 128 14 view .LVU251
 715 02d8 2001      		move.l %d1,%d0
 716 02da D081      		add.l %d1,%d0
 717 02dc D080      		add.l %d0,%d0
 718 02de D081      		add.l %d1,%d0
 719 02e0 D080      		add.l %d0,%d0
 720 02e2 D080      		add.l %d0,%d0
 721 02e4 2040      		move.l %d0,%a0
 722 02e6 D1FC 0000 		add.l #task_tab,%a0
 722      0000 
 723               	.LVL63:
 724               	.L54:
 124:mtk_c.c       **** 				break;
 725               		.loc 1 124 5 is_stmt 1 view .LVU252
 124:mtk_c.c       **** 				break;
 726               		.loc 1 124 22 is_stmt 0 view .LVU253
 727 02ec 2142 0010 		move.l %d2,16(%a0)
 125:mtk_c.c       **** 			}
 728               		.loc 1 125 5 is_stmt 1 view .LVU254
 729               	.LVL64:
 125:mtk_c.c       **** 			}
 730               		.loc 1 125 5 is_stmt 0 view .LVU255
 731               	.LBE52:
 732               	.LBE53:
 733               	.LBE62:
 169:mtk_c.c       **** 	swtch();						//タスクを切り替える
 734               		.loc 1 169 2 is_stmt 1 view .LVU256
 735               	.LBB63:
 146:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 736               		.loc 1 146 6 view .LVU257
 737               	.LBB61:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 738               		.loc 1 147 2 view .LVU258
 739               	.LBB60:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 740               		.loc 1 135 14 view .LVU259
 741               	.LBB59:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 742               		.loc 1 136 2 view .LVU260
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 743               		.loc 1 136 15 is_stmt 0 view .LVU261
 744 02f0 2239 0000 		move.l ready,%d1
 744      0000 
 745               	.LVL65:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 746               		.loc 1 137 2 is_stmt 1 view .LVU262
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定


 747               		.loc 1 137 4 is_stmt 0 view .LVU263
 748 02f6 668C      		jne .L61
 749               	.L55:
 142:mtk_c.c       **** }
 750               		.loc 1 142 2 is_stmt 1 view .LVU264
 751               	.LVL66:
 142:mtk_c.c       **** }
 752               		.loc 1 142 2 is_stmt 0 view .LVU265
 753               	.LBE59:
 754               	.LBE60:
 148:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 755               		.loc 1 148 2 is_stmt 1 view .LVU266
 756               	.L56:
 149:mtk_c.c       **** 	}		
 757               		.loc 1 149 3 view .LVU267
 149:mtk_c.c       **** 	}		
 758               		.loc 1 149 8 view .LVU268
 149:mtk_c.c       **** 	}		
 759               		.loc 1 149 3 view .LVU269
 149:mtk_c.c       **** 	}		
 760               		.loc 1 149 8 view .LVU270
 761 02f8 60FE      		jra .L56
 762               	.LBE61:
 763               	.LBE63:
 764               		.cfi_endproc
 765               	.LFE11:
 766               		.size	sleep, .-sleep
 767               		.align	2
 768               		.globl	p_body
 769               		.type	p_body, @function
 770               	p_body:
 771               	.LVL67:
 772               	.LFB10:
 160:mtk_c.c       **** 	semaphore[s_id].count --;
 773               		.loc 1 160 31 view -0
 774               		.cfi_startproc
 160:mtk_c.c       **** 	semaphore[s_id].count --;
 775               		.loc 1 160 31 is_stmt 0 view .LVU272
 776 02fa 2F02      		move.l %d2,-(%sp)
 777               		.cfi_def_cfa_offset 8
 778               		.cfi_offset 2, -8
 779 02fc 242F 0008 		move.l 8(%sp),%d2
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 780               		.loc 1 161 2 is_stmt 1 view .LVU273
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 781               		.loc 1 161 17 is_stmt 0 view .LVU274
 782 0300 41F9 0000 		lea semaphore,%a0
 782      0000 
 783 0306 2202      		move.l %d2,%d1
 784 0308 E789      		lsl.l #3,%d1
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 785               		.loc 1 161 24 view .LVU275
 786 030a 2030 1800 		move.l (%a0,%d1.l),%d0
 787 030e 5380      		subq.l #1,%d0
 788 0310 2180 1800 		move.l %d0,(%a0,%d1.l)
 162:mtk_c.c       **** 		sleep(s_id);
 789               		.loc 1 162 2 is_stmt 1 view .LVU276


 162:mtk_c.c       **** 		sleep(s_id);
 790               		.loc 1 162 4 is_stmt 0 view .LVU277
 791 0314 6B04      		jmi .L66
 165:mtk_c.c       **** 
 792               		.loc 1 165 1 view .LVU278
 793 0316 241F      		move.l (%sp)+,%d2
 794 0318 4E75      		rts
 795               	.L66:
 163:mtk_c.c       **** 		}
 796               		.loc 1 163 3 is_stmt 1 view .LVU279
 797 031a 2F42 0008 		move.l %d2,8(%sp)
 165:mtk_c.c       **** 
 798               		.loc 1 165 1 is_stmt 0 view .LVU280
 799 031e 241F      		move.l (%sp)+,%d2
 163:mtk_c.c       **** 		}
 800               		.loc 1 163 3 view .LVU281
 801 0320 6000 FF38 		jra sleep
 802               	.LVL68:
 803               		.cfi_endproc
 804               	.LFE10:
 805               		.size	p_body, .-p_body
 806               		.align	2
 807               		.globl	wakeup
 808               		.type	wakeup, @function
 809               	wakeup:
 810               	.LVL69:
 811               	.LFB13:
 172:mtk_c.c       **** 
 173:mtk_c.c       **** //後藤作成
 174:mtk_c.c       **** //1. セマフォの値を増やす
 175:mtk_c.c       **** //2. セマフォが空けば，wakeup(セマフォの ID) を実行して，そのセマフォを
 176:mtk_c.c       **** //   を一つ，実行可能状態にする．
 177:mtk_c.c       **** 
 178:mtk_c.c       **** void v_body(TASK_ID_TYPE s_id){
 179:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 180:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 181:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 182:mtk_c.c       **** 	}
 183:mtk_c.c       **** }
 184:mtk_c.c       **** 
 185:mtk_c.c       **** void wakeup(int ch){
 812               		.loc 1 185 20 is_stmt 1 view -0
 813               		.cfi_startproc
 814               		.loc 1 185 20 is_stmt 0 view .LVU283
 815 0324 2F0A      		move.l %a2,-(%sp)
 816               		.cfi_def_cfa_offset 8
 817               		.cfi_offset 10, -8
 186:mtk_c.c       **** 	TASK_ID_TYPE wakeup_id;
 818               		.loc 1 186 2 is_stmt 1 view .LVU284
 187:mtk_c.c       **** 	wakeup_id=removeq(&semaphore[ch].task_list); //セマフォから待ちタスクを除去
 819               		.loc 1 187 2 view .LVU285
 820               	.LVL70:
 821               	.LBB64:
 822               	.LBI64:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 823               		.loc 1 135 14 view .LVU286
 824               	.LBB65:


 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 825               		.loc 1 136 2 view .LVU287
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 826               		.loc 1 136 15 is_stmt 0 view .LVU288
 827 0326 202F 0008 		move.l 8(%sp),%d0
 828 032a E788      		lsl.l #3,%d0
 829 032c 0680 0000 		add.l #semaphore+4,%d0
 829      0000 
 830               	.LVL71:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 831               		.loc 1 136 15 view .LVU289
 832 0332 2040      		move.l %d0,%a0
 833 0334 2250      		move.l (%a0),%a1
 834               	.LVL72:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 835               		.loc 1 137 2 is_stmt 1 view .LVU290
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 836               		.loc 1 137 4 is_stmt 0 view .LVU291
 837 0336 B2FC 0000 		cmp.w #0,%a1
 838 033a 6718      		jeq .L68
 839               	.LBB66:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 840               		.loc 1 138 3 is_stmt 1 view .LVU292
 841               	.LVL73:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 842               		.loc 1 139 3 view .LVU293
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 843               		.loc 1 139 25 is_stmt 0 view .LVU294
 844 033c 41F1 9800 		lea (%a1,%a1.l),%a0
 845 0340 D1C8      		add.l %a0,%a0
 846 0342 D1C9      		add.l %a1,%a0
 847 0344 D1C8      		add.l %a0,%a0
 848 0346 D1C8      		add.l %a0,%a0
 849 0348 D1FC 0000 		add.l #task_tab+16,%a0
 849      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 850               		.loc 1 139 12 view .LVU295
 851 034e 2440      		move.l %d0,%a2
 852 0350 2490      		move.l (%a0),(%a2)
 140:mtk_c.c       **** 	}
 853               		.loc 1 140 3 is_stmt 1 view .LVU296
 140:mtk_c.c       **** 	}
 854               		.loc 1 140 20 is_stmt 0 view .LVU297
 855 0352 4290      		clr.l (%a0)
 856               	.LVL74:
 857               	.L68:
 140:mtk_c.c       **** 	}
 858               		.loc 1 140 20 view .LVU298
 859               	.LBE66:
 142:mtk_c.c       **** }
 860               		.loc 1 142 2 is_stmt 1 view .LVU299
 142:mtk_c.c       **** }
 861               		.loc 1 142 2 is_stmt 0 view .LVU300
 862               	.LBE65:
 863               	.LBE64:
 188:mtk_c.c       **** 	addq(&ready,wakeup_id); //実行可能状態行列（ready）へつなぐ
 864               		.loc 1 188 2 is_stmt 1 view .LVU301


 865               	.LBB67:
 866               	.LBI67:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 867               		.loc 1 116 6 view .LVU302
 868               	.LBB68:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 869               		.loc 1 117 2 view .LVU303
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 870               		.loc 1 117 5 is_stmt 0 view .LVU304
 871 0354 2239 0000 		move.l ready,%d1
 871      0000 
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 872               		.loc 1 117 4 view .LVU305
 873 035a 660A      		jne .L69
 118:mtk_c.c       **** 	}
 874               		.loc 1 118 3 is_stmt 1 view .LVU306
 118:mtk_c.c       **** 	}
 875               		.loc 1 118 12 is_stmt 0 view .LVU307
 876 035c 23C9 0000 		move.l %a1,ready
 876      0000 
 877               	.LBE68:
 878               	.LBE67:
 189:mtk_c.c       **** }
 879               		.loc 1 189 1 view .LVU308
 880 0362 245F      		move.l (%sp)+,%a2
 881 0364 4E75      		rts
 882               	.L69:
 883               	.LBB71:
 884               	.LBB70:
 885               	.LBB69:
 121:mtk_c.c       **** 		while(1){
 886               		.loc 1 121 3 is_stmt 1 view .LVU309
 887               	.LVL75:
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 888               		.loc 1 122 3 view .LVU310
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 889               		.loc 1 123 4 view .LVU311
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 890               		.loc 1 123 18 is_stmt 0 view .LVU312
 891 0366 45F9 0000 		lea task_tab,%a2
 891      0000 
 892 036c 2001      		move.l %d1,%d0
 893 036e D081      		add.l %d1,%d0
 894 0370 D080      		add.l %d0,%d0
 895 0372 D081      		add.l %d1,%d0
 896 0374 D080      		add.l %d0,%d0
 897 0376 D080      		add.l %d0,%d0
 898 0378 41F2 0800 		lea (%a2,%d0.l),%a0
 899 037c 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 900               		.loc 1 123 6 view .LVU313
 901 0380 6726      		jeq .L72
 902               	.LVL76:
 903               	.L71:
 128:mtk_c.c       **** 			}
 904               		.loc 1 128 5 is_stmt 1 view .LVU314
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら


 905               		.loc 1 122 8 view .LVU315
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 906               		.loc 1 122 3 view .LVU316
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 907               		.loc 1 123 4 view .LVU317
 908 0382 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 909               		.loc 1 123 18 is_stmt 0 view .LVU318
 910 0384 D080      		add.l %d0,%d0
 911               	.LVL77:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 912               		.loc 1 123 18 view .LVU319
 913 0386 D080      		add.l %d0,%d0
 914 0388 D081      		add.l %d1,%d0
 915 038a D080      		add.l %d0,%d0
 916 038c D080      		add.l %d0,%d0
 917 038e 2032 0810 		move.l 16(%a2,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 918               		.loc 1 123 6 view .LVU320
 919 0392 66EE      		jne .L71
 128:mtk_c.c       **** 			}
 920               		.loc 1 128 14 view .LVU321
 921 0394 2001      		move.l %d1,%d0
 922 0396 D081      		add.l %d1,%d0
 923 0398 D080      		add.l %d0,%d0
 924 039a D081      		add.l %d1,%d0
 925 039c D080      		add.l %d0,%d0
 926 039e D080      		add.l %d0,%d0
 927 03a0 2040      		move.l %d0,%a0
 928 03a2 D1FC 0000 		add.l #task_tab,%a0
 928      0000 
 929               	.LVL78:
 930               	.L72:
 124:mtk_c.c       **** 				break;
 931               		.loc 1 124 5 is_stmt 1 view .LVU322
 124:mtk_c.c       **** 				break;
 932               		.loc 1 124 22 is_stmt 0 view .LVU323
 933 03a8 2149 0010 		move.l %a1,16(%a0)
 125:mtk_c.c       **** 			}
 934               		.loc 1 125 5 is_stmt 1 view .LVU324
 935               	.LBE69:
 936               	.LBE70:
 937               	.LBE71:
 938               		.loc 1 189 1 is_stmt 0 view .LVU325
 939 03ac 245F      		move.l (%sp)+,%a2
 940 03ae 4E75      		rts
 941               		.cfi_endproc
 942               	.LFE13:
 943               		.size	wakeup, .-wakeup
 944               		.align	2
 945               		.globl	v_body
 946               		.type	v_body, @function
 947               	v_body:
 948               	.LVL79:
 949               	.LFB12:
 178:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 950               		.loc 1 178 31 is_stmt 1 view -0


 951               		.cfi_startproc
 178:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 952               		.loc 1 178 31 is_stmt 0 view .LVU327
 953 03b0 2F02      		move.l %d2,-(%sp)
 954               		.cfi_def_cfa_offset 8
 955               		.cfi_offset 2, -8
 956 03b2 242F 0008 		move.l 8(%sp),%d2
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 957               		.loc 1 179 2 is_stmt 1 view .LVU328
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 958               		.loc 1 179 17 is_stmt 0 view .LVU329
 959 03b6 41F9 0000 		lea semaphore,%a0
 959      0000 
 960 03bc 2202      		move.l %d2,%d1
 961 03be E789      		lsl.l #3,%d1
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 962               		.loc 1 179 23 view .LVU330
 963 03c0 2030 1800 		move.l (%a0,%d1.l),%d0
 964 03c4 5280      		addq.l #1,%d0
 965 03c6 2180 1800 		move.l %d0,(%a0,%d1.l)
 180:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 966               		.loc 1 180 2 is_stmt 1 view .LVU331
 180:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 967               		.loc 1 180 4 is_stmt 0 view .LVU332
 968 03ca 6F04      		jle .L84
 183:mtk_c.c       **** 
 969               		.loc 1 183 1 view .LVU333
 970 03cc 241F      		move.l (%sp)+,%d2
 971 03ce 4E75      		rts
 972               	.L84:
 181:mtk_c.c       **** 	}
 973               		.loc 1 181 3 is_stmt 1 view .LVU334
 974 03d0 2F42 0008 		move.l %d2,8(%sp)
 183:mtk_c.c       **** 
 975               		.loc 1 183 1 is_stmt 0 view .LVU335
 976 03d4 241F      		move.l (%sp)+,%d2
 181:mtk_c.c       **** 	}
 977               		.loc 1 181 3 view .LVU336
 978 03d6 6000 FF4C 		jra wakeup
 979               	.LVL80:
 980               		.cfi_endproc
 981               	.LFE12:
 982               		.size	v_body, .-v_body
 983               		.globl	ready
 984               		.section	.bss
 985               		.align	2
 986               		.type	ready, @object
 987               		.size	ready, 4
 988               	ready:
 989 0000 0000 0000 		.zero	4
 990               		.globl	next_task
 991               		.align	2
 992               		.type	next_task, @object
 993               		.size	next_task, 4
 994               	next_task:
 995 0004 0000 0000 		.zero	4
 996               		.globl	new_task


 997               		.align	2
 998               		.type	new_task, @object
 999               		.size	new_task, 4
 1000               	new_task:
 1001 0008 0000 0000 		.zero	4
 1002               		.globl	curr_task
 1003               		.align	2
 1004               		.type	curr_task, @object
 1005               		.size	curr_task, 4
 1006               	curr_task:
 1007 000c 0000 0000 		.zero	4
 1008               		.globl	stacks
 1009               		.type	stacks, @object
 1010               		.size	stacks, 10240
 1011               	stacks:
 1012 0010 0000 0000 		.zero	10240
 1012      0000 0000 
 1012      0000 0000 
 1012      0000 0000 
 1012      0000 0000 
 1013               		.globl	task_tab
 1014               		.align	2
 1015               		.type	task_tab, @object
 1016               		.size	task_tab, 120
 1017               	task_tab:
 1018 2810 0000 0000 		.zero	120
 1018      0000 0000 
 1018      0000 0000 
 1018      0000 0000 
 1018      0000 0000 
 1019               		.globl	semaphore
 1020               		.align	2
 1021               		.type	semaphore, @object
 1022               		.size	semaphore, 24
 1023               	semaphore:
 1024 2888 0000 0000 		.zero	24
 1024      0000 0000 
 1024      0000 0000 
 1024      0000 0000 
 1024      0000 0000 
 1025               		.text
 1026               	.Letext0:
 1027               		.file 2 "mtk_c.h"
 1028               		.file 3 "<built-in>"
 1029               		.section	.debug_info,"",@progbits
 1030               	.Ldebug_info0:
 1031 0000 0000 0789 		.long	0x789
 1032 0004 0005      		.word	0x5
 1033 0006 01        		.byte	0x1
 1034 0007 04        		.byte	0x4
 1035 0008 0000 0000 		.long	.Ldebug_abbrev0
 1036 000c 21        		.uleb128 0x21
 1037 000d 0000 0000 		.long	.LASF53
 1038 0011 1D        		.byte	0x1d
 1039 0012 0000 0000 		.long	.LASF54
 1040 0016 0000 0000 		.long	.LASF55
 1041 001a 0000 0000 		.long	.Ltext0


 1042 001e 0000 03DA 		.long	.Letext0-.Ltext0
 1043 0022 0000 0000 		.long	.Ldebug_line0
 1044 0026 02        		.uleb128 0x2
 1045 0027 01        		.byte	0x1
 1046 0028 06        		.byte	0x6
 1047 0029 0000 0000 		.long	.LASF0
 1048 002d 02        		.uleb128 0x2
 1049 002e 01        		.byte	0x1
 1050 002f 08        		.byte	0x8
 1051 0030 0000 0000 		.long	.LASF1
 1052 0034 02        		.uleb128 0x2
 1053 0035 02        		.byte	0x2
 1054 0036 05        		.byte	0x5
 1055 0037 0000 0000 		.long	.LASF2
 1056 003b 02        		.uleb128 0x2
 1057 003c 02        		.byte	0x2
 1058 003d 07        		.byte	0x7
 1059 003e 0000 0000 		.long	.LASF3
 1060 0042 02        		.uleb128 0x2
 1061 0043 04        		.byte	0x4
 1062 0044 05        		.byte	0x5
 1063 0045 0000 0000 		.long	.LASF4
 1064 0049 02        		.uleb128 0x2
 1065 004a 04        		.byte	0x4
 1066 004b 07        		.byte	0x7
 1067 004c 0000 0000 		.long	.LASF5
 1068 0050 02        		.uleb128 0x2
 1069 0051 08        		.byte	0x8
 1070 0052 05        		.byte	0x5
 1071 0053 0000 0000 		.long	.LASF6
 1072 0057 02        		.uleb128 0x2
 1073 0058 08        		.byte	0x8
 1074 0059 07        		.byte	0x7
 1075 005a 0000 0000 		.long	.LASF7
 1076 005e 02        		.uleb128 0x2
 1077 005f 0C        		.byte	0xc
 1078 0060 04        		.byte	0x4
 1079 0061 0000 0000 		.long	.LASF8
 1080 0065 02        		.uleb128 0x2
 1081 0066 04        		.byte	0x4
 1082 0067 07        		.byte	0x7
 1083 0068 0000 0000 		.long	.LASF9
 1084 006c 22        		.uleb128 0x22
 1085 006d 04        		.byte	0x4
 1086 006e 05        		.byte	0x5
 1087 006f 696E 7400 		.string	"int"
 1088 0073 23        		.uleb128 0x23
 1089 0074 04        		.byte	0x4
 1090 0075 02        		.uleb128 0x2
 1091 0076 01        		.byte	0x1
 1092 0077 06        		.byte	0x6
 1093 0078 0000 0000 		.long	.LASF10
 1094 007c 0D        		.uleb128 0xd
 1095 007d 0000 0000 		.long	.LASF13
 1096 0081 14        		.byte	0x14
 1097 0082 0D        		.byte	0xd
 1098 0083 0000 006C 		.long	0x6c


 1099 0087 17        		.uleb128 0x17
 1100 0088 08        		.byte	0x8
 1101 0089 16        		.byte	0x16
 1102 008a 0000 00A7 		.long	0xa7
 1103 008e 05        		.uleb128 0x5
 1104 008f 0000 0000 		.long	.LASF11
 1105 0093 17        		.byte	0x17
 1106 0094 0F        		.byte	0xf
 1107 0095 0000 006C 		.long	0x6c
 1108 0099 00        		.byte	0
 1109 009a 05        		.uleb128 0x5
 1110 009b 0000 0000 		.long	.LASF12
 1111 009f 18        		.byte	0x18
 1112 00a0 0F        		.byte	0xf
 1113 00a1 0000 007C 		.long	0x7c
 1114 00a5 04        		.byte	0x4
 1115 00a6 00        		.byte	0
 1116 00a7 0D        		.uleb128 0xd
 1117 00a8 0000 0000 		.long	.LASF14
 1118 00ac 19        		.byte	0x19
 1119 00ad 03        		.byte	0x3
 1120 00ae 0000 0087 		.long	0x87
 1121 00b2 17        		.uleb128 0x17
 1122 00b3 14        		.byte	0x14
 1123 00b4 1B        		.byte	0x1b
 1124 00b5 0000 00F6 		.long	0xf6
 1125 00b9 05        		.uleb128 0x5
 1126 00ba 0000 0000 		.long	.LASF15
 1127 00be 1C        		.byte	0x1c
 1128 00bf 0E        		.byte	0xe
 1129 00c0 0000 00FD 		.long	0xfd
 1130 00c4 00        		.byte	0
 1131 00c5 05        		.uleb128 0x5
 1132 00c6 0000 0000 		.long	.LASF16
 1133 00ca 1D        		.byte	0x1d
 1134 00cb 0D        		.byte	0xd
 1135 00cc 0000 0073 		.long	0x73
 1136 00d0 04        		.byte	0x4
 1137 00d1 05        		.uleb128 0x5
 1138 00d2 0000 0000 		.long	.LASF17
 1139 00d6 1E        		.byte	0x1e
 1140 00d7 0F        		.byte	0xf
 1141 00d8 0000 006C 		.long	0x6c
 1142 00dc 08        		.byte	0x8
 1143 00dd 05        		.uleb128 0x5
 1144 00de 0000 0000 		.long	.LASF18
 1145 00e2 1F        		.byte	0x1f
 1146 00e3 0F        		.byte	0xf
 1147 00e4 0000 006C 		.long	0x6c
 1148 00e8 0C        		.byte	0xc
 1149 00e9 05        		.uleb128 0x5
 1150 00ea 0000 0000 		.long	.LASF19
 1151 00ee 20        		.byte	0x20
 1152 00ef 0F        		.byte	0xf
 1153 00f0 0000 007C 		.long	0x7c
 1154 00f4 10        		.byte	0x10
 1155 00f5 00        		.byte	0


 1156 00f6 24        		.uleb128 0x24
 1157 00f7 0000 00FD 		.long	0xfd
 1158 00fb 09        		.uleb128 0x9
 1159 00fc 00        		.byte	0
 1160 00fd 0A        		.uleb128 0xa
 1161 00fe 0000 00F6 		.long	0xf6
 1162 0102 0D        		.uleb128 0xd
 1163 0103 0000 0000 		.long	.LASF20
 1164 0107 21        		.byte	0x21
 1165 0108 03        		.byte	0x3
 1166 0109 0000 00B2 		.long	0xb2
 1167 010d 25        		.uleb128 0x25
 1168 010e 0800      		.word	0x800
 1169 0110 02        		.byte	0x2
 1170 0111 23        		.byte	0x23
 1171 0112 09        		.byte	0x9
 1172 0113 0000 0132 		.long	0x132
 1173 0117 05        		.uleb128 0x5
 1174 0118 0000 0000 		.long	.LASF21
 1175 011c 24        		.byte	0x24
 1176 011d 0F        		.byte	0xf
 1177 011e 0000 0132 		.long	0x132
 1178 0122 00        		.byte	0
 1179 0123 26        		.uleb128 0x26
 1180 0124 0000 0000 		.long	.LASF22
 1181 0128 02        		.byte	0x2
 1182 0129 25        		.byte	0x25
 1183 012a 0F        		.byte	0xf
 1184 012b 0000 0132 		.long	0x132
 1185 012f 0400      		.word	0x400
 1186 0131 00        		.byte	0
 1187 0132 0E        		.uleb128 0xe
 1188 0133 0000 0075 		.long	0x75
 1189 0137 0000 0143 		.long	0x143
 1190 013b 27        		.uleb128 0x27
 1191 013c 0000 0049 		.long	0x49
 1192 0140 03FF      		.word	0x3ff
 1193 0142 00        		.byte	0
 1194 0143 0D        		.uleb128 0xd
 1195 0144 0000 0000 		.long	.LASF23
 1196 0148 26        		.byte	0x26
 1197 0149 03        		.byte	0x3
 1198 014a 0000 010D 		.long	0x10d
 1199 014e 0E        		.uleb128 0xe
 1200 014f 0000 00A7 		.long	0xa7
 1201 0153 0000 015E 		.long	0x15e
 1202 0157 12        		.uleb128 0x12
 1203 0158 0000 0049 		.long	0x49
 1204 015c 02        		.byte	0x2
 1205 015d 00        		.byte	0
 1206 015e 06        		.uleb128 0x6
 1207 015f 0000 0000 		.long	.LASF24
 1208 0163 2B        		.byte	0x2b
 1209 0164 18        		.byte	0x18
 1210 0165 0000 014E 		.long	0x14e
 1211 0169 0E        		.uleb128 0xe
 1212 016a 0000 0102 		.long	0x102


 1213 016e 0000 0179 		.long	0x179
 1214 0172 12        		.uleb128 0x12
 1215 0173 0000 0049 		.long	0x49
 1216 0177 05        		.byte	0x5
 1217 0178 00        		.byte	0
 1218 0179 06        		.uleb128 0x6
 1219 017a 0000 0000 		.long	.LASF25
 1220 017e 2C        		.byte	0x2c
 1221 017f 16        		.byte	0x16
 1222 0180 0000 0169 		.long	0x169
 1223 0184 0E        		.uleb128 0xe
 1224 0185 0000 0143 		.long	0x143
 1225 0189 0000 0194 		.long	0x194
 1226 018d 12        		.uleb128 0x12
 1227 018e 0000 0049 		.long	0x49
 1228 0192 04        		.byte	0x4
 1229 0193 00        		.byte	0
 1230 0194 06        		.uleb128 0x6
 1231 0195 0000 0000 		.long	.LASF26
 1232 0199 2D        		.byte	0x2d
 1233 019a 17        		.byte	0x17
 1234 019b 0000 0184 		.long	0x184
 1235 019f 06        		.uleb128 0x6
 1236 01a0 0000 0000 		.long	.LASF27
 1237 01a4 2F        		.byte	0x2f
 1238 01a5 15        		.byte	0x15
 1239 01a6 0000 007C 		.long	0x7c
 1240 01aa 06        		.uleb128 0x6
 1241 01ab 0000 0000 		.long	.LASF28
 1242 01af 30        		.byte	0x30
 1243 01b0 15        		.byte	0x15
 1244 01b1 0000 007C 		.long	0x7c
 1245 01b5 06        		.uleb128 0x6
 1246 01b6 0000 0000 		.long	.LASF29
 1247 01ba 31        		.byte	0x31
 1248 01bb 15        		.byte	0x15
 1249 01bc 0000 007C 		.long	0x7c
 1250 01c0 06        		.uleb128 0x6
 1251 01c1 0000 0000 		.long	.LASF30
 1252 01c5 32        		.byte	0x32
 1253 01c6 15        		.byte	0x15
 1254 01c7 0000 007C 		.long	0x7c
 1255 01cb 07        		.uleb128 0x7
 1256 01cc 0000 015E 		.long	0x15e
 1257 01d0 04        		.byte	0x4
 1258 01d1 11        		.byte	0x11
 1259 01d2 05        		.uleb128 0x5
 1260 01d3 03        		.byte	0x3
 1261 01d4 0000 0000 		.long	semaphore
 1262 01d8 07        		.uleb128 0x7
 1263 01d9 0000 0179 		.long	0x179
 1264 01dd 05        		.byte	0x5
 1265 01de 0F        		.byte	0xf
 1266 01df 05        		.uleb128 0x5
 1267 01e0 03        		.byte	0x3
 1268 01e1 0000 0000 		.long	task_tab
 1269 01e5 07        		.uleb128 0x7


 1270 01e6 0000 0194 		.long	0x194
 1271 01ea 06        		.byte	0x6
 1272 01eb 10        		.byte	0x10
 1273 01ec 05        		.uleb128 0x5
 1274 01ed 03        		.byte	0x3
 1275 01ee 0000 0000 		.long	stacks
 1276 01f2 07        		.uleb128 0x7
 1277 01f3 0000 019F 		.long	0x19f
 1278 01f7 08        		.byte	0x8
 1279 01f8 0E        		.byte	0xe
 1280 01f9 05        		.uleb128 0x5
 1281 01fa 03        		.byte	0x3
 1282 01fb 0000 0000 		.long	curr_task
 1283 01ff 07        		.uleb128 0x7
 1284 0200 0000 01AA 		.long	0x1aa
 1285 0204 09        		.byte	0x9
 1286 0205 0E        		.byte	0xe
 1287 0206 05        		.uleb128 0x5
 1288 0207 03        		.byte	0x3
 1289 0208 0000 0000 		.long	new_task
 1290 020c 07        		.uleb128 0x7
 1291 020d 0000 01B5 		.long	0x1b5
 1292 0211 0A        		.byte	0xa
 1293 0212 0E        		.byte	0xe
 1294 0213 05        		.uleb128 0x5
 1295 0214 03        		.byte	0x3
 1296 0215 0000 0000 		.long	next_task
 1297 0219 07        		.uleb128 0x7
 1298 021a 0000 01C0 		.long	0x1c0
 1299 021e 0B        		.byte	0xb
 1300 021f 0E        		.byte	0xe
 1301 0220 05        		.uleb128 0x5
 1302 0221 03        		.byte	0x3
 1303 0222 0000 0000 		.long	ready
 1304 0226 0F        		.uleb128 0xf
 1305 0227 0000 0000 		.long	.LASF31
 1306 022b 45        		.byte	0x45
 1307 022c 0000 006C 		.long	0x6c
 1308 0230 0000 0236 		.long	0x236
 1309 0234 09        		.uleb128 0x9
 1310 0235 00        		.byte	0
 1311 0236 0F        		.uleb128 0xf
 1312 0237 0000 0000 		.long	.LASF32
 1313 023b 44        		.byte	0x44
 1314 023c 0000 006C 		.long	0x6c
 1315 0240 0000 0246 		.long	0x246
 1316 0244 09        		.uleb128 0x9
 1317 0245 00        		.byte	0
 1318 0246 0F        		.uleb128 0xf
 1319 0247 0000 0000 		.long	.LASF33
 1320 024b 4C        		.byte	0x4c
 1321 024c 0000 006C 		.long	0x6c
 1322 0250 0000 0256 		.long	0x256
 1323 0254 09        		.uleb128 0x9
 1324 0255 00        		.byte	0
 1325 0256 0F        		.uleb128 0xf
 1326 0257 0000 0000 		.long	.LASF34


 1327 025b 5B        		.byte	0x5b
 1328 025c 0000 006C 		.long	0x6c
 1329 0260 0000 0266 		.long	0x266
 1330 0264 09        		.uleb128 0x9
 1331 0265 00        		.byte	0
 1332 0266 0B        		.uleb128 0xb
 1333 0267 0000 0000 		.long	.LASF36
 1334 026b B9        		.byte	0xb9
 1335 026c 0000 0000 		.long	.LFB13
 1336 0270 0000 008C 		.long	.LFE13-.LFB13
 1337 0274 01        		.uleb128 0x1
 1338 0275 9C        		.byte	0x9c
 1339 0276 0000 032F 		.long	0x32f
 1340 027a 18        		.uleb128 0x18
 1341 027b 6368 00   		.string	"ch"
 1342 027e B9        		.byte	0xb9
 1343 027f 11        		.byte	0x11
 1344 0280 0000 006C 		.long	0x6c
 1345 0284 02        		.uleb128 0x2
 1346 0285 91        		.byte	0x91
 1347 0286 00        		.sleb128 0
 1348 0287 28        		.uleb128 0x28
 1349 0288 0000 0000 		.long	.LASF35
 1350 028c 01        		.byte	0x1
 1351 028d BA        		.byte	0xba
 1352 028e 0F        		.byte	0xf
 1353 028f 0000 007C 		.long	0x7c
 1354 0293 0000 0000 		.long	.LLST29
 1355 0297 0000 0000 		.long	.LVUS29
 1356 029b 13        		.uleb128 0x13
 1357 029c 0000 0464 		.long	0x464
 1358 02a0 0000 0000 		.long	.LBI64
 1359 02a4 02        		.byte	.LVU286
 1360 02a5 0000 0000 		.long	.LBB64
 1361 02a9 0000 002E 		.long	.LBE64-.LBB64
 1362 02ad BB        		.byte	0xbb
 1363 02ae 0C        		.byte	0xc
 1364 02af 0000 02E9 		.long	0x2e9
 1365 02b3 03        		.uleb128 0x3
 1366 02b4 0000 0473 		.long	0x473
 1367 02b8 0000 0000 		.long	.LLST30
 1368 02bc 0000 0000 		.long	.LVUS30
 1369 02c0 01        		.uleb128 0x1
 1370 02c1 0000 047E 		.long	0x47e
 1371 02c5 0000 0000 		.long	.LLST31
 1372 02c9 0000 0000 		.long	.LVUS31
 1373 02cd 04        		.uleb128 0x4
 1374 02ce 0000 0489 		.long	0x489
 1375 02d2 0000 0000 		.long	.LBB66
 1376 02d6 0000 0018 		.long	.LBE66-.LBB66
 1377 02da 01        		.uleb128 0x1
 1378 02db 0000 048A 		.long	0x48a
 1379 02df 0000 0000 		.long	.LLST32
 1380 02e3 0000 0000 		.long	.LVUS32
 1381 02e7 00        		.byte	0
 1382 02e8 00        		.byte	0
 1383 02e9 10        		.uleb128 0x10


 1384 02ea 0000 04A1 		.long	0x4a1
 1385 02ee 0000 0000 		.long	.LBI67
 1386 02f2 04        		.byte	.LVU302
 1387 02f3 0000 0000 		.long	.LLRL33
 1388 02f7 BC        		.byte	0xbc
 1389 02f8 02        		.byte	0x2
 1390 02f9 03        		.uleb128 0x3
 1391 02fa 0000 04B9 		.long	0x4b9
 1392 02fe 0000 0000 		.long	.LLST34
 1393 0302 0000 0000 		.long	.LVUS34
 1394 0306 08        		.uleb128 0x8
 1395 0307 0000 04AE 		.long	0x4ae
 1396 030b 06        		.uleb128 0x6
 1397 030c 03        		.byte	0x3
 1398 030d 0000 0000 		.long	ready
 1399 0311 9F        		.byte	0x9f
 1400 0312 04        		.uleb128 0x4
 1401 0313 0000 04C3 		.long	0x4c3
 1402 0317 0000 0000 		.long	.LBB69
 1403 031b 0000 0046 		.long	.LBE69-.LBB69
 1404 031f 01        		.uleb128 0x1
 1405 0320 0000 04C4 		.long	0x4c4
 1406 0324 0000 0000 		.long	.LLST35
 1407 0328 0000 0000 		.long	.LVUS35
 1408 032c 00        		.byte	0
 1409 032d 00        		.byte	0
 1410 032e 00        		.byte	0
 1411 032f 0B        		.uleb128 0xb
 1412 0330 0000 0000 		.long	.LASF37
 1413 0334 B2        		.byte	0xb2
 1414 0335 0000 0000 		.long	.LFB12
 1415 0339 0000 002A 		.long	.LFE12-.LFB12
 1416 033d 01        		.uleb128 0x1
 1417 033e 9C        		.byte	0x9c
 1418 033f 0000 035B 		.long	0x35b
 1419 0343 14        		.uleb128 0x14
 1420 0344 0000 0000 		.long	.LASF38
 1421 0348 B2        		.byte	0xb2
 1422 0349 1A        		.byte	0x1a
 1423 034a 0000 007C 		.long	0x7c
 1424 034e 02        		.uleb128 0x2
 1425 034f 91        		.byte	0x91
 1426 0350 00        		.sleb128 0
 1427 0351 15        		.uleb128 0x15
 1428 0352 0000 0000 		.long	.LVL80
 1429 0356 0000 0266 		.long	0x266
 1430 035a 00        		.byte	0
 1431 035b 0B        		.uleb128 0xb
 1432 035c 0000 0000 		.long	.LASF39
 1433 0360 A7        		.byte	0xa7
 1434 0361 0000 0000 		.long	.LFB11
 1435 0365 0000 00A0 		.long	.LFE11-.LFB11
 1436 0369 01        		.uleb128 0x1
 1437 036a 9C        		.byte	0x9c
 1438 036b 0000 042F 		.long	0x42f
 1439 036f 18        		.uleb128 0x18
 1440 0370 6368 00   		.string	"ch"


 1441 0373 A7        		.byte	0xa7
 1442 0374 10        		.byte	0x10
 1443 0375 0000 006C 		.long	0x6c
 1444 0379 02        		.uleb128 0x2
 1445 037a 91        		.byte	0x91
 1446 037b 00        		.sleb128 0
 1447 037c 19        		.uleb128 0x19
 1448 037d 0000 04A1 		.long	0x4a1
 1449 0381 0000 0000 		.long	.LBI50
 1450 0385 00        		.byte	.LVU208
 1451 0386 0000 0000 		.long	.LLRL20
 1452 038a A8        		.byte	0xa8
 1453 038b 0000 03C5 		.long	0x3c5
 1454 038f 03        		.uleb128 0x3
 1455 0390 0000 04B9 		.long	0x4b9
 1456 0394 0000 0000 		.long	.LLST21
 1457 0398 0000 0000 		.long	.LVUS21
 1458 039c 03        		.uleb128 0x3
 1459 039d 0000 04AE 		.long	0x4ae
 1460 03a1 0000 0000 		.long	.LLST22
 1461 03a5 0000 0000 		.long	.LVUS22
 1462 03a9 04        		.uleb128 0x4
 1463 03aa 0000 04C3 		.long	0x4c3
 1464 03ae 0000 0000 		.long	.LBB52
 1465 03b2 0000 0046 		.long	.LBE52-.LBB52
 1466 03b6 01        		.uleb128 0x1
 1467 03b7 0000 04C4 		.long	0x4c4
 1468 03bb 0000 0000 		.long	.LLST23
 1469 03bf 0000 0000 		.long	.LVUS23
 1470 03c3 00        		.byte	0
 1471 03c4 00        		.byte	0
 1472 03c5 19        		.uleb128 0x19
 1473 03c6 0000 045B 		.long	0x45b
 1474 03ca 0000 0000 		.long	.LBI54
 1475 03ce 02        		.byte	.LVU217
 1476 03cf 0000 0000 		.long	.LLRL24
 1477 03d3 A9        		.byte	0xa9
 1478 03d4 0000 0425 		.long	0x425
 1479 03d8 10        		.uleb128 0x10
 1480 03d9 0000 0464 		.long	0x464
 1481 03dd 0000 0000 		.long	.LBI56
 1482 03e1 04        		.byte	.LVU219
 1483 03e2 0000 0000 		.long	.LLRL25
 1484 03e6 93        		.byte	0x93
 1485 03e7 0E        		.byte	0xe
 1486 03e8 03        		.uleb128 0x3
 1487 03e9 0000 0473 		.long	0x473
 1488 03ed 0000 0000 		.long	.LLST26
 1489 03f1 0000 0000 		.long	.LVUS26
 1490 03f5 1A        		.uleb128 0x1a
 1491 03f6 0000 0000 		.long	.LLRL25
 1492 03fa 01        		.uleb128 0x1
 1493 03fb 0000 047E 		.long	0x47e
 1494 03ff 0000 0000 		.long	.LLST27
 1495 0403 0000 0000 		.long	.LVUS27
 1496 0407 04        		.uleb128 0x4
 1497 0408 0000 0489 		.long	0x489


 1498 040c 0000 0000 		.long	.LBB58
 1499 0410 0000 0018 		.long	.LBE58-.LBB58
 1500 0414 01        		.uleb128 0x1
 1501 0415 0000 048A 		.long	0x48a
 1502 0419 0000 0000 		.long	.LLST28
 1503 041d 0000 0000 		.long	.LVUS28
 1504 0421 00        		.byte	0
 1505 0422 00        		.byte	0
 1506 0423 00        		.byte	0
 1507 0424 00        		.byte	0
 1508 0425 15        		.uleb128 0x15
 1509 0426 0000 0000 		.long	.LVL58
 1510 042a 0000 0226 		.long	0x226
 1511 042e 00        		.byte	0
 1512 042f 0B        		.uleb128 0xb
 1513 0430 0000 0000 		.long	.LASF40
 1514 0434 A0        		.byte	0xa0
 1515 0435 0000 0000 		.long	.LFB10
 1516 0439 0000 002A 		.long	.LFE10-.LFB10
 1517 043d 01        		.uleb128 0x1
 1518 043e 9C        		.byte	0x9c
 1519 043f 0000 045B 		.long	0x45b
 1520 0443 14        		.uleb128 0x14
 1521 0444 0000 0000 		.long	.LASF38
 1522 0448 A0        		.byte	0xa0
 1523 0449 1A        		.byte	0x1a
 1524 044a 0000 007C 		.long	0x7c
 1525 044e 02        		.uleb128 0x2
 1526 044f 91        		.byte	0x91
 1527 0450 00        		.sleb128 0
 1528 0451 15        		.uleb128 0x15
 1529 0452 0000 0000 		.long	.LVL68
 1530 0456 0000 035B 		.long	0x35b
 1531 045a 00        		.byte	0
 1532 045b 29        		.uleb128 0x29
 1533 045c 0000 0000 		.long	.LASF56
 1534 0460 01        		.byte	0x1
 1535 0461 92        		.byte	0x92
 1536 0462 06        		.byte	0x6
 1537 0463 01        		.byte	0x1
 1538 0464 1B        		.uleb128 0x1b
 1539 0465 0000 0000 		.long	.LASF45
 1540 0469 87        		.byte	0x87
 1541 046a 0E        		.byte	0xe
 1542 046b 0000 007C 		.long	0x7c
 1543 046f 0000 0497 		.long	0x497
 1544 0473 1C        		.uleb128 0x1c
 1545 0474 0000 0000 		.long	.LASF44
 1546 0478 87        		.byte	0x87
 1547 0479 24        		.byte	0x24
 1548 047a 0000 0497 		.long	0x497
 1549 047e 0C        		.uleb128 0xc
 1550 047f 0000 0000 		.long	.LASF41
 1551 0483 88        		.byte	0x88
 1552 0484 0F        		.byte	0xf
 1553 0485 0000 007C 		.long	0x7c
 1554 0489 1D        		.uleb128 0x1d


 1555 048a 0C        		.uleb128 0xc
 1556 048b 0000 0000 		.long	.LASF42
 1557 048f 8A        		.byte	0x8a
 1558 0490 0D        		.byte	0xd
 1559 0491 0000 049C 		.long	0x49c
 1560 0495 00        		.byte	0
 1561 0496 00        		.byte	0
 1562 0497 0A        		.uleb128 0xa
 1563 0498 0000 007C 		.long	0x7c
 1564 049c 0A        		.uleb128 0xa
 1565 049d 0000 0102 		.long	0x102
 1566 04a1 2A        		.uleb128 0x2a
 1567 04a2 0000 0000 		.long	.LASF43
 1568 04a6 01        		.byte	0x1
 1569 04a7 74        		.byte	0x74
 1570 04a8 06        		.byte	0x6
 1571 04a9 01        		.byte	0x1
 1572 04aa 0000 04D1 		.long	0x4d1
 1573 04ae 1C        		.uleb128 0x1c
 1574 04af 0000 0000 		.long	.LASF44
 1575 04b3 74        		.byte	0x74
 1576 04b4 19        		.byte	0x19
 1577 04b5 0000 0497 		.long	0x497
 1578 04b9 1E        		.uleb128 0x1e
 1579 04ba 6964 00   		.string	"id"
 1580 04bd 74        		.byte	0x74
 1581 04be 2F        		.byte	0x2f
 1582 04bf 0000 007C 		.long	0x7c
 1583 04c3 1D        		.uleb128 0x1d
 1584 04c4 0C        		.uleb128 0xc
 1585 04c5 0000 0000 		.long	.LASF42
 1586 04c9 79        		.byte	0x79
 1587 04ca 0D        		.byte	0xd
 1588 04cb 0000 049C 		.long	0x49c
 1589 04cf 00        		.byte	0
 1590 04d0 00        		.byte	0
 1591 04d1 1F        		.uleb128 0x1f
 1592 04d2 0000 0000 		.long	.LASF51
 1593 04d6 6C        		.byte	0x6c
 1594 04d7 0000 0000 		.long	.LFB6
 1595 04db 0000 0044 		.long	.LFE6-.LFB6
 1596 04df 01        		.uleb128 0x1
 1597 04e0 9C        		.byte	0x9c
 1598 04e1 0000 054F 		.long	0x54f
 1599 04e5 13        		.uleb128 0x13
 1600 04e6 0000 0464 		.long	0x464
 1601 04ea 0000 0000 		.long	.LBI29
 1602 04ee 02        		.byte	.LVU122
 1603 04ef 0000 0000 		.long	.LBB29
 1604 04f3 0000 0022 		.long	.LBE29-.LBB29
 1605 04f7 6D        		.byte	0x6d
 1606 04f8 0F        		.byte	0xf
 1607 04f9 0000 0533 		.long	0x533
 1608 04fd 03        		.uleb128 0x3
 1609 04fe 0000 0473 		.long	0x473
 1610 0502 0000 0000 		.long	.LLST10
 1611 0506 0000 0000 		.long	.LVUS10


 1612 050a 01        		.uleb128 0x1
 1613 050b 0000 047E 		.long	0x47e
 1614 050f 0000 0000 		.long	.LLST11
 1615 0513 0000 0000 		.long	.LVUS11
 1616 0517 04        		.uleb128 0x4
 1617 0518 0000 0489 		.long	0x489
 1618 051c 0000 0000 		.long	.LBB31
 1619 0520 0000 001A 		.long	.LBE31-.LBB31
 1620 0524 01        		.uleb128 0x1
 1621 0525 0000 048A 		.long	0x48a
 1622 0529 0000 0000 		.long	.LLST12
 1623 052d 0000 0000 		.long	.LVUS12
 1624 0531 00        		.byte	0
 1625 0532 00        		.byte	0
 1626 0533 16        		.uleb128 0x16
 1627 0534 0000 0000 		.long	.LVL34
 1628 0538 0000 0246 		.long	0x246
 1629 053c 16        		.uleb128 0x16
 1630 053d 0000 0000 		.long	.LVL35
 1631 0541 0000 0236 		.long	0x236
 1632 0545 16        		.uleb128 0x16
 1633 0546 0000 0000 		.long	.LVL36
 1634 054a 0000 0781 		.long	0x781
 1635 054e 00        		.byte	0
 1636 054f 1B        		.uleb128 0x1b
 1637 0550 0000 0000 		.long	.LASF46
 1638 0554 56        		.byte	0x56
 1639 0555 07        		.byte	0x7
 1640 0556 0000 0073 		.long	0x73
 1641 055a 0000 057F 		.long	0x57f
 1642 055e 1E        		.uleb128 0x1e
 1643 055f 6964 00   		.string	"id"
 1644 0562 56        		.byte	0x56
 1645 0563 1F        		.byte	0x1f
 1646 0564 0000 007C 		.long	0x7c
 1647 0568 0C        		.uleb128 0xc
 1648 0569 0000 0000 		.long	.LASF47
 1649 056d 57        		.byte	0x57
 1650 056e 0A        		.byte	0xa
 1651 056f 0000 057F 		.long	0x57f
 1652 0573 0C        		.uleb128 0xc
 1653 0574 0000 0000 		.long	.LASF48
 1654 0578 59        		.byte	0x59
 1655 0579 19        		.byte	0x19
 1656 057a 0000 0584 		.long	0x584
 1657 057e 00        		.byte	0
 1658 057f 0A        		.uleb128 0xa
 1659 0580 0000 006C 		.long	0x6c
 1660 0584 0A        		.uleb128 0xa
 1661 0585 0000 003B 		.long	0x3b
 1662 0589 0B        		.uleb128 0xb
 1663 058a 0000 0000 		.long	.LASF49
 1664 058e 39        		.byte	0x39
 1665 058f 0000 0000 		.long	.LFB4
 1666 0593 0000 00D4 		.long	.LFE4-.LFB4
 1667 0597 01        		.uleb128 0x1
 1668 0598 9C        		.byte	0x9c


 1669 0599 0000 0642 		.long	0x642
 1670 059d 14        		.uleb128 0x14
 1671 059e 0000 0000 		.long	.LASF50
 1672 05a2 39        		.byte	0x39
 1673 05a3 16        		.byte	0x16
 1674 05a4 0000 00FD 		.long	0xfd
 1675 05a8 02        		.uleb128 0x2
 1676 05a9 91        		.byte	0x91
 1677 05aa 00        		.sleb128 0
 1678 05ab 20        		.uleb128 0x20
 1679 05ac 6900      		.string	"i"
 1680 05ae 3A        		.byte	0x3a
 1681 05af 12        		.byte	0x12
 1682 05b0 0000 007C 		.long	0x7c
 1683 05b4 0000 0000 		.long	.LLST1
 1684 05b8 0000 0000 		.long	.LVUS1
 1685 05bc 13        		.uleb128 0x13
 1686 05bd 0000 054F 		.long	0x54f
 1687 05c1 0000 0000 		.long	.LBI22
 1688 05c5 01        		.byte	.LVU59
 1689 05c6 0000 0000 		.long	.LBB22
 1690 05ca 0000 002A 		.long	.LBE22-.LBB22
 1691 05ce 41        		.byte	0x41
 1692 05cf 25        		.byte	0x25
 1693 05d0 0000 05FC 		.long	0x5fc
 1694 05d4 03        		.uleb128 0x3
 1695 05d5 0000 055E 		.long	0x55e
 1696 05d9 0000 0000 		.long	.LLST2
 1697 05dd 0000 0000 		.long	.LVUS2
 1698 05e1 01        		.uleb128 0x1
 1699 05e2 0000 0568 		.long	0x568
 1700 05e6 0000 0000 		.long	.LLST3
 1701 05ea 0000 0000 		.long	.LVUS3
 1702 05ee 01        		.uleb128 0x1
 1703 05ef 0000 0573 		.long	0x573
 1704 05f3 0000 0000 		.long	.LLST4
 1705 05f7 0000 0000 		.long	.LVUS4
 1706 05fb 00        		.byte	0
 1707 05fc 10        		.uleb128 0x10
 1708 05fd 0000 04A1 		.long	0x4a1
 1709 0601 0000 0000 		.long	.LBI24
 1710 0605 01        		.byte	.LVU75
 1711 0606 0000 0000 		.long	.LLRL5
 1712 060a 42        		.byte	0x42
 1713 060b 0D        		.byte	0xd
 1714 060c 03        		.uleb128 0x3
 1715 060d 0000 04B9 		.long	0x4b9
 1716 0611 0000 0000 		.long	.LLST6
 1717 0615 0000 0000 		.long	.LVUS6
 1718 0619 08        		.uleb128 0x8
 1719 061a 0000 04AE 		.long	0x4ae
 1720 061e 06        		.uleb128 0x6
 1721 061f 03        		.byte	0x3
 1722 0620 0000 0000 		.long	ready
 1723 0624 9F        		.byte	0x9f
 1724 0625 04        		.uleb128 0x4
 1725 0626 0000 04C3 		.long	0x4c3


 1726 062a 0000 0000 		.long	.LBB26
 1727 062e 0000 0040 		.long	.LBE26-.LBB26
 1728 0632 01        		.uleb128 0x1
 1729 0633 0000 04C4 		.long	0x4c4
 1730 0637 0000 0000 		.long	.LLST7
 1731 063b 0000 0000 		.long	.LVUS7
 1732 063f 00        		.byte	0
 1733 0640 00        		.byte	0
 1734 0641 00        		.byte	0
 1735 0642 1F        		.uleb128 0x1f
 1736 0643 0000 0000 		.long	.LASF52
 1737 0647 15        		.byte	0x15
 1738 0648 0000 0000 		.long	.LFB3
 1739 064c 0000 005C 		.long	.LFE3-.LFB3
 1740 0650 01        		.uleb128 0x1
 1741 0651 9C        		.byte	0x9c
 1742 0652 0000 0668 		.long	0x668
 1743 0656 20        		.uleb128 0x20
 1744 0657 6900      		.string	"i"
 1745 0659 16        		.byte	0x16
 1746 065a 06        		.byte	0x6
 1747 065b 0000 006C 		.long	0x6c
 1748 065f 0000 0000 		.long	.LLST0
 1749 0663 0000 0000 		.long	.LVUS0
 1750 0667 00        		.byte	0
 1751 0668 11        		.uleb128 0x11
 1752 0669 0000 054F 		.long	0x54f
 1753 066d 0000 0000 		.long	.LFB5
 1754 0671 0000 0042 		.long	.LFE5-.LFB5
 1755 0675 01        		.uleb128 0x1
 1756 0676 9C        		.byte	0x9c
 1757 0677 0000 069E 		.long	0x69e
 1758 067b 08        		.uleb128 0x8
 1759 067c 0000 055E 		.long	0x55e
 1760 0680 02        		.uleb128 0x2
 1761 0681 91        		.byte	0x91
 1762 0682 00        		.sleb128 0
 1763 0683 01        		.uleb128 0x1
 1764 0684 0000 0568 		.long	0x568
 1765 0688 0000 0000 		.long	.LLST8
 1766 068c 0000 0000 		.long	.LVUS8
 1767 0690 01        		.uleb128 0x1
 1768 0691 0000 0573 		.long	0x573
 1769 0695 0000 0000 		.long	.LLST9
 1770 0699 0000 0000 		.long	.LVUS9
 1771 069d 00        		.byte	0
 1772 069e 11        		.uleb128 0x11
 1773 069f 0000 04A1 		.long	0x4a1
 1774 06a3 0000 0000 		.long	.LFB7
 1775 06a7 0000 0058 		.long	.LFE7-.LFB7
 1776 06ab 01        		.uleb128 0x1
 1777 06ac 9C        		.byte	0x9c
 1778 06ad 0000 06DD 		.long	0x6dd
 1779 06b1 08        		.uleb128 0x8
 1780 06b2 0000 04AE 		.long	0x4ae
 1781 06b6 02        		.uleb128 0x2
 1782 06b7 91        		.byte	0x91


 1783 06b8 00        		.sleb128 0
 1784 06b9 08        		.uleb128 0x8
 1785 06ba 0000 04B9 		.long	0x4b9
 1786 06be 02        		.uleb128 0x2
 1787 06bf 91        		.byte	0x91
 1788 06c0 04        		.sleb128 4
 1789 06c1 04        		.uleb128 0x4
 1790 06c2 0000 04C3 		.long	0x4c3
 1791 06c6 0000 0000 		.long	.LBB32
 1792 06ca 0000 0048 		.long	.LBE32-.LBB32
 1793 06ce 01        		.uleb128 0x1
 1794 06cf 0000 04C4 		.long	0x4c4
 1795 06d3 0000 0000 		.long	.LLST13
 1796 06d7 0000 0000 		.long	.LVUS13
 1797 06db 00        		.byte	0
 1798 06dc 00        		.byte	0
 1799 06dd 11        		.uleb128 0x11
 1800 06de 0000 0464 		.long	0x464
 1801 06e2 0000 0000 		.long	.LFB8
 1802 06e6 0000 0020 		.long	.LFE8-.LFB8
 1803 06ea 01        		.uleb128 0x1
 1804 06eb 9C        		.byte	0x9c
 1805 06ec 0000 0721 		.long	0x721
 1806 06f0 08        		.uleb128 0x8
 1807 06f1 0000 0473 		.long	0x473
 1808 06f5 02        		.uleb128 0x2
 1809 06f6 91        		.byte	0x91
 1810 06f7 00        		.sleb128 0
 1811 06f8 01        		.uleb128 0x1
 1812 06f9 0000 047E 		.long	0x47e
 1813 06fd 0000 0000 		.long	.LLST14
 1814 0701 0000 0000 		.long	.LVUS14
 1815 0705 04        		.uleb128 0x4
 1816 0706 0000 0489 		.long	0x489
 1817 070a 0000 0000 		.long	.LBB33
 1818 070e 0000 0016 		.long	.LBE33-.LBB33
 1819 0712 01        		.uleb128 0x1
 1820 0713 0000 048A 		.long	0x48a
 1821 0717 0000 0000 		.long	.LLST15
 1822 071b 0000 0000 		.long	.LVUS15
 1823 071f 00        		.byte	0
 1824 0720 00        		.byte	0
 1825 0721 11        		.uleb128 0x11
 1826 0722 0000 045B 		.long	0x45b
 1827 0726 0000 0000 		.long	.LFB9
 1828 072a 0000 002C 		.long	.LFE9-.LFB9
 1829 072e 01        		.uleb128 0x1
 1830 072f 9C        		.byte	0x9c
 1831 0730 0000 0781 		.long	0x781
 1832 0734 10        		.uleb128 0x10
 1833 0735 0000 0464 		.long	0x464
 1834 0739 0000 0000 		.long	.LBI37
 1835 073d 02        		.byte	.LVU182
 1836 073e 0000 0000 		.long	.LLRL16
 1837 0742 93        		.byte	0x93
 1838 0743 0E        		.byte	0xe
 1839 0744 03        		.uleb128 0x3


 1840 0745 0000 0473 		.long	0x473
 1841 0749 0000 0000 		.long	.LLST17
 1842 074d 0000 0000 		.long	.LVUS17
 1843 0751 1A        		.uleb128 0x1a
 1844 0752 0000 0000 		.long	.LLRL16
 1845 0756 01        		.uleb128 0x1
 1846 0757 0000 047E 		.long	0x47e
 1847 075b 0000 0000 		.long	.LLST18
 1848 075f 0000 0000 		.long	.LVUS18
 1849 0763 04        		.uleb128 0x4
 1850 0764 0000 0489 		.long	0x489
 1851 0768 0000 0000 		.long	.LBB39
 1852 076c 0000 001A 		.long	.LBE39-.LBB39
 1853 0770 01        		.uleb128 0x1
 1854 0771 0000 048A 		.long	0x48a
 1855 0775 0000 0000 		.long	.LLST19
 1856 0779 0000 0000 		.long	.LVUS19
 1857 077d 00        		.byte	0
 1858 077e 00        		.byte	0
 1859 077f 00        		.byte	0
 1860 0780 00        		.byte	0
 1861 0781 2B        		.uleb128 0x2b
 1862 0782 0000 0000 		.long	.LASF57
 1863 0786 0000 0000 		.long	.LASF58
 1864 078a 03        		.byte	0x3
 1865 078b 00        		.byte	0
 1866 078c 00        		.byte	0
 1867               		.section	.debug_abbrev,"",@progbits
 1868               	.Ldebug_abbrev0:
 1869 0000 01        		.uleb128 0x1
 1870 0001 34        		.uleb128 0x34
 1871 0002 00        		.byte	0
 1872 0003 31        		.uleb128 0x31
 1873 0004 13        		.uleb128 0x13
 1874 0005 02        		.uleb128 0x2
 1875 0006 17        		.uleb128 0x17
 1876 0007 B742      		.uleb128 0x2137
 1877 0009 17        		.uleb128 0x17
 1878 000a 00        		.byte	0
 1879 000b 00        		.byte	0
 1880 000c 02        		.uleb128 0x2
 1881 000d 24        		.uleb128 0x24
 1882 000e 00        		.byte	0
 1883 000f 0B        		.uleb128 0xb
 1884 0010 0B        		.uleb128 0xb
 1885 0011 3E        		.uleb128 0x3e
 1886 0012 0B        		.uleb128 0xb
 1887 0013 03        		.uleb128 0x3
 1888 0014 0E        		.uleb128 0xe
 1889 0015 00        		.byte	0
 1890 0016 00        		.byte	0
 1891 0017 03        		.uleb128 0x3
 1892 0018 05        		.uleb128 0x5
 1893 0019 00        		.byte	0
 1894 001a 31        		.uleb128 0x31
 1895 001b 13        		.uleb128 0x13
 1896 001c 02        		.uleb128 0x2


 1897 001d 17        		.uleb128 0x17
 1898 001e B742      		.uleb128 0x2137
 1899 0020 17        		.uleb128 0x17
 1900 0021 00        		.byte	0
 1901 0022 00        		.byte	0
 1902 0023 04        		.uleb128 0x4
 1903 0024 0B        		.uleb128 0xb
 1904 0025 01        		.byte	0x1
 1905 0026 31        		.uleb128 0x31
 1906 0027 13        		.uleb128 0x13
 1907 0028 11        		.uleb128 0x11
 1908 0029 01        		.uleb128 0x1
 1909 002a 12        		.uleb128 0x12
 1910 002b 06        		.uleb128 0x6
 1911 002c 00        		.byte	0
 1912 002d 00        		.byte	0
 1913 002e 05        		.uleb128 0x5
 1914 002f 0D        		.uleb128 0xd
 1915 0030 00        		.byte	0
 1916 0031 03        		.uleb128 0x3
 1917 0032 0E        		.uleb128 0xe
 1918 0033 3A        		.uleb128 0x3a
 1919 0034 21        		.uleb128 0x21
 1920 0035 02        		.sleb128 2
 1921 0036 3B        		.uleb128 0x3b
 1922 0037 0B        		.uleb128 0xb
 1923 0038 39        		.uleb128 0x39
 1924 0039 0B        		.uleb128 0xb
 1925 003a 49        		.uleb128 0x49
 1926 003b 13        		.uleb128 0x13
 1927 003c 38        		.uleb128 0x38
 1928 003d 0B        		.uleb128 0xb
 1929 003e 00        		.byte	0
 1930 003f 00        		.byte	0
 1931 0040 06        		.uleb128 0x6
 1932 0041 34        		.uleb128 0x34
 1933 0042 00        		.byte	0
 1934 0043 03        		.uleb128 0x3
 1935 0044 0E        		.uleb128 0xe
 1936 0045 3A        		.uleb128 0x3a
 1937 0046 21        		.uleb128 0x21
 1938 0047 02        		.sleb128 2
 1939 0048 3B        		.uleb128 0x3b
 1940 0049 0B        		.uleb128 0xb
 1941 004a 39        		.uleb128 0x39
 1942 004b 0B        		.uleb128 0xb
 1943 004c 49        		.uleb128 0x49
 1944 004d 13        		.uleb128 0x13
 1945 004e 3F        		.uleb128 0x3f
 1946 004f 19        		.uleb128 0x19
 1947 0050 3C        		.uleb128 0x3c
 1948 0051 19        		.uleb128 0x19
 1949 0052 00        		.byte	0
 1950 0053 00        		.byte	0
 1951 0054 07        		.uleb128 0x7
 1952 0055 34        		.uleb128 0x34
 1953 0056 00        		.byte	0


 1954 0057 47        		.uleb128 0x47
 1955 0058 13        		.uleb128 0x13
 1956 0059 3A        		.uleb128 0x3a
 1957 005a 21        		.uleb128 0x21
 1958 005b 01        		.sleb128 1
 1959 005c 3B        		.uleb128 0x3b
 1960 005d 0B        		.uleb128 0xb
 1961 005e 39        		.uleb128 0x39
 1962 005f 0B        		.uleb128 0xb
 1963 0060 02        		.uleb128 0x2
 1964 0061 18        		.uleb128 0x18
 1965 0062 00        		.byte	0
 1966 0063 00        		.byte	0
 1967 0064 08        		.uleb128 0x8
 1968 0065 05        		.uleb128 0x5
 1969 0066 00        		.byte	0
 1970 0067 31        		.uleb128 0x31
 1971 0068 13        		.uleb128 0x13
 1972 0069 02        		.uleb128 0x2
 1973 006a 18        		.uleb128 0x18
 1974 006b 00        		.byte	0
 1975 006c 00        		.byte	0
 1976 006d 09        		.uleb128 0x9
 1977 006e 18        		.uleb128 0x18
 1978 006f 00        		.byte	0
 1979 0070 00        		.byte	0
 1980 0071 00        		.byte	0
 1981 0072 0A        		.uleb128 0xa
 1982 0073 0F        		.uleb128 0xf
 1983 0074 00        		.byte	0
 1984 0075 0B        		.uleb128 0xb
 1985 0076 21        		.uleb128 0x21
 1986 0077 04        		.sleb128 4
 1987 0078 49        		.uleb128 0x49
 1988 0079 13        		.uleb128 0x13
 1989 007a 00        		.byte	0
 1990 007b 00        		.byte	0
 1991 007c 0B        		.uleb128 0xb
 1992 007d 2E        		.uleb128 0x2e
 1993 007e 01        		.byte	0x1
 1994 007f 3F        		.uleb128 0x3f
 1995 0080 19        		.uleb128 0x19
 1996 0081 03        		.uleb128 0x3
 1997 0082 0E        		.uleb128 0xe
 1998 0083 3A        		.uleb128 0x3a
 1999 0084 21        		.uleb128 0x21
 2000 0085 01        		.sleb128 1
 2001 0086 3B        		.uleb128 0x3b
 2002 0087 0B        		.uleb128 0xb
 2003 0088 39        		.uleb128 0x39
 2004 0089 21        		.uleb128 0x21
 2005 008a 06        		.sleb128 6
 2006 008b 27        		.uleb128 0x27
 2007 008c 19        		.uleb128 0x19
 2008 008d 11        		.uleb128 0x11
 2009 008e 01        		.uleb128 0x1
 2010 008f 12        		.uleb128 0x12


 2011 0090 06        		.uleb128 0x6
 2012 0091 40        		.uleb128 0x40
 2013 0092 18        		.uleb128 0x18
 2014 0093 7A        		.uleb128 0x7a
 2015 0094 19        		.uleb128 0x19
 2016 0095 01        		.uleb128 0x1
 2017 0096 13        		.uleb128 0x13
 2018 0097 00        		.byte	0
 2019 0098 00        		.byte	0
 2020 0099 0C        		.uleb128 0xc
 2021 009a 34        		.uleb128 0x34
 2022 009b 00        		.byte	0
 2023 009c 03        		.uleb128 0x3
 2024 009d 0E        		.uleb128 0xe
 2025 009e 3A        		.uleb128 0x3a
 2026 009f 21        		.uleb128 0x21
 2027 00a0 01        		.sleb128 1
 2028 00a1 3B        		.uleb128 0x3b
 2029 00a2 0B        		.uleb128 0xb
 2030 00a3 39        		.uleb128 0x39
 2031 00a4 0B        		.uleb128 0xb
 2032 00a5 49        		.uleb128 0x49
 2033 00a6 13        		.uleb128 0x13
 2034 00a7 00        		.byte	0
 2035 00a8 00        		.byte	0
 2036 00a9 0D        		.uleb128 0xd
 2037 00aa 16        		.uleb128 0x16
 2038 00ab 00        		.byte	0
 2039 00ac 03        		.uleb128 0x3
 2040 00ad 0E        		.uleb128 0xe
 2041 00ae 3A        		.uleb128 0x3a
 2042 00af 21        		.uleb128 0x21
 2043 00b0 02        		.sleb128 2
 2044 00b1 3B        		.uleb128 0x3b
 2045 00b2 0B        		.uleb128 0xb
 2046 00b3 39        		.uleb128 0x39
 2047 00b4 0B        		.uleb128 0xb
 2048 00b5 49        		.uleb128 0x49
 2049 00b6 13        		.uleb128 0x13
 2050 00b7 00        		.byte	0
 2051 00b8 00        		.byte	0
 2052 00b9 0E        		.uleb128 0xe
 2053 00ba 01        		.uleb128 0x1
 2054 00bb 01        		.byte	0x1
 2055 00bc 49        		.uleb128 0x49
 2056 00bd 13        		.uleb128 0x13
 2057 00be 01        		.uleb128 0x1
 2058 00bf 13        		.uleb128 0x13
 2059 00c0 00        		.byte	0
 2060 00c1 00        		.byte	0
 2061 00c2 0F        		.uleb128 0xf
 2062 00c3 2E        		.uleb128 0x2e
 2063 00c4 01        		.byte	0x1
 2064 00c5 3F        		.uleb128 0x3f
 2065 00c6 19        		.uleb128 0x19
 2066 00c7 03        		.uleb128 0x3
 2067 00c8 0E        		.uleb128 0xe


 2068 00c9 3A        		.uleb128 0x3a
 2069 00ca 21        		.uleb128 0x21
 2070 00cb 02        		.sleb128 2
 2071 00cc 3B        		.uleb128 0x3b
 2072 00cd 0B        		.uleb128 0xb
 2073 00ce 39        		.uleb128 0x39
 2074 00cf 21        		.uleb128 0x21
 2075 00d0 0C        		.sleb128 12
 2076 00d1 49        		.uleb128 0x49
 2077 00d2 13        		.uleb128 0x13
 2078 00d3 3C        		.uleb128 0x3c
 2079 00d4 19        		.uleb128 0x19
 2080 00d5 01        		.uleb128 0x1
 2081 00d6 13        		.uleb128 0x13
 2082 00d7 00        		.byte	0
 2083 00d8 00        		.byte	0
 2084 00d9 10        		.uleb128 0x10
 2085 00da 1D        		.uleb128 0x1d
 2086 00db 01        		.byte	0x1
 2087 00dc 31        		.uleb128 0x31
 2088 00dd 13        		.uleb128 0x13
 2089 00de 52        		.uleb128 0x52
 2090 00df 01        		.uleb128 0x1
 2091 00e0 B842      		.uleb128 0x2138
 2092 00e2 0B        		.uleb128 0xb
 2093 00e3 55        		.uleb128 0x55
 2094 00e4 17        		.uleb128 0x17
 2095 00e5 58        		.uleb128 0x58
 2096 00e6 21        		.uleb128 0x21
 2097 00e7 01        		.sleb128 1
 2098 00e8 59        		.uleb128 0x59
 2099 00e9 0B        		.uleb128 0xb
 2100 00ea 57        		.uleb128 0x57
 2101 00eb 0B        		.uleb128 0xb
 2102 00ec 00        		.byte	0
 2103 00ed 00        		.byte	0
 2104 00ee 11        		.uleb128 0x11
 2105 00ef 2E        		.uleb128 0x2e
 2106 00f0 01        		.byte	0x1
 2107 00f1 31        		.uleb128 0x31
 2108 00f2 13        		.uleb128 0x13
 2109 00f3 11        		.uleb128 0x11
 2110 00f4 01        		.uleb128 0x1
 2111 00f5 12        		.uleb128 0x12
 2112 00f6 06        		.uleb128 0x6
 2113 00f7 40        		.uleb128 0x40
 2114 00f8 18        		.uleb128 0x18
 2115 00f9 7A        		.uleb128 0x7a
 2116 00fa 19        		.uleb128 0x19
 2117 00fb 01        		.uleb128 0x1
 2118 00fc 13        		.uleb128 0x13
 2119 00fd 00        		.byte	0
 2120 00fe 00        		.byte	0
 2121 00ff 12        		.uleb128 0x12
 2122 0100 21        		.uleb128 0x21
 2123 0101 00        		.byte	0
 2124 0102 49        		.uleb128 0x49


 2125 0103 13        		.uleb128 0x13
 2126 0104 2F        		.uleb128 0x2f
 2127 0105 0B        		.uleb128 0xb
 2128 0106 00        		.byte	0
 2129 0107 00        		.byte	0
 2130 0108 13        		.uleb128 0x13
 2131 0109 1D        		.uleb128 0x1d
 2132 010a 01        		.byte	0x1
 2133 010b 31        		.uleb128 0x31
 2134 010c 13        		.uleb128 0x13
 2135 010d 52        		.uleb128 0x52
 2136 010e 01        		.uleb128 0x1
 2137 010f B842      		.uleb128 0x2138
 2138 0111 0B        		.uleb128 0xb
 2139 0112 11        		.uleb128 0x11
 2140 0113 01        		.uleb128 0x1
 2141 0114 12        		.uleb128 0x12
 2142 0115 06        		.uleb128 0x6
 2143 0116 58        		.uleb128 0x58
 2144 0117 21        		.uleb128 0x21
 2145 0118 01        		.sleb128 1
 2146 0119 59        		.uleb128 0x59
 2147 011a 0B        		.uleb128 0xb
 2148 011b 57        		.uleb128 0x57
 2149 011c 0B        		.uleb128 0xb
 2150 011d 01        		.uleb128 0x1
 2151 011e 13        		.uleb128 0x13
 2152 011f 00        		.byte	0
 2153 0120 00        		.byte	0
 2154 0121 14        		.uleb128 0x14
 2155 0122 05        		.uleb128 0x5
 2156 0123 00        		.byte	0
 2157 0124 03        		.uleb128 0x3
 2158 0125 0E        		.uleb128 0xe
 2159 0126 3A        		.uleb128 0x3a
 2160 0127 21        		.uleb128 0x21
 2161 0128 01        		.sleb128 1
 2162 0129 3B        		.uleb128 0x3b
 2163 012a 0B        		.uleb128 0xb
 2164 012b 39        		.uleb128 0x39
 2165 012c 0B        		.uleb128 0xb
 2166 012d 49        		.uleb128 0x49
 2167 012e 13        		.uleb128 0x13
 2168 012f 02        		.uleb128 0x2
 2169 0130 18        		.uleb128 0x18
 2170 0131 00        		.byte	0
 2171 0132 00        		.byte	0
 2172 0133 15        		.uleb128 0x15
 2173 0134 48        		.uleb128 0x48
 2174 0135 00        		.byte	0
 2175 0136 7D        		.uleb128 0x7d
 2176 0137 01        		.uleb128 0x1
 2177 0138 8201      		.uleb128 0x82
 2178 013a 19        		.uleb128 0x19
 2179 013b 7F        		.uleb128 0x7f
 2180 013c 13        		.uleb128 0x13
 2181 013d 00        		.byte	0


 2182 013e 00        		.byte	0
 2183 013f 16        		.uleb128 0x16
 2184 0140 48        		.uleb128 0x48
 2185 0141 00        		.byte	0
 2186 0142 7D        		.uleb128 0x7d
 2187 0143 01        		.uleb128 0x1
 2188 0144 7F        		.uleb128 0x7f
 2189 0145 13        		.uleb128 0x13
 2190 0146 00        		.byte	0
 2191 0147 00        		.byte	0
 2192 0148 17        		.uleb128 0x17
 2193 0149 13        		.uleb128 0x13
 2194 014a 01        		.byte	0x1
 2195 014b 0B        		.uleb128 0xb
 2196 014c 0B        		.uleb128 0xb
 2197 014d 3A        		.uleb128 0x3a
 2198 014e 21        		.uleb128 0x21
 2199 014f 02        		.sleb128 2
 2200 0150 3B        		.uleb128 0x3b
 2201 0151 0B        		.uleb128 0xb
 2202 0152 39        		.uleb128 0x39
 2203 0153 21        		.uleb128 0x21
 2204 0154 09        		.sleb128 9
 2205 0155 01        		.uleb128 0x1
 2206 0156 13        		.uleb128 0x13
 2207 0157 00        		.byte	0
 2208 0158 00        		.byte	0
 2209 0159 18        		.uleb128 0x18
 2210 015a 05        		.uleb128 0x5
 2211 015b 00        		.byte	0
 2212 015c 03        		.uleb128 0x3
 2213 015d 08        		.uleb128 0x8
 2214 015e 3A        		.uleb128 0x3a
 2215 015f 21        		.uleb128 0x21
 2216 0160 01        		.sleb128 1
 2217 0161 3B        		.uleb128 0x3b
 2218 0162 0B        		.uleb128 0xb
 2219 0163 39        		.uleb128 0x39
 2220 0164 0B        		.uleb128 0xb
 2221 0165 49        		.uleb128 0x49
 2222 0166 13        		.uleb128 0x13
 2223 0167 02        		.uleb128 0x2
 2224 0168 18        		.uleb128 0x18
 2225 0169 00        		.byte	0
 2226 016a 00        		.byte	0
 2227 016b 19        		.uleb128 0x19
 2228 016c 1D        		.uleb128 0x1d
 2229 016d 01        		.byte	0x1
 2230 016e 31        		.uleb128 0x31
 2231 016f 13        		.uleb128 0x13
 2232 0170 52        		.uleb128 0x52
 2233 0171 01        		.uleb128 0x1
 2234 0172 B842      		.uleb128 0x2138
 2235 0174 0B        		.uleb128 0xb
 2236 0175 55        		.uleb128 0x55
 2237 0176 17        		.uleb128 0x17
 2238 0177 58        		.uleb128 0x58


 2239 0178 21        		.uleb128 0x21
 2240 0179 01        		.sleb128 1
 2241 017a 59        		.uleb128 0x59
 2242 017b 0B        		.uleb128 0xb
 2243 017c 57        		.uleb128 0x57
 2244 017d 21        		.uleb128 0x21
 2245 017e 02        		.sleb128 2
 2246 017f 01        		.uleb128 0x1
 2247 0180 13        		.uleb128 0x13
 2248 0181 00        		.byte	0
 2249 0182 00        		.byte	0
 2250 0183 1A        		.uleb128 0x1a
 2251 0184 0B        		.uleb128 0xb
 2252 0185 01        		.byte	0x1
 2253 0186 55        		.uleb128 0x55
 2254 0187 17        		.uleb128 0x17
 2255 0188 00        		.byte	0
 2256 0189 00        		.byte	0
 2257 018a 1B        		.uleb128 0x1b
 2258 018b 2E        		.uleb128 0x2e
 2259 018c 01        		.byte	0x1
 2260 018d 3F        		.uleb128 0x3f
 2261 018e 19        		.uleb128 0x19
 2262 018f 03        		.uleb128 0x3
 2263 0190 0E        		.uleb128 0xe
 2264 0191 3A        		.uleb128 0x3a
 2265 0192 21        		.uleb128 0x21
 2266 0193 01        		.sleb128 1
 2267 0194 3B        		.uleb128 0x3b
 2268 0195 0B        		.uleb128 0xb
 2269 0196 39        		.uleb128 0x39
 2270 0197 0B        		.uleb128 0xb
 2271 0198 27        		.uleb128 0x27
 2272 0199 19        		.uleb128 0x19
 2273 019a 49        		.uleb128 0x49
 2274 019b 13        		.uleb128 0x13
 2275 019c 20        		.uleb128 0x20
 2276 019d 21        		.uleb128 0x21
 2277 019e 01        		.sleb128 1
 2278 019f 01        		.uleb128 0x1
 2279 01a0 13        		.uleb128 0x13
 2280 01a1 00        		.byte	0
 2281 01a2 00        		.byte	0
 2282 01a3 1C        		.uleb128 0x1c
 2283 01a4 05        		.uleb128 0x5
 2284 01a5 00        		.byte	0
 2285 01a6 03        		.uleb128 0x3
 2286 01a7 0E        		.uleb128 0xe
 2287 01a8 3A        		.uleb128 0x3a
 2288 01a9 21        		.uleb128 0x21
 2289 01aa 01        		.sleb128 1
 2290 01ab 3B        		.uleb128 0x3b
 2291 01ac 0B        		.uleb128 0xb
 2292 01ad 39        		.uleb128 0x39
 2293 01ae 0B        		.uleb128 0xb
 2294 01af 49        		.uleb128 0x49
 2295 01b0 13        		.uleb128 0x13


 2296 01b1 00        		.byte	0
 2297 01b2 00        		.byte	0
 2298 01b3 1D        		.uleb128 0x1d
 2299 01b4 0B        		.uleb128 0xb
 2300 01b5 01        		.byte	0x1
 2301 01b6 00        		.byte	0
 2302 01b7 00        		.byte	0
 2303 01b8 1E        		.uleb128 0x1e
 2304 01b9 05        		.uleb128 0x5
 2305 01ba 00        		.byte	0
 2306 01bb 03        		.uleb128 0x3
 2307 01bc 08        		.uleb128 0x8
 2308 01bd 3A        		.uleb128 0x3a
 2309 01be 21        		.uleb128 0x21
 2310 01bf 01        		.sleb128 1
 2311 01c0 3B        		.uleb128 0x3b
 2312 01c1 0B        		.uleb128 0xb
 2313 01c2 39        		.uleb128 0x39
 2314 01c3 0B        		.uleb128 0xb
 2315 01c4 49        		.uleb128 0x49
 2316 01c5 13        		.uleb128 0x13
 2317 01c6 00        		.byte	0
 2318 01c7 00        		.byte	0
 2319 01c8 1F        		.uleb128 0x1f
 2320 01c9 2E        		.uleb128 0x2e
 2321 01ca 01        		.byte	0x1
 2322 01cb 3F        		.uleb128 0x3f
 2323 01cc 19        		.uleb128 0x19
 2324 01cd 03        		.uleb128 0x3
 2325 01ce 0E        		.uleb128 0xe
 2326 01cf 3A        		.uleb128 0x3a
 2327 01d0 21        		.uleb128 0x21
 2328 01d1 01        		.sleb128 1
 2329 01d2 3B        		.uleb128 0x3b
 2330 01d3 0B        		.uleb128 0xb
 2331 01d4 39        		.uleb128 0x39
 2332 01d5 21        		.uleb128 0x21
 2333 01d6 06        		.sleb128 6
 2334 01d7 11        		.uleb128 0x11
 2335 01d8 01        		.uleb128 0x1
 2336 01d9 12        		.uleb128 0x12
 2337 01da 06        		.uleb128 0x6
 2338 01db 40        		.uleb128 0x40
 2339 01dc 18        		.uleb128 0x18
 2340 01dd 7A        		.uleb128 0x7a
 2341 01de 19        		.uleb128 0x19
 2342 01df 01        		.uleb128 0x1
 2343 01e0 13        		.uleb128 0x13
 2344 01e1 00        		.byte	0
 2345 01e2 00        		.byte	0
 2346 01e3 20        		.uleb128 0x20
 2347 01e4 34        		.uleb128 0x34
 2348 01e5 00        		.byte	0
 2349 01e6 03        		.uleb128 0x3
 2350 01e7 08        		.uleb128 0x8
 2351 01e8 3A        		.uleb128 0x3a
 2352 01e9 21        		.uleb128 0x21


 2353 01ea 01        		.sleb128 1
 2354 01eb 3B        		.uleb128 0x3b
 2355 01ec 0B        		.uleb128 0xb
 2356 01ed 39        		.uleb128 0x39
 2357 01ee 0B        		.uleb128 0xb
 2358 01ef 49        		.uleb128 0x49
 2359 01f0 13        		.uleb128 0x13
 2360 01f1 02        		.uleb128 0x2
 2361 01f2 17        		.uleb128 0x17
 2362 01f3 B742      		.uleb128 0x2137
 2363 01f5 17        		.uleb128 0x17
 2364 01f6 00        		.byte	0
 2365 01f7 00        		.byte	0
 2366 01f8 21        		.uleb128 0x21
 2367 01f9 11        		.uleb128 0x11
 2368 01fa 01        		.byte	0x1
 2369 01fb 25        		.uleb128 0x25
 2370 01fc 0E        		.uleb128 0xe
 2371 01fd 13        		.uleb128 0x13
 2372 01fe 0B        		.uleb128 0xb
 2373 01ff 03        		.uleb128 0x3
 2374 0200 0E        		.uleb128 0xe
 2375 0201 1B        		.uleb128 0x1b
 2376 0202 0E        		.uleb128 0xe
 2377 0203 11        		.uleb128 0x11
 2378 0204 01        		.uleb128 0x1
 2379 0205 12        		.uleb128 0x12
 2380 0206 06        		.uleb128 0x6
 2381 0207 10        		.uleb128 0x10
 2382 0208 17        		.uleb128 0x17
 2383 0209 00        		.byte	0
 2384 020a 00        		.byte	0
 2385 020b 22        		.uleb128 0x22
 2386 020c 24        		.uleb128 0x24
 2387 020d 00        		.byte	0
 2388 020e 0B        		.uleb128 0xb
 2389 020f 0B        		.uleb128 0xb
 2390 0210 3E        		.uleb128 0x3e
 2391 0211 0B        		.uleb128 0xb
 2392 0212 03        		.uleb128 0x3
 2393 0213 08        		.uleb128 0x8
 2394 0214 00        		.byte	0
 2395 0215 00        		.byte	0
 2396 0216 23        		.uleb128 0x23
 2397 0217 0F        		.uleb128 0xf
 2398 0218 00        		.byte	0
 2399 0219 0B        		.uleb128 0xb
 2400 021a 0B        		.uleb128 0xb
 2401 021b 00        		.byte	0
 2402 021c 00        		.byte	0
 2403 021d 24        		.uleb128 0x24
 2404 021e 15        		.uleb128 0x15
 2405 021f 01        		.byte	0x1
 2406 0220 01        		.uleb128 0x1
 2407 0221 13        		.uleb128 0x13
 2408 0222 00        		.byte	0
 2409 0223 00        		.byte	0


 2410 0224 25        		.uleb128 0x25
 2411 0225 13        		.uleb128 0x13
 2412 0226 01        		.byte	0x1
 2413 0227 0B        		.uleb128 0xb
 2414 0228 05        		.uleb128 0x5
 2415 0229 3A        		.uleb128 0x3a
 2416 022a 0B        		.uleb128 0xb
 2417 022b 3B        		.uleb128 0x3b
 2418 022c 0B        		.uleb128 0xb
 2419 022d 39        		.uleb128 0x39
 2420 022e 0B        		.uleb128 0xb
 2421 022f 01        		.uleb128 0x1
 2422 0230 13        		.uleb128 0x13
 2423 0231 00        		.byte	0
 2424 0232 00        		.byte	0
 2425 0233 26        		.uleb128 0x26
 2426 0234 0D        		.uleb128 0xd
 2427 0235 00        		.byte	0
 2428 0236 03        		.uleb128 0x3
 2429 0237 0E        		.uleb128 0xe
 2430 0238 3A        		.uleb128 0x3a
 2431 0239 0B        		.uleb128 0xb
 2432 023a 3B        		.uleb128 0x3b
 2433 023b 0B        		.uleb128 0xb
 2434 023c 39        		.uleb128 0x39
 2435 023d 0B        		.uleb128 0xb
 2436 023e 49        		.uleb128 0x49
 2437 023f 13        		.uleb128 0x13
 2438 0240 38        		.uleb128 0x38
 2439 0241 05        		.uleb128 0x5
 2440 0242 00        		.byte	0
 2441 0243 00        		.byte	0
 2442 0244 27        		.uleb128 0x27
 2443 0245 21        		.uleb128 0x21
 2444 0246 00        		.byte	0
 2445 0247 49        		.uleb128 0x49
 2446 0248 13        		.uleb128 0x13
 2447 0249 2F        		.uleb128 0x2f
 2448 024a 05        		.uleb128 0x5
 2449 024b 00        		.byte	0
 2450 024c 00        		.byte	0
 2451 024d 28        		.uleb128 0x28
 2452 024e 34        		.uleb128 0x34
 2453 024f 00        		.byte	0
 2454 0250 03        		.uleb128 0x3
 2455 0251 0E        		.uleb128 0xe
 2456 0252 3A        		.uleb128 0x3a
 2457 0253 0B        		.uleb128 0xb
 2458 0254 3B        		.uleb128 0x3b
 2459 0255 0B        		.uleb128 0xb
 2460 0256 39        		.uleb128 0x39
 2461 0257 0B        		.uleb128 0xb
 2462 0258 49        		.uleb128 0x49
 2463 0259 13        		.uleb128 0x13
 2464 025a 02        		.uleb128 0x2
 2465 025b 17        		.uleb128 0x17
 2466 025c B742      		.uleb128 0x2137


 2467 025e 17        		.uleb128 0x17
 2468 025f 00        		.byte	0
 2469 0260 00        		.byte	0
 2470 0261 29        		.uleb128 0x29
 2471 0262 2E        		.uleb128 0x2e
 2472 0263 00        		.byte	0
 2473 0264 3F        		.uleb128 0x3f
 2474 0265 19        		.uleb128 0x19
 2475 0266 03        		.uleb128 0x3
 2476 0267 0E        		.uleb128 0xe
 2477 0268 3A        		.uleb128 0x3a
 2478 0269 0B        		.uleb128 0xb
 2479 026a 3B        		.uleb128 0x3b
 2480 026b 0B        		.uleb128 0xb
 2481 026c 39        		.uleb128 0x39
 2482 026d 0B        		.uleb128 0xb
 2483 026e 20        		.uleb128 0x20
 2484 026f 0B        		.uleb128 0xb
 2485 0270 00        		.byte	0
 2486 0271 00        		.byte	0
 2487 0272 2A        		.uleb128 0x2a
 2488 0273 2E        		.uleb128 0x2e
 2489 0274 01        		.byte	0x1
 2490 0275 3F        		.uleb128 0x3f
 2491 0276 19        		.uleb128 0x19
 2492 0277 03        		.uleb128 0x3
 2493 0278 0E        		.uleb128 0xe
 2494 0279 3A        		.uleb128 0x3a
 2495 027a 0B        		.uleb128 0xb
 2496 027b 3B        		.uleb128 0x3b
 2497 027c 0B        		.uleb128 0xb
 2498 027d 39        		.uleb128 0x39
 2499 027e 0B        		.uleb128 0xb
 2500 027f 27        		.uleb128 0x27
 2501 0280 19        		.uleb128 0x19
 2502 0281 20        		.uleb128 0x20
 2503 0282 0B        		.uleb128 0xb
 2504 0283 01        		.uleb128 0x1
 2505 0284 13        		.uleb128 0x13
 2506 0285 00        		.byte	0
 2507 0286 00        		.byte	0
 2508 0287 2B        		.uleb128 0x2b
 2509 0288 2E        		.uleb128 0x2e
 2510 0289 00        		.byte	0
 2511 028a 3F        		.uleb128 0x3f
 2512 028b 19        		.uleb128 0x19
 2513 028c 3C        		.uleb128 0x3c
 2514 028d 19        		.uleb128 0x19
 2515 028e 6E        		.uleb128 0x6e
 2516 028f 0E        		.uleb128 0xe
 2517 0290 03        		.uleb128 0x3
 2518 0291 0E        		.uleb128 0xe
 2519 0292 3A        		.uleb128 0x3a
 2520 0293 0B        		.uleb128 0xb
 2521 0294 3B        		.uleb128 0x3b
 2522 0295 0B        		.uleb128 0xb
 2523 0296 00        		.byte	0


 2524 0297 00        		.byte	0
 2525 0298 00        		.byte	0
 2526               		.section	.debug_loclists,"",@progbits
 2527 0000 0000 0422 		.long	.Ldebug_loc3-.Ldebug_loc2
 2528               	.Ldebug_loc2:
 2529 0004 0005      		.word	0x5
 2530 0006 04        		.byte	0x4
 2531 0007 00        		.byte	0
 2532 0008 0000 0000 		.long	0
 2533               	.Ldebug_loc0:
 2534               	.LVUS29:
 2535 000c 02        		.uleb128 .LVU300
 2536 000d 00        		.uleb128 0
 2537               	.LLST29:
 2538 000e 04        		.byte	0x4
 2539 000f D406      		.uleb128 .LVL74-.Ltext0
 2540 0011 B007      		.uleb128 .LFE13-.Ltext0
 2541 0013 01        		.uleb128 0x1
 2542 0014 59        		.byte	0x59
 2543 0015 00        		.byte	0
 2544               	.LVUS30:
 2545 0016 02        		.uleb128 .LVU286
 2546 0017 00        		.uleb128 .LVU289
 2547 0018 00        		.uleb128 .LVU289
 2548 0019 02        		.uleb128 .LVU300
 2549               	.LLST30:
 2550 001a 04        		.byte	0x4
 2551 001b A606      		.uleb128 .LVL70-.Ltext0
 2552 001d B206      		.uleb128 .LVL71-.Ltext0
 2553 001f 0C        		.uleb128 0xc
 2554 0020 91        		.byte	0x91
 2555 0021 70        		.sleb128 -16
 2556 0022 06        		.byte	0x6
 2557 0023 33        		.byte	0x33
 2558 0024 24        		.byte	0x24
 2559 0025 03        		.byte	0x3
 2560 0026 0000 0000 		.long	semaphore+4
 2561 002a 22        		.byte	0x22
 2562 002b 9F        		.byte	0x9f
 2563 002c 04        		.byte	0x4
 2564 002d B206      		.uleb128 .LVL71-.Ltext0
 2565 002f D406      		.uleb128 .LVL74-.Ltext0
 2566 0031 01        		.uleb128 0x1
 2567 0032 50        		.byte	0x50
 2568 0033 00        		.byte	0
 2569               	.LVUS31:
 2570 0034 00        		.uleb128 .LVU290
 2571 0035 02        		.uleb128 .LVU300
 2572               	.LLST31:
 2573 0036 04        		.byte	0x4
 2574 0037 B606      		.uleb128 .LVL72-.Ltext0
 2575 0039 D406      		.uleb128 .LVL74-.Ltext0
 2576 003b 01        		.uleb128 0x1
 2577 003c 59        		.byte	0x59
 2578 003d 00        		.byte	0
 2579               	.LVUS32:
 2580 003e 01        		.uleb128 .LVU293


 2581 003f 00        		.uleb128 .LVU298
 2582               	.LLST32:
 2583 0040 04        		.byte	0x4
 2584 0041 BC06      		.uleb128 .LVL73-.Ltext0
 2585 0043 D406      		.uleb128 .LVL74-.Ltext0
 2586 0045 0B        		.uleb128 0xb
 2587 0046 79        		.byte	0x79
 2588 0047 00        		.sleb128 0
 2589 0048 44        		.byte	0x44
 2590 0049 1E        		.byte	0x1e
 2591 004a 03        		.byte	0x3
 2592 004b 0000 0000 		.long	task_tab
 2593 004f 22        		.byte	0x22
 2594 0050 9F        		.byte	0x9f
 2595 0051 00        		.byte	0
 2596               	.LVUS34:
 2597 0052 04        		.uleb128 .LVU302
 2598 0053 00        		.uleb128 0
 2599               	.LLST34:
 2600 0054 04        		.byte	0x4
 2601 0055 D406      		.uleb128 .LVL74-.Ltext0
 2602 0057 B007      		.uleb128 .LFE13-.Ltext0
 2603 0059 01        		.uleb128 0x1
 2604 005a 59        		.byte	0x59
 2605 005b 00        		.byte	0
 2606               	.LVUS35:
 2607 005c 01        		.uleb128 .LVU310
 2608 005d 00        		.uleb128 .LVU314
 2609 005e 00        		.uleb128 .LVU314
 2610 005f 01        		.uleb128 .LVU315
 2611 0060 01        		.uleb128 .LVU315
 2612 0061 00        		.uleb128 .LVU319
 2613 0062 00        		.uleb128 .LVU319
 2614 0063 00        		.uleb128 .LVU322
 2615               	.LLST35:
 2616 0064 04        		.byte	0x4
 2617 0065 E606      		.uleb128 .LVL75-.Ltext0
 2618 0067 8207      		.uleb128 .LVL76-.Ltext0
 2619 0069 0B        		.uleb128 0xb
 2620 006a 71        		.byte	0x71
 2621 006b 00        		.sleb128 0
 2622 006c 44        		.byte	0x44
 2623 006d 1E        		.byte	0x1e
 2624 006e 03        		.byte	0x3
 2625 006f 0000 0000 		.long	task_tab
 2626 0073 22        		.byte	0x22
 2627 0074 9F        		.byte	0x9f
 2628 0075 04        		.byte	0x4
 2629 0076 8207      		.uleb128 .LVL76-.Ltext0
 2630 0078 8207      		.uleb128 .LVL76-.Ltext0
 2631 007a 0F        		.uleb128 0xf
 2632 007b 03        		.byte	0x3
 2633 007c 0000 0000 		.long	ready
 2634 0080 06        		.byte	0x6
 2635 0081 44        		.byte	0x44
 2636 0082 1E        		.byte	0x1e
 2637 0083 03        		.byte	0x3


 2638 0084 0000 0000 		.long	task_tab
 2639 0088 22        		.byte	0x22
 2640 0089 9F        		.byte	0x9f
 2641 008a 04        		.byte	0x4
 2642 008b 8207      		.uleb128 .LVL76-.Ltext0
 2643 008d 8607      		.uleb128 .LVL77-.Ltext0
 2644 008f 0B        		.uleb128 0xb
 2645 0090 70        		.byte	0x70
 2646 0091 00        		.sleb128 0
 2647 0092 44        		.byte	0x44
 2648 0093 1E        		.byte	0x1e
 2649 0094 03        		.byte	0x3
 2650 0095 0000 0000 		.long	task_tab
 2651 0099 22        		.byte	0x22
 2652 009a 9F        		.byte	0x9f
 2653 009b 04        		.byte	0x4
 2654 009c 8607      		.uleb128 .LVL77-.Ltext0
 2655 009e A807      		.uleb128 .LVL78-.Ltext0
 2656 00a0 0B        		.uleb128 0xb
 2657 00a1 71        		.byte	0x71
 2658 00a2 00        		.sleb128 0
 2659 00a3 44        		.byte	0x44
 2660 00a4 1E        		.byte	0x1e
 2661 00a5 03        		.byte	0x3
 2662 00a6 0000 0000 		.long	task_tab
 2663 00aa 22        		.byte	0x22
 2664 00ab 9F        		.byte	0x9f
 2665 00ac 00        		.byte	0
 2666               	.LVUS21:
 2667 00ad 00        		.uleb128 .LVU208
 2668 00ae 00        		.uleb128 .LVU215
 2669 00af 00        		.uleb128 .LVU237
 2670 00b0 01        		.uleb128 .LVU255
 2671               	.LLST21:
 2672 00b1 04        		.byte	0x4
 2673 00b2 E204      		.uleb128 .LVL52-.Ltext0
 2674 00b4 FC04      		.uleb128 .LVL54-.Ltext0
 2675 00b6 01        		.uleb128 0x1
 2676 00b7 52        		.byte	0x52
 2677 00b8 04        		.byte	0x4
 2678 00b9 AA05      		.uleb128 .LVL58-.Ltext0
 2679 00bb F005      		.uleb128 .LVL64-.Ltext0
 2680 00bd 01        		.uleb128 0x1
 2681 00be 52        		.byte	0x52
 2682 00bf 00        		.byte	0
 2683               	.LVUS22:
 2684 00c0 00        		.uleb128 .LVU208
 2685 00c1 00        		.uleb128 .LVU211
 2686 00c2 00        		.uleb128 .LVU211
 2687 00c3 00        		.uleb128 .LVU215
 2688 00c4 00        		.uleb128 .LVU237
 2689 00c5 00        		.uleb128 .LVU241
 2690 00c6 00        		.uleb128 .LVU241
 2691 00c7 00        		.uleb128 .LVU242
 2692 00c8 00        		.uleb128 .LVU242
 2693 00c9 01        		.uleb128 .LVU255
 2694               	.LLST22:


 2695 00ca 04        		.byte	0x4
 2696 00cb E204      		.uleb128 .LVL52-.Ltext0
 2697 00cd EE04      		.uleb128 .LVL53-.Ltext0
 2698 00cf 0C        		.uleb128 0xc
 2699 00d0 91        		.byte	0x91
 2700 00d1 70        		.sleb128 -16
 2701 00d2 06        		.byte	0x6
 2702 00d3 33        		.byte	0x33
 2703 00d4 24        		.byte	0x24
 2704 00d5 03        		.byte	0x3
 2705 00d6 0000 0000 		.long	semaphore+4
 2706 00da 22        		.byte	0x22
 2707 00db 9F        		.byte	0x9f
 2708 00dc 04        		.byte	0x4
 2709 00dd EE04      		.uleb128 .LVL53-.Ltext0
 2710 00df FC04      		.uleb128 .LVL54-.Ltext0
 2711 00e1 01        		.uleb128 0x1
 2712 00e2 50        		.byte	0x50
 2713 00e3 04        		.byte	0x4
 2714 00e4 AA05      		.uleb128 .LVL58-.Ltext0
 2715 00e6 B205      		.uleb128 .LVL59-.Ltext0
 2716 00e8 01        		.uleb128 0x1
 2717 00e9 50        		.byte	0x50
 2718 00ea 04        		.byte	0x4
 2719 00eb B205      		.uleb128 .LVL59-.Ltext0
 2720 00ed C005      		.uleb128 .LVL60-.Ltext0
 2721 00ef 01        		.uleb128 0x1
 2722 00f0 58        		.byte	0x58
 2723 00f1 04        		.byte	0x4
 2724 00f2 C005      		.uleb128 .LVL60-.Ltext0
 2725 00f4 F005      		.uleb128 .LVL64-.Ltext0
 2726 00f6 0C        		.uleb128 0xc
 2727 00f7 91        		.byte	0x91
 2728 00f8 70        		.sleb128 -16
 2729 00f9 06        		.byte	0x6
 2730 00fa 33        		.byte	0x33
 2731 00fb 24        		.byte	0x24
 2732 00fc 03        		.byte	0x3
 2733 00fd 0000 0000 		.long	semaphore+4
 2734 0101 22        		.byte	0x22
 2735 0102 9F        		.byte	0x9f
 2736 0103 00        		.byte	0
 2737               	.LVUS23:
 2738 0104 01        		.uleb128 .LVU238
 2739 0105 00        		.uleb128 .LVU244
 2740 0106 00        		.uleb128 .LVU244
 2741 0107 01        		.uleb128 .LVU245
 2742 0108 01        		.uleb128 .LVU245
 2743 0109 00        		.uleb128 .LVU249
 2744 010a 00        		.uleb128 .LVU249
 2745 010b 00        		.uleb128 .LVU252
 2746               	.LLST23:
 2747 010c 04        		.byte	0x4
 2748 010d AA05      		.uleb128 .LVL58-.Ltext0
 2749 010f C605      		.uleb128 .LVL61-.Ltext0
 2750 0111 0B        		.uleb128 0xb
 2751 0112 71        		.byte	0x71


 2752 0113 00        		.sleb128 0
 2753 0114 44        		.byte	0x44
 2754 0115 1E        		.byte	0x1e
 2755 0116 03        		.byte	0x3
 2756 0117 0000 0000 		.long	task_tab
 2757 011b 22        		.byte	0x22
 2758 011c 9F        		.byte	0x9f
 2759 011d 04        		.byte	0x4
 2760 011e C605      		.uleb128 .LVL61-.Ltext0
 2761 0120 C605      		.uleb128 .LVL61-.Ltext0
 2762 0122 15        		.uleb128 0x15
 2763 0123 91        		.byte	0x91
 2764 0124 70        		.sleb128 -16
 2765 0125 06        		.byte	0x6
 2766 0126 33        		.byte	0x33
 2767 0127 24        		.byte	0x24
 2768 0128 03        		.byte	0x3
 2769 0129 0000 0000 		.long	semaphore+4
 2770 012d 22        		.byte	0x22
 2771 012e 06        		.byte	0x6
 2772 012f 44        		.byte	0x44
 2773 0130 1E        		.byte	0x1e
 2774 0131 03        		.byte	0x3
 2775 0132 0000 0000 		.long	task_tab
 2776 0136 22        		.byte	0x22
 2777 0137 9F        		.byte	0x9f
 2778 0138 04        		.byte	0x4
 2779 0139 C605      		.uleb128 .LVL61-.Ltext0
 2780 013b CA05      		.uleb128 .LVL62-.Ltext0
 2781 013d 0B        		.uleb128 0xb
 2782 013e 70        		.byte	0x70
 2783 013f 00        		.sleb128 0
 2784 0140 44        		.byte	0x44
 2785 0141 1E        		.byte	0x1e
 2786 0142 03        		.byte	0x3
 2787 0143 0000 0000 		.long	task_tab
 2788 0147 22        		.byte	0x22
 2789 0148 9F        		.byte	0x9f
 2790 0149 04        		.byte	0x4
 2791 014a CA05      		.uleb128 .LVL62-.Ltext0
 2792 014c EC05      		.uleb128 .LVL63-.Ltext0
 2793 014e 0B        		.uleb128 0xb
 2794 014f 71        		.byte	0x71
 2795 0150 00        		.sleb128 0
 2796 0151 44        		.byte	0x44
 2797 0152 1E        		.byte	0x1e
 2798 0153 03        		.byte	0x3
 2799 0154 0000 0000 		.long	task_tab
 2800 0158 22        		.byte	0x22
 2801 0159 9F        		.byte	0x9f
 2802 015a 00        		.byte	0
 2803               	.LVUS26:
 2804 015b 04        		.uleb128 .LVU219
 2805 015c 01        		.uleb128 .LVU231
 2806 015d 05        		.uleb128 .LVU259
 2807 015e 01        		.uleb128 .LVU265
 2808               	.LLST26:


 2809 015f 04        		.byte	0x4
 2810 0160 FC04      		.uleb128 .LVL54-.Ltext0
 2811 0162 9C05      		.uleb128 .LVL57-.Ltext0
 2812 0164 06        		.uleb128 0x6
 2813 0165 03        		.byte	0x3
 2814 0166 0000 0000 		.long	ready
 2815 016a 9F        		.byte	0x9f
 2816 016b 04        		.byte	0x4
 2817 016c F005      		.uleb128 .LVL64-.Ltext0
 2818 016e F805      		.uleb128 .LVL66-.Ltext0
 2819 0170 06        		.uleb128 0x6
 2820 0171 03        		.byte	0x3
 2821 0172 0000 0000 		.long	ready
 2822 0176 9F        		.byte	0x9f
 2823 0177 00        		.byte	0
 2824               	.LVUS27:
 2825 0178 00        		.uleb128 .LVU222
 2826 0179 01        		.uleb128 .LVU231
 2827 017a 00        		.uleb128 .LVU262
 2828 017b 01        		.uleb128 .LVU265
 2829               	.LLST27:
 2830 017c 04        		.byte	0x4
 2831 017d 8205      		.uleb128 .LVL55-.Ltext0
 2832 017f 9C05      		.uleb128 .LVL57-.Ltext0
 2833 0181 01        		.uleb128 0x1
 2834 0182 51        		.byte	0x51
 2835 0183 04        		.byte	0x4
 2836 0184 F605      		.uleb128 .LVL65-.Ltext0
 2837 0186 F805      		.uleb128 .LVL66-.Ltext0
 2838 0188 01        		.uleb128 0x1
 2839 0189 51        		.byte	0x51
 2840 018a 00        		.byte	0
 2841               	.LVUS28:
 2842 018b 01        		.uleb128 .LVU225
 2843 018c 00        		.uleb128 .LVU237
 2844               	.LLST28:
 2845 018d 04        		.byte	0x4
 2846 018e 8405      		.uleb128 .LVL56-.Ltext0
 2847 0190 A905      		.uleb128 .LVL58-1-.Ltext0
 2848 0192 0B        		.uleb128 0xb
 2849 0193 71        		.byte	0x71
 2850 0194 00        		.sleb128 0
 2851 0195 44        		.byte	0x44
 2852 0196 1E        		.byte	0x1e
 2853 0197 03        		.byte	0x3
 2854 0198 0000 0000 		.long	task_tab
 2855 019c 22        		.byte	0x22
 2856 019d 9F        		.byte	0x9f
 2857 019e 00        		.byte	0
 2858               	.LVUS10:
 2859 019f 02        		.uleb128 .LVU122
 2860 01a0 02        		.uleb128 .LVU135
 2861               	.LLST10:
 2862 01a1 04        		.byte	0x4
 2863 01a2 F202      		.uleb128 .LVL30-.Ltext0
 2864 01a4 9403      		.uleb128 .LVL33-.Ltext0
 2865 01a6 06        		.uleb128 0x6


 2866 01a7 03        		.byte	0x3
 2867 01a8 0000 0000 		.long	ready
 2868 01ac 9F        		.byte	0x9f
 2869 01ad 00        		.byte	0
 2870               	.LVUS11:
 2871 01ae 00        		.uleb128 .LVU125
 2872 01af 02        		.uleb128 .LVU135
 2873               	.LLST11:
 2874 01b0 04        		.byte	0x4
 2875 01b1 F802      		.uleb128 .LVL31-.Ltext0
 2876 01b3 9403      		.uleb128 .LVL33-.Ltext0
 2877 01b5 01        		.uleb128 0x1
 2878 01b6 50        		.byte	0x50
 2879 01b7 00        		.byte	0
 2880               	.LVUS12:
 2881 01b8 01        		.uleb128 .LVU128
 2882 01b9 00        		.uleb128 .LVU133
 2883               	.LLST12:
 2884 01ba 04        		.byte	0x4
 2885 01bb FA02      		.uleb128 .LVL32-.Ltext0
 2886 01bd 9403      		.uleb128 .LVL33-.Ltext0
 2887 01bf 0B        		.uleb128 0xb
 2888 01c0 70        		.byte	0x70
 2889 01c1 00        		.sleb128 0
 2890 01c2 44        		.byte	0x44
 2891 01c3 1E        		.byte	0x1e
 2892 01c4 03        		.byte	0x3
 2893 01c5 0000 0000 		.long	task_tab
 2894 01c9 22        		.byte	0x22
 2895 01ca 9F        		.byte	0x9f
 2896 01cb 00        		.byte	0
 2897               	.LVUS1:
 2898 01cc 02        		.uleb128 .LVU45
 2899 01cd 00        		.uleb128 .LVU47
 2900 01ce 00        		.uleb128 .LVU47
 2901 01cf 00        		.uleb128 0
 2902               	.LLST1:
 2903 01d0 04        		.byte	0x4
 2904 01d1 60        		.uleb128 .LVL7-.Ltext0
 2905 01d2 68        		.uleb128 .LVL8-.Ltext0
 2906 01d3 02        		.uleb128 0x2
 2907 01d4 31        		.byte	0x31
 2908 01d5 9F        		.byte	0x9f
 2909 01d6 04        		.byte	0x4
 2910 01d7 68        		.uleb128 .LVL8-.Ltext0
 2911 01d8 B002      		.uleb128 .LFE4-.Ltext0
 2912 01da 01        		.uleb128 0x1
 2913 01db 51        		.byte	0x51
 2914 01dc 00        		.byte	0
 2915               	.LVUS2:
 2916 01dd 01        		.uleb128 .LVU59
 2917 01de 01        		.uleb128 .LVU72
 2918               	.LLST2:
 2919 01df 04        		.byte	0x4
 2920 01e0 A801      		.uleb128 .LVL10-.Ltext0
 2921 01e2 CA01      		.uleb128 .LVL14-.Ltext0
 2922 01e4 05        		.uleb128 0x5


 2923 01e5 03        		.byte	0x3
 2924 01e6 0000 0000 		.long	new_task
 2925 01ea 00        		.byte	0
 2926               	.LVUS3:
 2927 01eb 00        		.uleb128 .LVU62
 2928 01ec 01        		.uleb128 .LVU63
 2929 01ed 01        		.uleb128 .LVU63
 2930 01ee 01        		.uleb128 .LVU68
 2931 01ef 01        		.uleb128 .LVU68
 2932 01f0 02        		.uleb128 .LVU69
 2933 01f1 02        		.uleb128 .LVU69
 2934 01f2 03        		.uleb128 .LVU70
 2935 01f3 03        		.uleb128 .LVU70
 2936 01f4 01        		.uleb128 .LVU72
 2937               	.LLST3:
 2938 01f5 04        		.byte	0x4
 2939 01f6 B601      		.uleb128 .LVL11-.Ltext0
 2940 01f8 B601      		.uleb128 .LVL11-.Ltext0
 2941 01fa 01        		.uleb128 0x1
 2942 01fb 5A        		.byte	0x5a
 2943 01fc 04        		.byte	0x4
 2944 01fd B601      		.uleb128 .LVL11-.Ltext0
 2945 01ff C001      		.uleb128 .LVL13-.Ltext0
 2946 0201 03        		.uleb128 0x3
 2947 0202 7A        		.byte	0x7a
 2948 0203 7C        		.sleb128 -4
 2949 0204 9F        		.byte	0x9f
 2950 0205 04        		.byte	0x4
 2951 0206 C001      		.uleb128 .LVL13-.Ltext0
 2952 0208 C001      		.uleb128 .LVL13-.Ltext0
 2953 020a 03        		.uleb128 0x3
 2954 020b 7A        		.byte	0x7a
 2955 020c 7A        		.sleb128 -6
 2956 020d 9F        		.byte	0x9f
 2957 020e 04        		.byte	0x4
 2958 020f C001      		.uleb128 .LVL13-.Ltext0
 2959 0211 C001      		.uleb128 .LVL13-.Ltext0
 2960 0213 04        		.uleb128 0x4
 2961 0214 7A        		.byte	0x7a
 2962 0215 BE7F      		.sleb128 -66
 2963 0217 9F        		.byte	0x9f
 2964 0218 04        		.byte	0x4
 2965 0219 C001      		.uleb128 .LVL13-.Ltext0
 2966 021b CA01      		.uleb128 .LVL14-.Ltext0
 2967 021d 04        		.uleb128 0x4
 2968 021e 7A        		.byte	0x7a
 2969 021f BA7F      		.sleb128 -70
 2970 0221 9F        		.byte	0x9f
 2971 0222 00        		.byte	0
 2972               	.LVUS4:
 2973 0223 01        		.uleb128 .LVU65
 2974 0224 02        		.uleb128 .LVU66
 2975 0225 02        		.uleb128 .LVU66
 2976 0226 00        		.uleb128 .LVU73
 2977 0227 00        		.uleb128 .LVU73
 2978 0228 00        		.uleb128 .LVU82
 2979 0229 00        		.uleb128 .LVU82


 2980 022a 00        		.uleb128 .LVU83
 2981 022b 00        		.uleb128 .LVU83
 2982 022c 00        		.uleb128 .LVU102
 2983 022d 00        		.uleb128 .LVU102
 2984 022e 00        		.uleb128 0
 2985               	.LLST4:
 2986 022f 04        		.byte	0x4
 2987 0230 BC01      		.uleb128 .LVL12-.Ltext0
 2988 0232 BC01      		.uleb128 .LVL12-.Ltext0
 2989 0234 03        		.uleb128 0x3
 2990 0235 7A        		.byte	0x7a
 2991 0236 7C        		.sleb128 -4
 2992 0237 9F        		.byte	0x9f
 2993 0238 04        		.byte	0x4
 2994 0239 BC01      		.uleb128 .LVL12-.Ltext0
 2995 023b CE01      		.uleb128 .LVL15-.Ltext0
 2996 023d 03        		.uleb128 0x3
 2997 023e 7A        		.byte	0x7a
 2998 023f 7A        		.sleb128 -6
 2999 0240 9F        		.byte	0x9f
 3000 0241 04        		.byte	0x4
 3001 0242 CE01      		.uleb128 .LVL15-.Ltext0
 3002 0244 E801      		.uleb128 .LVL18-.Ltext0
 3003 0246 04        		.uleb128 0x4
 3004 0247 7A        		.byte	0x7a
 3005 0248 C000      		.sleb128 64
 3006 024a 9F        		.byte	0x9f
 3007 024b 04        		.byte	0x4
 3008 024c E801      		.uleb128 .LVL18-.Ltext0
 3009 024e EA01      		.uleb128 .LVL19-.Ltext0
 3010 0250 15        		.uleb128 0x15
 3011 0251 71        		.byte	0x71
 3012 0252 00        		.sleb128 0
 3013 0253 71        		.byte	0x71
 3014 0254 00        		.sleb128 0
 3015 0255 22        		.byte	0x22
 3016 0256 31        		.byte	0x31
 3017 0257 24        		.byte	0x24
 3018 0258 71        		.byte	0x71
 3019 0259 00        		.sleb128 0
 3020 025a 22        		.byte	0x22
 3021 025b 32        		.byte	0x32
 3022 025c 24        		.byte	0x24
 3023 025d 79        		.byte	0x79
 3024 025e 00        		.sleb128 0
 3025 025f 22        		.byte	0x22
 3026 0260 23        		.byte	0x23
 3027 0261 04        		.uleb128 0x4
 3028 0262 06        		.byte	0x6
 3029 0263 23        		.byte	0x23
 3030 0264 40        		.uleb128 0x40
 3031 0265 9F        		.byte	0x9f
 3032 0266 04        		.byte	0x4
 3033 0267 EA01      		.uleb128 .LVL19-.Ltext0
 3034 0269 AE02      		.uleb128 .LVL24-.Ltext0
 3035 026b 04        		.uleb128 0x4
 3036 026c 7A        		.byte	0x7a


 3037 026d C000      		.sleb128 64
 3038 026f 9F        		.byte	0x9f
 3039 0270 04        		.byte	0x4
 3040 0271 AE02      		.uleb128 .LVL24-.Ltext0
 3041 0273 B002      		.uleb128 .LFE4-.Ltext0
 3042 0275 15        		.uleb128 0x15
 3043 0276 71        		.byte	0x71
 3044 0277 00        		.sleb128 0
 3045 0278 71        		.byte	0x71
 3046 0279 00        		.sleb128 0
 3047 027a 22        		.byte	0x22
 3048 027b 31        		.byte	0x31
 3049 027c 24        		.byte	0x24
 3050 027d 71        		.byte	0x71
 3051 027e 00        		.sleb128 0
 3052 027f 22        		.byte	0x22
 3053 0280 32        		.byte	0x32
 3054 0281 24        		.byte	0x24
 3055 0282 79        		.byte	0x79
 3056 0283 00        		.sleb128 0
 3057 0284 22        		.byte	0x22
 3058 0285 23        		.byte	0x23
 3059 0286 04        		.uleb128 0x4
 3060 0287 06        		.byte	0x6
 3061 0288 23        		.byte	0x23
 3062 0289 40        		.uleb128 0x40
 3063 028a 9F        		.byte	0x9f
 3064 028b 00        		.byte	0
 3065               	.LVUS6:
 3066 028c 01        		.uleb128 .LVU75
 3067 028d 00        		.uleb128 .LVU79
 3068 028e 00        		.uleb128 .LVU79
 3069 028f 00        		.uleb128 0
 3070               	.LLST6:
 3071 0290 04        		.byte	0x4
 3072 0291 D201      		.uleb128 .LVL16-.Ltext0
 3073 0293 DE01      		.uleb128 .LVL17-.Ltext0
 3074 0295 05        		.uleb128 0x5
 3075 0296 03        		.byte	0x3
 3076 0297 0000 0000 		.long	new_task
 3077 029b 04        		.byte	0x4
 3078 029c DE01      		.uleb128 .LVL17-.Ltext0
 3079 029e B002      		.uleb128 .LFE4-.Ltext0
 3080 02a0 01        		.uleb128 0x1
 3081 02a1 51        		.byte	0x51
 3082 02a2 00        		.byte	0
 3083               	.LVUS7:
 3084 02a3 01        		.uleb128 .LVU84
 3085 02a4 00        		.uleb128 .LVU87
 3086 02a5 00        		.uleb128 .LVU87
 3087 02a6 01        		.uleb128 .LVU90
 3088 02a7 01        		.uleb128 .LVU90
 3089 02a8 00        		.uleb128 .LVU94
 3090 02a9 00        		.uleb128 .LVU94
 3091 02aa 00        		.uleb128 .LVU97
 3092               	.LLST7:
 3093 02ab 04        		.byte	0x4


 3094 02ac EA01      		.uleb128 .LVL19-.Ltext0
 3095 02ae FA01      		.uleb128 .LVL20-.Ltext0
 3096 02b0 0B        		.uleb128 0xb
 3097 02b1 78        		.byte	0x78
 3098 02b2 00        		.sleb128 0
 3099 02b3 44        		.byte	0x44
 3100 02b4 1E        		.byte	0x1e
 3101 02b5 03        		.byte	0x3
 3102 02b6 0000 0000 		.long	task_tab
 3103 02ba 22        		.byte	0x22
 3104 02bb 9F        		.byte	0x9f
 3105 02bc 04        		.byte	0x4
 3106 02bd FA01      		.uleb128 .LVL20-.Ltext0
 3107 02bf 8002      		.uleb128 .LVL21-.Ltext0
 3108 02c1 0F        		.uleb128 0xf
 3109 02c2 03        		.byte	0x3
 3110 02c3 0000 0000 		.long	ready
 3111 02c7 06        		.byte	0x6
 3112 02c8 44        		.byte	0x44
 3113 02c9 1E        		.byte	0x1e
 3114 02ca 03        		.byte	0x3
 3115 02cb 0000 0000 		.long	task_tab
 3116 02cf 22        		.byte	0x22
 3117 02d0 9F        		.byte	0x9f
 3118 02d1 04        		.byte	0x4
 3119 02d2 8002      		.uleb128 .LVL21-.Ltext0
 3120 02d4 8402      		.uleb128 .LVL22-.Ltext0
 3121 02d6 0B        		.uleb128 0xb
 3122 02d7 70        		.byte	0x70
 3123 02d8 00        		.sleb128 0
 3124 02d9 44        		.byte	0x44
 3125 02da 1E        		.byte	0x1e
 3126 02db 03        		.byte	0x3
 3127 02dc 0000 0000 		.long	task_tab
 3128 02e0 22        		.byte	0x22
 3129 02e1 9F        		.byte	0x9f
 3130 02e2 04        		.byte	0x4
 3131 02e3 8402      		.uleb128 .LVL22-.Ltext0
 3132 02e5 A002      		.uleb128 .LVL23-.Ltext0
 3133 02e7 0B        		.uleb128 0xb
 3134 02e8 78        		.byte	0x78
 3135 02e9 00        		.sleb128 0
 3136 02ea 44        		.byte	0x44
 3137 02eb 1E        		.byte	0x1e
 3138 02ec 03        		.byte	0x3
 3139 02ed 0000 0000 		.long	task_tab
 3140 02f1 22        		.byte	0x22
 3141 02f2 9F        		.byte	0x9f
 3142 02f3 00        		.byte	0
 3143               	.LVUS0:
 3144 02f4 03        		.uleb128 .LVU3
 3145 02f5 00        		.uleb128 .LVU4
 3146 02f6 01        		.uleb128 .LVU21
 3147 02f7 01        		.uleb128 .LVU27
 3148 02f8 01        		.uleb128 .LVU27
 3149 02f9 01        		.uleb128 .LVU33
 3150 02fa 01        		.uleb128 .LVU33


 3151 02fb 01        		.uleb128 .LVU39
 3152 02fc 01        		.uleb128 .LVU39
 3153 02fd 00        		.uleb128 0
 3154               	.LLST0:
 3155 02fe 04        		.byte	0x4
 3156 02ff 00        		.uleb128 .LVL0-.Ltext0
 3157 0300 0C        		.uleb128 .LVL1-.Ltext0
 3158 0301 02        		.uleb128 0x2
 3159 0302 30        		.byte	0x30
 3160 0303 9F        		.byte	0x9f
 3161 0304 04        		.byte	0x4
 3162 0305 34        		.uleb128 .LVL2-.Ltext0
 3163 0306 42        		.uleb128 .LVL3-.Ltext0
 3164 0307 02        		.uleb128 0x2
 3165 0308 30        		.byte	0x30
 3166 0309 9F        		.byte	0x9f
 3167 030a 04        		.byte	0x4
 3168 030b 42        		.uleb128 .LVL3-.Ltext0
 3169 030c 4E        		.uleb128 .LVL4-.Ltext0
 3170 030d 02        		.uleb128 0x2
 3171 030e 31        		.byte	0x31
 3172 030f 9F        		.byte	0x9f
 3173 0310 04        		.byte	0x4
 3174 0311 4E        		.uleb128 .LVL4-.Ltext0
 3175 0312 5A        		.uleb128 .LVL5-.Ltext0
 3176 0313 02        		.uleb128 0x2
 3177 0314 32        		.byte	0x32
 3178 0315 9F        		.byte	0x9f
 3179 0316 04        		.byte	0x4
 3180 0317 5A        		.uleb128 .LVL5-.Ltext0
 3181 0318 5C        		.uleb128 .LFE3-.Ltext0
 3182 0319 02        		.uleb128 0x2
 3183 031a 33        		.byte	0x33
 3184 031b 9F        		.byte	0x9f
 3185 031c 00        		.byte	0
 3186               	.LVUS8:
 3187 031d 00        		.uleb128 .LVU107
 3188 031e 01        		.uleb128 .LVU108
 3189 031f 01        		.uleb128 .LVU108
 3190 0320 01        		.uleb128 .LVU114
 3191 0321 01        		.uleb128 .LVU114
 3192 0322 02        		.uleb128 .LVU115
 3193 0323 02        		.uleb128 .LVU115
 3194 0324 03        		.uleb128 .LVU116
 3195 0325 03        		.uleb128 .LVU116
 3196 0326 00        		.uleb128 .LVU119
 3197 0327 00        		.uleb128 .LVU119
 3198 0328 00        		.uleb128 0
 3199               	.LLST8:
 3200 0329 04        		.byte	0x4
 3201 032a C402      		.uleb128 .LVL26-.Ltext0
 3202 032c C402      		.uleb128 .LVL26-.Ltext0
 3203 032e 01        		.uleb128 0x1
 3204 032f 58        		.byte	0x58
 3205 0330 04        		.byte	0x4
 3206 0331 C402      		.uleb128 .LVL26-.Ltext0
 3207 0333 E002      		.uleb128 .LVL28-.Ltext0


 3208 0335 03        		.uleb128 0x3
 3209 0336 78        		.byte	0x78
 3210 0337 7C        		.sleb128 -4
 3211 0338 9F        		.byte	0x9f
 3212 0339 04        		.byte	0x4
 3213 033a E002      		.uleb128 .LVL28-.Ltext0
 3214 033c E002      		.uleb128 .LVL28-.Ltext0
 3215 033e 03        		.uleb128 0x3
 3216 033f 78        		.byte	0x78
 3217 0340 7A        		.sleb128 -6
 3218 0341 9F        		.byte	0x9f
 3219 0342 04        		.byte	0x4
 3220 0343 E002      		.uleb128 .LVL28-.Ltext0
 3221 0345 E002      		.uleb128 .LVL28-.Ltext0
 3222 0347 04        		.uleb128 0x4
 3223 0348 78        		.byte	0x78
 3224 0349 BE7F      		.sleb128 -66
 3225 034b 9F        		.byte	0x9f
 3226 034c 04        		.byte	0x4
 3227 034d E002      		.uleb128 .LVL28-.Ltext0
 3228 034f EE02      		.uleb128 .LVL29-.Ltext0
 3229 0351 04        		.uleb128 0x4
 3230 0352 78        		.byte	0x78
 3231 0353 BA7F      		.sleb128 -70
 3232 0355 9F        		.byte	0x9f
 3233 0356 04        		.byte	0x4
 3234 0357 EE02      		.uleb128 .LVL29-.Ltext0
 3235 0359 F202      		.uleb128 .LFE5-.Ltext0
 3236 035b 01        		.uleb128 0x1
 3237 035c 50        		.byte	0x50
 3238 035d 00        		.byte	0
 3239               	.LVUS9:
 3240 035e 01        		.uleb128 .LVU111
 3241 035f 02        		.uleb128 .LVU112
 3242 0360 02        		.uleb128 .LVU112
 3243 0361 00        		.uleb128 0
 3244               	.LLST9:
 3245 0362 04        		.byte	0x4
 3246 0363 DC02      		.uleb128 .LVL27-.Ltext0
 3247 0365 DC02      		.uleb128 .LVL27-.Ltext0
 3248 0367 03        		.uleb128 0x3
 3249 0368 78        		.byte	0x78
 3250 0369 7C        		.sleb128 -4
 3251 036a 9F        		.byte	0x9f
 3252 036b 04        		.byte	0x4
 3253 036c DC02      		.uleb128 .LVL27-.Ltext0
 3254 036e F202      		.uleb128 .LFE5-.Ltext0
 3255 0370 03        		.uleb128 0x3
 3256 0371 78        		.byte	0x78
 3257 0372 7A        		.sleb128 -6
 3258 0373 9F        		.byte	0x9f
 3259 0374 00        		.byte	0
 3260               	.LVUS13:
 3261 0375 01        		.uleb128 .LVU150
 3262 0376 00        		.uleb128 .LVU154
 3263 0377 00        		.uleb128 .LVU154
 3264 0378 01        		.uleb128 .LVU155


 3265 0379 01        		.uleb128 .LVU155
 3266 037a 00        		.uleb128 .LVU159
 3267 037b 00        		.uleb128 .LVU159
 3268 037c 00        		.uleb128 .LVU162
 3269               	.LLST13:
 3270 037d 04        		.byte	0x4
 3271 037e C403      		.uleb128 .LVL38-.Ltext0
 3272 0380 E003      		.uleb128 .LVL39-.Ltext0
 3273 0382 0B        		.uleb128 0xb
 3274 0383 71        		.byte	0x71
 3275 0384 00        		.sleb128 0
 3276 0385 44        		.byte	0x44
 3277 0386 1E        		.byte	0x1e
 3278 0387 03        		.byte	0x3
 3279 0388 0000 0000 		.long	task_tab
 3280 038c 22        		.byte	0x22
 3281 038d 9F        		.byte	0x9f
 3282 038e 04        		.byte	0x4
 3283 038f E003      		.uleb128 .LVL39-.Ltext0
 3284 0391 E003      		.uleb128 .LVL39-.Ltext0
 3285 0393 0D        		.uleb128 0xd
 3286 0394 91        		.byte	0x91
 3287 0395 70        		.sleb128 -16
 3288 0396 06        		.byte	0x6
 3289 0397 06        		.byte	0x6
 3290 0398 44        		.byte	0x44
 3291 0399 1E        		.byte	0x1e
 3292 039a 03        		.byte	0x3
 3293 039b 0000 0000 		.long	task_tab
 3294 039f 22        		.byte	0x22
 3295 03a0 9F        		.byte	0x9f
 3296 03a1 04        		.byte	0x4
 3297 03a2 E003      		.uleb128 .LVL39-.Ltext0
 3298 03a4 E403      		.uleb128 .LVL40-.Ltext0
 3299 03a6 0B        		.uleb128 0xb
 3300 03a7 70        		.byte	0x70
 3301 03a8 00        		.sleb128 0
 3302 03a9 44        		.byte	0x44
 3303 03aa 1E        		.byte	0x1e
 3304 03ab 03        		.byte	0x3
 3305 03ac 0000 0000 		.long	task_tab
 3306 03b0 22        		.byte	0x22
 3307 03b1 9F        		.byte	0x9f
 3308 03b2 04        		.byte	0x4
 3309 03b3 E403      		.uleb128 .LVL40-.Ltext0
 3310 03b5 8604      		.uleb128 .LVL41-.Ltext0
 3311 03b7 0B        		.uleb128 0xb
 3312 03b8 71        		.byte	0x71
 3313 03b9 00        		.sleb128 0
 3314 03ba 44        		.byte	0x44
 3315 03bb 1E        		.byte	0x1e
 3316 03bc 03        		.byte	0x3
 3317 03bd 0000 0000 		.long	task_tab
 3318 03c1 22        		.byte	0x22
 3319 03c2 9F        		.byte	0x9f
 3320 03c3 00        		.byte	0
 3321               	.LVUS14:


 3322 03c4 00        		.uleb128 .LVU170
 3323 03c5 00        		.uleb128 0
 3324               	.LLST14:
 3325 03c6 04        		.byte	0x4
 3326 03c7 9404      		.uleb128 .LVL43-.Ltext0
 3327 03c9 AE04      		.uleb128 .LFE8-.Ltext0
 3328 03cb 01        		.uleb128 0x1
 3329 03cc 50        		.byte	0x50
 3330 03cd 00        		.byte	0
 3331               	.LVUS15:
 3332 03ce 01        		.uleb128 .LVU173
 3333 03cf 01        		.uleb128 .LVU179
 3334               	.LLST15:
 3335 03d0 04        		.byte	0x4
 3336 03d1 9604      		.uleb128 .LVL44-.Ltext0
 3337 03d3 AC04      		.uleb128 .LVL45-.Ltext0
 3338 03d5 0B        		.uleb128 0xb
 3339 03d6 70        		.byte	0x70
 3340 03d7 00        		.sleb128 0
 3341 03d8 44        		.byte	0x44
 3342 03d9 1E        		.byte	0x1e
 3343 03da 03        		.byte	0x3
 3344 03db 0000 0000 		.long	task_tab
 3345 03df 22        		.byte	0x22
 3346 03e0 9F        		.byte	0x9f
 3347 03e1 00        		.byte	0
 3348               	.LVUS17:
 3349 03e2 02        		.uleb128 .LVU182
 3350 03e3 01        		.uleb128 .LVU194
 3351 03e4 00        		.uleb128 .LVU198
 3352 03e5 01        		.uleb128 .LVU199
 3353               	.LLST17:
 3354 03e6 04        		.byte	0x4
 3355 03e7 AE04      		.uleb128 .LVL46-.Ltext0
 3356 03e9 D004      		.uleb128 .LVL49-.Ltext0
 3357 03eb 06        		.uleb128 0x6
 3358 03ec 03        		.byte	0x3
 3359 03ed 0000 0000 		.long	ready
 3360 03f1 9F        		.byte	0x9f
 3361 03f2 04        		.byte	0x4
 3362 03f3 D804      		.uleb128 .LVL50-.Ltext0
 3363 03f5 D804      		.uleb128 .LVL50-.Ltext0
 3364 03f7 06        		.uleb128 0x6
 3365 03f8 03        		.byte	0x3
 3366 03f9 0000 0000 		.long	ready
 3367 03fd 9F        		.byte	0x9f
 3368 03fe 00        		.byte	0
 3369               	.LVUS18:
 3370 03ff 00        		.uleb128 .LVU185
 3371 0400 01        		.uleb128 .LVU194
 3372 0401 00        		.uleb128 .LVU198
 3373 0402 01        		.uleb128 .LVU199
 3374               	.LLST18:
 3375 0403 04        		.byte	0x4
 3376 0404 B404      		.uleb128 .LVL47-.Ltext0
 3377 0406 D004      		.uleb128 .LVL49-.Ltext0
 3378 0408 01        		.uleb128 0x1


 3379 0409 50        		.byte	0x50
 3380 040a 04        		.byte	0x4
 3381 040b D804      		.uleb128 .LVL50-.Ltext0
 3382 040d D804      		.uleb128 .LVL50-.Ltext0
 3383 040f 01        		.uleb128 0x1
 3384 0410 50        		.byte	0x50
 3385 0411 00        		.byte	0
 3386               	.LVUS19:
 3387 0412 01        		.uleb128 .LVU188
 3388 0413 00        		.uleb128 .LVU198
 3389               	.LLST19:
 3390 0414 04        		.byte	0x4
 3391 0415 B604      		.uleb128 .LVL48-.Ltext0
 3392 0417 D804      		.uleb128 .LVL50-.Ltext0
 3393 0419 0B        		.uleb128 0xb
 3394 041a 70        		.byte	0x70
 3395 041b 00        		.sleb128 0
 3396 041c 44        		.byte	0x44
 3397 041d 1E        		.byte	0x1e
 3398 041e 03        		.byte	0x3
 3399 041f 0000 0000 		.long	task_tab
 3400 0423 22        		.byte	0x22
 3401 0424 9F        		.byte	0x9f
 3402 0425 00        		.byte	0
 3403               	.Ldebug_loc3:
 3404               		.section	.debug_aranges,"",@progbits
 3405 0000 0000 001C 		.long	0x1c
 3406 0004 0002      		.word	0x2
 3407 0006 0000 0000 		.long	.Ldebug_info0
 3408 000a 04        		.byte	0x4
 3409 000b 00        		.byte	0
 3410 000c 0000      		.word	0
 3411 000e 0000      		.word	0
 3412 0010 0000 0000 		.long	.Ltext0
 3413 0014 0000 03DA 		.long	.Letext0-.Ltext0
 3414 0018 0000 0000 		.long	0
 3415 001c 0000 0000 		.long	0
 3416               		.section	.debug_rnglists,"",@progbits
 3417               	.Ldebug_ranges0:
 3418 0000 0000 004A 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 3419               	.Ldebug_ranges2:
 3420 0004 0005      		.word	0x5
 3421 0006 04        		.byte	0x4
 3422 0007 00        		.byte	0
 3423 0008 0000 0000 		.long	0
 3424               	.LLRL5:
 3425 000c 04        		.byte	0x4
 3426 000d D201      		.uleb128 .LBB24-.Ltext0
 3427 000f E401      		.uleb128 .LBE24-.Ltext0
 3428 0011 04        		.byte	0x4
 3429 0012 EA01      		.uleb128 .LBB28-.Ltext0
 3430 0014 AA02      		.uleb128 .LBE28-.Ltext0
 3431 0016 00        		.byte	0
 3432               	.LLRL16:
 3433 0017 04        		.byte	0x4
 3434 0018 AE04      		.uleb128 .LBB37-.Ltext0
 3435 001a D004      		.uleb128 .LBE37-.Ltext0


 3436 001c 04        		.byte	0x4
 3437 001d D804      		.uleb128 .LBB41-.Ltext0
 3438 001f D804      		.uleb128 .LBE41-.Ltext0
 3439 0021 00        		.byte	0
 3440               	.LLRL20:
 3441 0022 04        		.byte	0x4
 3442 0023 E204      		.uleb128 .LBB50-.Ltext0
 3443 0025 FC04      		.uleb128 .LBE50-.Ltext0
 3444 0027 04        		.byte	0x4
 3445 0028 AA05      		.uleb128 .LBB62-.Ltext0
 3446 002a F005      		.uleb128 .LBE62-.Ltext0
 3447 002c 00        		.byte	0
 3448               	.LLRL24:
 3449 002d 04        		.byte	0x4
 3450 002e FC04      		.uleb128 .LBB54-.Ltext0
 3451 0030 A205      		.uleb128 .LBE54-.Ltext0
 3452 0032 04        		.byte	0x4
 3453 0033 F005      		.uleb128 .LBB63-.Ltext0
 3454 0035 FA05      		.uleb128 .LBE63-.Ltext0
 3455 0037 00        		.byte	0
 3456               	.LLRL25:
 3457 0038 04        		.byte	0x4
 3458 0039 FC04      		.uleb128 .LBB56-.Ltext0
 3459 003b 9C05      		.uleb128 .LBE56-.Ltext0
 3460 003d 04        		.byte	0x4
 3461 003e F005      		.uleb128 .LBB60-.Ltext0
 3462 0040 F805      		.uleb128 .LBE60-.Ltext0
 3463 0042 00        		.byte	0
 3464               	.LLRL33:
 3465 0043 04        		.byte	0x4
 3466 0044 D406      		.uleb128 .LBB67-.Ltext0
 3467 0046 E206      		.uleb128 .LBE67-.Ltext0
 3468 0048 04        		.byte	0x4
 3469 0049 E606      		.uleb128 .LBB71-.Ltext0
 3470 004b AC07      		.uleb128 .LBE71-.Ltext0
 3471 004d 00        		.byte	0
 3472               	.Ldebug_ranges3:
 3473               		.section	.debug_line,"",@progbits
 3474               	.Ldebug_line0:
 3475 0000 0000 0577 		.section	.debug_str,"MS",@progbits,1
 3475      0003 0000 
 3475      0037 0201 
 3475      FB0E 0D00 
 3475      0101 0101 
 3476               	.LASF26:
 3477 0000 7374 6163 		.string	"stacks"
 3477      6B73 00
 3478               	.LASF19:
 3479 0007 6E65 7874 		.string	"next"
 3479      00
 3480               	.LASF47:
 3481 000c 696E 745F 		.string	"int_ssp"
 3481      7373 7000 
 3482               	.LASF54:
 3483 0014 6D74 6B5F 		.string	"mtk_c.c"
 3483      632E 6300 
 3484               	.LASF32:


 3485 001c 6669 7273 		.string	"first_task"
 3485      745F 7461 
 3485      736B 00
 3486               	.LASF11:
 3487 0027 636F 756E 		.string	"count"
 3487      7400 
 3488               	.LASF16:
 3489 002d 7374 6163 		.string	"stack_ptr"
 3489      6B5F 7074 
 3489      7200 
 3490               	.LASF34:
 3491 0037 7076 5F68 		.string	"pv_handler"
 3491      616E 646C 
 3491      6572 00
 3492               	.LASF20:
 3493 0042 5443 425F 		.string	"TCB_TYPE"
 3493      5459 5045 
 3493      00
 3494               	.LASF18:
 3495 004b 7374 6174 		.string	"status"
 3495      7573 00
 3496               	.LASF28:
 3497 0052 6E65 775F 		.string	"new_task"
 3497      7461 736B 
 3497      00
 3498               	.LASF46:
 3499 005b 696E 6974 		.string	"init_stack"
 3499      5F73 7461 
 3499      636B 00
 3500               	.LASF27:
 3501 0066 6375 7272 		.string	"curr_task"
 3501      5F74 6173 
 3501      6B00 
 3502               	.LASF48:
 3503 0070 7368 6F72 		.string	"short_ssp"
 3503      745F 7373 
 3503      7000 
 3504               	.LASF58:
 3505 007a 5F5F 6275 		.string	"__builtin_puts"
 3505      696C 7469 
 3505      6E5F 7075 
 3505      7473 00
 3506               	.LASF49:
 3507 0089 7365 745F 		.string	"set_task"
 3507      7461 736B 
 3507      00
 3508               	.LASF1:
 3509 0092 756E 7369 		.string	"unsigned char"
 3509      676E 6564 
 3509      2063 6861 
 3509      7200 
 3510               	.LASF14:
 3511 00a0 5345 4D41 		.string	"SEMAPHORE_TYPE"
 3511      5048 4F52 
 3511      455F 5459 
 3511      5045 00
 3512               	.LASF55:


 3513 00af 2F68 6F6D 		.string	"/home/students/7527360469/\343\203\211\343\202\255\343\203\245\343\203\241\343\203\263\34
 3513      652F 7374 
 3513      7564 656E 
 3513      7473 2F37 
 3513      3532 3733 
 3514               	.LASF45:
 3515 00e8 7265 6D6F 		.string	"removeq"
 3515      7665 7100 
 3516               	.LASF5:
 3517 00f0 6C6F 6E67 		.string	"long unsigned int"
 3517      2075 6E73 
 3517      6967 6E65 
 3517      6420 696E 
 3517      7400 
 3518               	.LASF43:
 3519 0102 6164 6471 		.string	"addq"
 3519      00
 3520               	.LASF3:
 3521 0107 7368 6F72 		.string	"short unsigned int"
 3521      7420 756E 
 3521      7369 676E 
 3521      6564 2069 
 3521      6E74 00
 3522               	.LASF15:
 3523 011a 7461 736B 		.string	"task_addr"
 3523      5F61 6464 
 3523      7200 
 3524               	.LASF17:
 3525 0124 7072 696F 		.string	"priority"
 3525      7269 7479 
 3525      00
 3526               	.LASF21:
 3527 012d 7573 7461 		.string	"ustack"
 3527      636B 00
 3528               	.LASF24:
 3529 0134 7365 6D61 		.string	"semaphore"
 3529      7068 6F72 
 3529      6500 
 3530               	.LASF29:
 3531 013e 6E65 7874 		.string	"next_task"
 3531      5F74 6173 
 3531      6B00 
 3532               	.LASF2:
 3533 0148 7368 6F72 		.string	"short int"
 3533      7420 696E 
 3533      7400 
 3534               	.LASF31:
 3535 0152 7377 7463 		.string	"swtch"
 3535      6800 
 3536               	.LASF53:
 3537 0158 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 3537      4331 3720 
 3537      3131 2E34 
 3537      2E30 202D 
 3537      6D63 7075 
 3538               	.LASF9:
 3539 019c 756E 7369 		.string	"unsigned int"


 3539      676E 6564 
 3539      2069 6E74 
 3539      00
 3540               	.LASF37:
 3541 01a9 765F 626F 		.string	"v_body"
 3541      6479 00
 3542               	.LASF30:
 3543 01b0 7265 6164 		.string	"ready"
 3543      7900 
 3544               	.LASF7:
 3545 01b6 6C6F 6E67 		.string	"long long unsigned int"
 3545      206C 6F6E 
 3545      6720 756E 
 3545      7369 676E 
 3545      6564 2069 
 3546               	.LASF13:
 3547 01cd 5441 534B 		.string	"TASK_ID_TYPE"
 3547      5F49 445F 
 3547      5459 5045 
 3547      00
 3548               	.LASF12:
 3549 01da 7461 736B 		.string	"task_list"
 3549      5F6C 6973 
 3549      7400 
 3550               	.LASF41:
 3551 01e4 725F 6964 		.string	"r_id"
 3551      00
 3552               	.LASF52:
 3553 01e9 696E 6974 		.string	"init_kernel"
 3553      5F6B 6572 
 3553      6E65 6C00 
 3554               	.LASF8:
 3555 01f5 6C6F 6E67 		.string	"long double"
 3555      2064 6F75 
 3555      626C 6500 
 3556               	.LASF40:
 3557 0201 705F 626F 		.string	"p_body"
 3557      6479 00
 3558               	.LASF6:
 3559 0208 6C6F 6E67 		.string	"long long int"
 3559      206C 6F6E 
 3559      6720 696E 
 3559      7400 
 3560               	.LASF10:
 3561 0216 6368 6172 		.string	"char"
 3561      00
 3562               	.LASF42:
 3563 021b 7461 736B 		.string	"task_ptr"
 3563      5F70 7472 
 3563      00
 3564               	.LASF36:
 3565 0224 7761 6B65 		.string	"wakeup"
 3565      7570 00
 3566               	.LASF44:
 3567 022b 7175 655F 		.string	"que_ptr"
 3567      7074 7200 
 3568               	.LASF51:


 3569 0233 6265 6769 		.string	"begin_sch"
 3569      6E5F 7363 
 3569      6800 
 3570               	.LASF22:
 3571 023d 7373 7461 		.string	"sstack"
 3571      636B 00
 3572               	.LASF38:
 3573 0244 735F 6964 		.string	"s_id"
 3573      00
 3574               	.LASF4:
 3575 0249 6C6F 6E67 		.string	"long int"
 3575      2069 6E74 
 3575      00
 3576               	.LASF33:
 3577 0252 696E 6974 		.string	"init_timer"
 3577      5F74 696D 
 3577      6572 00
 3578               	.LASF57:
 3579 025d 7075 7473 		.string	"puts"
 3579      00
 3580               	.LASF35:
 3581 0262 7761 6B65 		.string	"wakeup_id"
 3581      7570 5F69 
 3581      6400 
 3582               	.LASF0:
 3583 026c 7369 676E 		.string	"signed char"
 3583      6564 2063 
 3583      6861 7200 
 3584               	.LASF23:
 3585 0278 5354 4143 		.string	"STACK_TYPE"
 3585      4B5F 5459 
 3585      5045 00
 3586               	.LASF39:
 3587 0283 736C 6565 		.string	"sleep"
 3587      7000 
 3588               	.LASF50:
 3589 0289 7573 6572 		.string	"usertask_ptr"
 3589      7461 736B 
 3589      5F70 7472 
 3589      00
 3590               	.LASF56:
 3591 0296 7363 6865 		.string	"sched"
 3591      6400 
 3592               	.LASF25:
 3593 029c 7461 736B 		.string	"task_tab"
 3593      5F74 6162 
 3593      00
 3594               		.ident	"GCC: (GNU) 11.4.0"




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	***************
  44               	**システムコール番号
  45               	***************
  46               	.equ SYSCALL_NUM_GETSTRING,     1
  47               	.equ SYSCALL_NUM_PUTSTRING,     2
  48               	.equ SYSCALL_NUM_RESET_TIMER,   3
  49               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.global outbyte
   3               	
   4               	.text
   5               	.even
   6               	
   7               	outbyte:
   8 0000 48E7 7040 		movem.l %d1-%d3/%a1, -(%SP)	/* STORE REGISTERS */


   9               	outbyte_loop:
  10               		/* OBTAIN ARGUMENTS TO DISPLAY */
  11               		/* By the stack storing above, */
  12               		/*     the values of 4 registers and PC re are stored */
  13               		/*     which means that, the value of stack pointer is decreased */
  14               		/* To execute GETSTRING, calculate the address where the actual data to display is stored */
  15               	
  16               		/* Add 3 bytes because the argument is stored begin sign-extended 4 bytes from 1 byte */
  17               		/* 23 [bytes] = 5 [registers] * 4 [bytes/register] + 3 [byte] */
  18               	
  19 0004 224F      		movea.l	%sp,   %a1			/* copy head address of stack pointer */
  20 0006 7417      		move.l	#23,   %d2			/* calculate the necessary address number to obtain the argument */
  21 0008 D3C2      		adda.l	%d2,   %a1			/* by summing, go to the target to display */
  22               	
  23 000a 13D1 0000 		move.b	(%a1), obDATA		/* copy data to obDATA */
  23      0000 
  24 0010 13F9 0000 		move.b obDATA, LED6
  24      0000 00D0 
  24      002D 
  25               	
  26 001a 7401      		move.l  #1,    %d2			/* go to the address of the argument */
  27 001c D3C2      		adda.l  %d2,   %a1			/* because the arg is 4 bytes long and stored just next to the obDATA */
  28               	
  29               		/* SYSCALL: PUTSTRING */
  30 001e 7002      		move.l #SYSCALL_NUM_PUTSTRING, %D0
  31 0020 2211      		move.l (%a1),  %D1         	| ch = fd
  32 0022 243C 0000 		move.l #obDATA, %D2       	| p  = #obDATA
  32      0000 
  33 0028 7601      		move.l #1, %D3          	| size = 1
  34 002a 4E40      		trap #0
  35               	
  36               		/* FLAG CHECK */
  37 002c 0C80 0000 		cmp.l #0, %d0				/* see if PUTSTRING is successful */
  37      0000 
  38 0032 6700 FFD0 		beq outbyte_loop			/* if false, retry */
  39               	
  40               		/* SUCCESS */
  41 0036 4CDF 020E 		movem.l (%SP)+, %d1-%d3/%a1 /* RESTORE REGISTERS */
  42 003a 4E75      		rts
  43               	        
  44               	.section .bss
  45               	.even
  46               	
  47               	.global obDATA
  48               	obDATA:
  49 0000 00        		.ds.b 1
  50 0001 00        		.even




   1               	#NO_APP
   2               		.file	"test3.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	runtime_clock
   8               		.type	runtime_clock, @function
   9               	runtime_clock:
  10               	.LFB5:
  11               		.file 1 "test3.c"
   1:test3.c       **** // what to do after:
   2:test3.c       **** // - x vertical, y horizontal
   3:test3.c       **** // - update client2
   4:test3.c       **** 
   5:test3.c       **** // escape characters definition
   6:test3.c       **** #define ESC "\x1b"
   7:test3.c       **** 
   8:test3.c       **** #define CURSORINVISIBLE ESC "[?25l"
   9:test3.c       **** #define CURSORVISIBLE ESC "[?25h"
  10:test3.c       **** 
  11:test3.c       **** #define SAVECURSORLOC ESC "7"
  12:test3.c       **** #define RETCURSORLOC ESC "8"
  13:test3.c       **** //
  14:test3.c       **** 
  15:test3.c       **** #include <stdarg.h>
  16:test3.c       **** #include <stdio.h>
  17:test3.c       **** #include <string.h>
  18:test3.c       **** #include <stdlib.h>
  19:test3.c       **** #include <stdbool.h>
  20:test3.c       **** #include <string.h>
  21:test3.c       **** #include "mtk_c.h"
  22:test3.c       **** 
  23:test3.c       **** #define MAX_STRING_SIZE 100
  24:test3.c       **** 
  25:test3.c       **** extern char inbyte(int);
  26:test3.c       **** 
  27:test3.c       **** // FILE descriptors for RS232C port
  28:test3.c       **** FILE *com0in;
  29:test3.c       **** FILE *com0out;
  30:test3.c       **** FILE *com1in;
  31:test3.c       **** FILE *com1out;
  32:test3.c       **** 
  33:test3.c       **** // global variables
  34:test3.c       **** int global_hour = 0, global_min = 0, global_sec = 0;
  35:test3.c       **** 
  36:test3.c       **** int clock_pos_x, clock_pos_y;
  37:test3.c       **** int chatlog_start_x, chatlog_start_y, chatlog_x, chatlog_y;
  38:test3.c       **** 
  39:test3.c       **** int chatlog_read_index = 0, chatlog_write_index = 0, chatlog_size = 0;
  40:test3.c       **** char chatlog_sender[1000][11] = {};
  41:test3.c       **** char chatlog[1000][101] = {};
  42:test3.c       **** //
  43:test3.c       **** 
  44:test3.c       **** 
  45:test3.c       **** void gotoxy(FILE* fd, int x, int y) {
  46:test3.c       **** 	fprintf(fd, "\033[%d;%dH", x, y);


  47:test3.c       **** }
  48:test3.c       **** 
  49:test3.c       **** void initPort() {
  50:test3.c       **** 	/*
  51:test3.c       **** 		Assign file descriptors for RS232C port.
  52:test3.c       **** 		args:
  53:test3.c       **** 			none
  54:test3.c       **** 		returns:
  55:test3.c       **** 			none
  56:test3.c       **** 	*/
  57:test3.c       **** 	
  58:test3.c       ****     com0in = fdopen(3, "r");
  59:test3.c       ****     if(com0in == NULL) {
  60:test3.c       ****         perror("com0in not open");
  61:test3.c       ****         exit(1);
  62:test3.c       ****     }
  63:test3.c       ****     com0out = fdopen(3, "w");
  64:test3.c       ****     if(com0out == NULL) {
  65:test3.c       ****         perror("com0out not open");
  66:test3.c       ****         exit(1);
  67:test3.c       ****     }
  68:test3.c       ****     
  69:test3.c       ****     return;			// for testing purpose
  70:test3.c       ****     
  71:test3.c       ****     com1in = fdopen(4, "r");
  72:test3.c       ****     if(com1in == NULL) {
  73:test3.c       ****         perror("com1in not open");
  74:test3.c       ****         exit(1);
  75:test3.c       ****     }
  76:test3.c       ****     com1out = fdopen(4, "w");
  77:test3.c       ****     if(com1out == NULL) {
  78:test3.c       ****         perror("com1out not open");
  79:test3.c       ****         exit(1);
  80:test3.c       ****     }
  81:test3.c       **** }
  82:test3.c       **** 
  83:test3.c       **** void runtime_clock() {
  12               		.loc 1 83 22 view -0
  13               		.cfi_startproc
  14 0000 48E7 203E 		movem.l #8254,-(%sp)
  15               		.cfi_def_cfa_offset 28
  16               		.cfi_offset 2, -28
  17               		.cfi_offset 10, -24
  18               		.cfi_offset 11, -20
  19               		.cfi_offset 12, -16
  20               		.cfi_offset 13, -12
  21               		.cfi_offset 14, -8
  84:test3.c       **** 	/*
  85:test3.c       **** 		Update the running time of the application
  86:test3.c       **** 		args:
  87:test3.c       **** 			none
  88:test3.c       **** 		returns:
  89:test3.c       **** 			none
  90:test3.c       **** 	*/
  91:test3.c       **** 	
  92:test3.c       **** 	// define clock hour, min, sec
  93:test3.c       **** 	const int MILISECONDDIVIDER = 100;


  22               		.loc 1 93 2 view .LVU1
  23               	.LVL0:
  94:test3.c       **** 	int runtime = 0, last_runtime = 0;
  24               		.loc 1 94 2 view .LVU2
  95:test3.c       **** 	int hour = 0, min = 0, sec = 0, milisec = 0;
  25               		.loc 1 95 2 view .LVU3
  96:test3.c       **** 	while(1) {
  26               		.loc 1 96 2 view .LVU4
  97:test3.c       **** 		P(0);
  27               		.loc 1 97 3 view .LVU5
  28 0004 42A7      		clr.l -(%sp)
  29               		.cfi_def_cfa_offset 32
  30 0006 4BF9 0000 		lea P,%a5
  30      0000 
  31 000c 4E95      		jsr (%a5)
  32               	.LVL1:
  98:test3.c       **** 		P(1);
  33               		.loc 1 98 3 view .LVU6
  34 000e 4878 0001 		pea 1.w
  35               		.cfi_def_cfa_offset 36
  36 0012 4E95      		jsr (%a5)
  37               	.LVL2:
  99:test3.c       **** 		
 100:test3.c       **** 		// time manipulation
 101:test3.c       **** 		milisec += (runtime - last_runtime) / MILISECONDDIVIDER + 1;
  38               		.loc 1 101 3 view .LVU7
 102:test3.c       ****         last_runtime = runtime;
  39               		.loc 1 102 9 view .LVU8
 103:test3.c       ****         if(milisec >= 100) {
  40               		.loc 1 103 9 view .LVU9
 104:test3.c       ****         	sec++;
 105:test3.c       ****         	milisec -= 100;
 106:test3.c       ****         }
 107:test3.c       **** 		if(sec >= 60) {
  41               		.loc 1 107 3 view .LVU10
  98:test3.c       **** 		
  42               		.loc 1 98 3 is_stmt 0 view .LVU11
  43 0014 508F      		addq.l #8,%sp
  44               		.cfi_def_cfa_offset 28
  95:test3.c       **** 	while(1) {
  45               		.loc 1 95 6 view .LVU12
  46 0016 7400      		moveq #0,%d2
 101:test3.c       ****         last_runtime = runtime;
  47               		.loc 1 101 11 view .LVU13
  48 0018 387C 0001 		move.w #1,%a4
  95:test3.c       **** 	while(1) {
  49               		.loc 1 95 25 view .LVU14
  50 001c 97CB      		sub.l %a3,%a3
  95:test3.c       **** 	while(1) {
  51               		.loc 1 95 16 view .LVU15
  52 001e 95CA      		sub.l %a2,%a2
  53 0020 4DF9 0000 		lea V,%a6
  53      0000 
  54               	.LVL3:
  55               	.L2:
 108:test3.c       **** 			min++;
 109:test3.c       **** 			sec -= 60;


 110:test3.c       **** 		}
 111:test3.c       **** 		if(min >= 60) {
  56               		.loc 1 111 3 is_stmt 1 view .LVU16
  57               		.loc 1 111 5 is_stmt 0 view .LVU17
  58 0026 723B      		moveq #59,%d1
  59 0028 B28A      		cmp.l %a2,%d1
  60 002a 6C06      		jge .L4
 112:test3.c       **** 			hour++;
  61               		.loc 1 112 4 is_stmt 1 view .LVU18
  62               		.loc 1 112 8 is_stmt 0 view .LVU19
  63 002c 5282      		addq.l #1,%d2
  64               	.LVL4:
 113:test3.c       **** 			min -= 60;
  65               		.loc 1 113 4 is_stmt 1 view .LVU20
  66               		.loc 1 113 8 is_stmt 0 view .LVU21
  67 002e 45EA FFC4 		lea (-60,%a2),%a2
  68               	.LVL5:
  69               	.L4:
 114:test3.c       **** 		}
 115:test3.c       ****         global_hour=hour, global_min=min, global_sec=sec;
  70               		.loc 1 115 9 is_stmt 1 view .LVU22
  71               		.loc 1 115 20 is_stmt 0 view .LVU23
  72 0032 23C2 0000 		move.l %d2,global_hour
  72      0000 
  73               		.loc 1 115 37 view .LVU24
  74 0038 23CA 0000 		move.l %a2,global_min
  74      0000 
  75               		.loc 1 115 53 view .LVU25
  76 003e 23CB 0000 		move.l %a3,global_sec
  76      0000 
 116:test3.c       ****         
 117:test3.c       **** 		V(1);
  77               		.loc 1 117 3 is_stmt 1 view .LVU26
  78 0044 4878 0001 		pea 1.w
  79               		.cfi_def_cfa_offset 32
  80 0048 4E96      		jsr (%a6)
  81               	.LVL6:
 118:test3.c       **** 		V(0);
  82               		.loc 1 118 3 view .LVU27
  83 004a 42A7      		clr.l -(%sp)
  84               		.cfi_def_cfa_offset 36
  85 004c 4E96      		jsr (%a6)
  86               	.LVL7:
 119:test3.c       **** 		
 120:test3.c       **** 		runtime++;
  87               		.loc 1 120 3 view .LVU28
  96:test3.c       **** 		P(0);
  88               		.loc 1 96 7 view .LVU29
  96:test3.c       **** 		P(0);
  89               		.loc 1 96 2 view .LVU30
  97:test3.c       **** 		P(1);
  90               		.loc 1 97 3 view .LVU31
  91 004e 42A7      		clr.l -(%sp)
  92               		.cfi_def_cfa_offset 40
  93 0050 4E95      		jsr (%a5)
  94               	.LVL8:
  98:test3.c       **** 		


  95               		.loc 1 98 3 view .LVU32
  96 0052 4878 0001 		pea 1.w
  97               		.cfi_def_cfa_offset 44
  98 0056 4E95      		jsr (%a5)
  99               	.LVL9:
 101:test3.c       ****         last_runtime = runtime;
 100               		.loc 1 101 3 view .LVU33
 101:test3.c       ****         last_runtime = runtime;
 101               		.loc 1 101 11 is_stmt 0 view .LVU34
 102 0058 200C      		move.l %a4,%d0
 103 005a 5280      		addq.l #1,%d0
 104               	.LVL10:
 102:test3.c       ****         if(milisec >= 100) {
 105               		.loc 1 102 9 is_stmt 1 view .LVU35
 103:test3.c       ****         	sec++;
 106               		.loc 1 103 9 view .LVU36
 103:test3.c       ****         	sec++;
 107               		.loc 1 103 11 is_stmt 0 view .LVU37
 108 005c 4FEF 0010 		lea (16,%sp),%sp
 109               		.cfi_def_cfa_offset 28
 110 0060 7263      		moveq #99,%d1
 111 0062 B280      		cmp.l %d0,%d1
 112 0064 6D10      		jlt .L5
 103:test3.c       ****         	sec++;
 113               		.loc 1 103 11 view .LVU38
 114 0066 2840      		move.l %d0,%a4
 115               	.LVL11:
 116               	.L6:
 107:test3.c       **** 			min++;
 117               		.loc 1 107 3 is_stmt 1 view .LVU39
 107:test3.c       **** 			min++;
 118               		.loc 1 107 5 is_stmt 0 view .LVU40
 119 0068 703B      		moveq #59,%d0
 120 006a B08B      		cmp.l %a3,%d0
 121 006c 6CB8      		jge .L2
 108:test3.c       **** 			sec -= 60;
 122               		.loc 1 108 4 is_stmt 1 view .LVU41
 108:test3.c       **** 			sec -= 60;
 123               		.loc 1 108 7 is_stmt 0 view .LVU42
 124 006e 528A      		addq.l #1,%a2
 125               	.LVL12:
 109:test3.c       **** 		}
 126               		.loc 1 109 4 is_stmt 1 view .LVU43
 109:test3.c       **** 		}
 127               		.loc 1 109 8 is_stmt 0 view .LVU44
 128 0070 47EB FFC4 		lea (-60,%a3),%a3
 129               	.LVL13:
 109:test3.c       **** 		}
 130               		.loc 1 109 8 view .LVU45
 131 0074 60B0      		jra .L2
 132               	.LVL14:
 133               	.L5:
 104:test3.c       ****         	milisec -= 100;
 134               		.loc 1 104 10 is_stmt 1 view .LVU46
 104:test3.c       ****         	milisec -= 100;
 135               		.loc 1 104 13 is_stmt 0 view .LVU47
 136 0076 528B      		addq.l #1,%a3


 137               	.LVL15:
 105:test3.c       ****         }
 138               		.loc 1 105 10 is_stmt 1 view .LVU48
 105:test3.c       ****         }
 139               		.loc 1 105 18 is_stmt 0 view .LVU49
 140 0078 49EC FF9D 		lea (-99,%a4),%a4
 141               	.LVL16:
 105:test3.c       ****         }
 142               		.loc 1 105 18 view .LVU50
 143 007c 60EA      		jra .L6
 144               		.cfi_endproc
 145               	.LFE5:
 146               		.size	runtime_clock, .-runtime_clock
 147               		.align	2
 148               		.globl	client2
 149               		.type	client2, @function
 150               	client2:
 151               	.LFB12:
 121:test3.c       **** 	}
 122:test3.c       **** }
 123:test3.c       **** 
 124:test3.c       **** void welcome_ui(int channel) {
 125:test3.c       **** 	/*
 126:test3.c       **** 		Display welcome message
 127:test3.c       **** 		args:
 128:test3.c       **** 			file_descriptor = the output file descriptor of the port
 129:test3.c       **** 		returns:
 130:test3.c       **** 			none
 131:test3.c       **** 	*/
 132:test3.c       **** 	
 133:test3.c       **** 	FILE* fd;
 134:test3.c       **** 	if(channel == 0) fd = com0out;
 135:test3.c       **** 	if(channel == 1) fd = com1out;
 136:test3.c       **** 	
 137:test3.c       **** 	// set terminal window size
 138:test3.c       **** 	unsigned int screen_height = 43, screen_width = 132;
 139:test3.c       **** 	fprintf(fd, "%s[8;%d;%dt", ESC, screen_height, screen_width);
 140:test3.c       **** 	
 141:test3.c       **** 	// clear the screen
 142:test3.c       **** 	fprintf(fd, "\033[2J");
 143:test3.c       **** 	
 144:test3.c       **** 	// move cursor to (1, 1)
 145:test3.c       **** 	fprintf(fd, "\033[1;1H");
 146:test3.c       **** 	
 147:test3.c       **** 	// disable cursor while drawing
 148:test3.c       **** 	fprintf(fd, "%s", CURSORINVISIBLE);
 149:test3.c       **** 	
 150:test3.c       **** 	// draw the welcome box
 151:test3.c       **** 	int welcome_box_size = 3;
 152:test3.c       **** 	fprintf(fd, "╔═══════════════════════════
 153:test3.c       **** 	fprintf(fd, "║ Welcome to Terminal Chat Box! ║\n");
 154:test3.c       **** 	fprintf(fd, "╚═══════════════════════════
 155:test3.c       **** 	
 156:test3.c       **** 	// draw the instruction box
 157:test3.c       **** 	int instruction_box_size = 5;
 158:test3.c       **** 	fprintf(fd, "------------------------------------------------------------------\n");
 159:test3.c       **** 	fprintf(fd, "Instruction:\n");


 160:test3.c       **** 	fprintf(fd, "- just input your message in dude!\n");
 161:test3.c       **** 	fprintf(fd, "- and make sure the message does not exceed 100 characters\n");
 162:test3.c       **** 	fprintf(fd, "------------------------------------------------------------------\n");
 163:test3.c       **** 	
 164:test3.c       **** 	// save coordinate to draw clock
 165:test3.c       **** 	fprintf(fd, "\n ** Current runtime \n");
 166:test3.c       **** 	clock_pos_x = welcome_box_size + instruction_box_size + 2;
 167:test3.c       **** 	clock_pos_y = 21;
 168:test3.c       **** 	
 169:test3.c       **** 	// print frame line
 170:test3.c       **** 	fprintf(fd, "##!!==//##!!==//##!!==//##!!==//##!!==//##!!==//##!!==//##!!==//##\n");
 171:test3.c       **** 	
 172:test3.c       **** 	// save coordinate to write chat log
 173:test3.c       **** 	chatlog_start_x = clock_pos_x + 2;
 174:test3.c       **** 	chatlog_start_y = 1;
 175:test3.c       **** 	// set chatlog pos
 176:test3.c       **** 	chatlog_x = chatlog_start_x;
 177:test3.c       **** 	chatlog_y = chatlog_start_y;
 178:test3.c       **** 	
 179:test3.c       **** 	// enable back cursor after drawing
 180:test3.c       **** 	fprintf(fd, "%s", CURSORVISIBLE);
 181:test3.c       **** }
 182:test3.c       **** 
 183:test3.c       **** void refresh_clock(FILE* fd) {
 184:test3.c       **** 	// refresh current runtime
 185:test3.c       **** 	gotoxy(fd, clock_pos_x, clock_pos_y);
 186:test3.c       **** 	fprintf(fd, "%02d:%02d:%02d", global_hour, global_min, global_sec);		// (10, 20)
 187:test3.c       **** }
 188:test3.c       **** 
 189:test3.c       **** void refresh_chat(FILE* fd) {
 190:test3.c       **** 	if(chatlog_read_index != chatlog_write_index) {
 191:test3.c       **** 		gotoxy(fd, chatlog_x, chatlog_y);
 192:test3.c       **** 		fprintf(fd, "| %s: %s", chatlog_sender[chatlog_read_index], chatlog[chatlog_read_index]);
 193:test3.c       **** 		
 194:test3.c       **** 		chatlog_x++;
 195:test3.c       **** 		chatlog_read_index++;
 196:test3.c       **** 	}
 197:test3.c       **** }
 198:test3.c       **** 
 199:test3.c       **** void draw_client_ui(int channel) {
 200:test3.c       **** 	/*
 201:test3.c       **** 		Draw the UI for each of the respective client
 202:test3.c       **** 		args:
 203:test3.c       **** 			file_descriptor = the output file descriptor of the port
 204:test3.c       **** 		returns:
 205:test3.c       **** 			none
 206:test3.c       **** 	*/
 207:test3.c       **** 	
 208:test3.c       **** 	FILE* fd;
 209:test3.c       **** 	if(channel == 0) fd = com0out;
 210:test3.c       **** 	if(channel == 1) fd = com1out;
 211:test3.c       **** 	
 212:test3.c       **** 	// disable cursor while drawing
 213:test3.c       **** 	fprintf(fd, "%s", CURSORINVISIBLE);
 214:test3.c       **** 	
 215:test3.c       **** 	// refresh clock
 216:test3.c       **** 	refresh_clock(fd);


 217:test3.c       **** 	
 218:test3.c       **** 	// refresh chatlog
 219:test3.c       **** 	refresh_chat(fd);
 220:test3.c       **** 	
 221:test3.c       **** 	// reposition cursor for input
 222:test3.c       **** 	gotoxy(fd, chatlog_x + 2, chatlog_y);
 223:test3.c       **** 	
 224:test3.c       **** 	// enable back cursor after drawing
 225:test3.c       **** 	fprintf(fd, "%s", CURSORVISIBLE);
 226:test3.c       **** }
 227:test3.c       **** 
 228:test3.c       **** void get_client_input(int channel) {
 229:test3.c       **** 	FILE* fd;
 230:test3.c       **** 	if(channel == 0) fd = com0out;
 231:test3.c       **** 	if(channel == 1) fd = com1out;
 232:test3.c       **** 	
 233:test3.c       **** 	char input_buffer[101];
 234:test3.c       **** 	int input_index = 0;
 235:test3.c       **** 	if (inbyte(fd)) {
 236:test3.c       **** 		// Input is available, use fscanf to read from com0in
 237:test3.c       **** 		char tmp;
 238:test3.c       **** 		fscanf(fd, "%c", &tmp);  // Read one character at a time
 239:test3.c       ****             
 240:test3.c       **** 		if (tmp == '\n') {
 241:test3.c       **** 			// End of input, process the message
 242:test3.c       **** 			input_buffer[input_index] = '\0';  					// Null-terminate the string
 243:test3.c       **** 			fprintf(fd, "Received message: %s\n", input_buffer);  	// Process message
 244:test3.c       ****                 
 245:test3.c       **** 			// Reset buffer index for the next message
 246:test3.c       **** 			input_index = 0;
 247:test3.c       **** 		} else {
 248:test3.c       **** 			// Store the character in the buffer
 249:test3.c       **** 			if (input_index < 100) {
 250:test3.c       **** 				input_buffer[input_index++] = tmp;
 251:test3.c       **** 			}
 252:test3.c       **** 		}
 253:test3.c       **** 	}
 254:test3.c       **** }
 255:test3.c       **** 
 256:test3.c       **** void client1() {
 257:test3.c       **** 	/*
 258:test3.c       **** 		Process the client1 related stuff
 259:test3.c       **** 		args:
 260:test3.c       **** 			none
 261:test3.c       **** 		returns:
 262:test3.c       **** 			none
 263:test3.c       **** 	*/
 264:test3.c       **** 	
 265:test3.c       **** 	//return;
 266:test3.c       **** 	
 267:test3.c       **** 	welcome_ui(0);
 268:test3.c       **** 	
 269:test3.c       **** 	// testing purpose
 270:test3.c       **** 	strcpy(chatlog_sender[0], "announcer");
 271:test3.c       **** 	strcpy(chatlog[0], "Hi your message starts here\n");
 272:test3.c       **** 	
 273:test3.c       **** 	char tmp;


 274:test3.c       **** 	
 275:test3.c       **** 	while(1) {
 276:test3.c       **** 		// draw the ui for client1
 277:test3.c       **** 		draw_client_ui(0);
 278:test3.c       **** 		
 279:test3.c       **** 		// use the pv stuff
 280:test3.c       **** 		P(0);
 281:test3.c       **** 		P(1);
 282:test3.c       **** 			get_client_input(0);
 283:test3.c       **** 			// input the string into chatlog
 284:test3.c       **** 			// strcpy(chatlog_sender[chatlog_write_index], "Client1");
 285:test3.c       **** 			// strcpy(chatlog[chatlog_write_index], tmp);
 286:test3.c       **** 			// chatlog_write_index++;
 287:test3.c       **** 		V(1);
 288:test3.c       **** 		V(0);	
 289:test3.c       **** 	}
 290:test3.c       **** }
 291:test3.c       **** 
 292:test3.c       **** void client2() {
 152               		.loc 1 292 16 is_stmt 1 view -0
 153               		.cfi_startproc
 154 007e 2F0B      		move.l %a3,-(%sp)
 155               		.cfi_def_cfa_offset 8
 156               		.cfi_offset 11, -8
 157 0080 2F0A      		move.l %a2,-(%sp)
 158               		.cfi_def_cfa_offset 12
 159               		.cfi_offset 10, -12
 160 0082 47F9 0000 		lea P,%a3
 160      0000 
 161 0088 45F9 0000 		lea V,%a2
 161      0000 
 162               	.L10:
 293:test3.c       **** 	/*
 294:test3.c       **** 		Process the client2 related stuff
 295:test3.c       **** 		args:
 296:test3.c       **** 			none
 297:test3.c       **** 		returns:
 298:test3.c       **** 			none
 299:test3.c       **** 	*/
 300:test3.c       **** 
 301:test3.c       **** 	//return;
 302:test3.c       **** 	
 303:test3.c       **** 	while(1) {
 163               		.loc 1 303 2 discriminator 1 view .LVU52
 304:test3.c       **** 		P(0);
 164               		.loc 1 304 3 discriminator 1 view .LVU53
 165 008e 42A7      		clr.l -(%sp)
 166               		.cfi_def_cfa_offset 16
 167 0090 4E93      		jsr (%a3)
 168               	.LVL17:
 305:test3.c       **** 		P(1);
 169               		.loc 1 305 3 discriminator 1 view .LVU54
 170 0092 4878 0001 		pea 1.w
 171               		.cfi_def_cfa_offset 20
 172 0096 4E93      		jsr (%a3)
 173               	.LVL18:
 306:test3.c       **** 		


 307:test3.c       **** 		V(1);
 174               		.loc 1 307 3 discriminator 1 view .LVU55
 175 0098 4878 0001 		pea 1.w
 176               		.cfi_def_cfa_offset 24
 177 009c 4E92      		jsr (%a2)
 178               	.LVL19:
 308:test3.c       **** 		V(0);
 179               		.loc 1 308 3 discriminator 1 view .LVU56
 180 009e 42A7      		clr.l -(%sp)
 181               		.cfi_def_cfa_offset 28
 182 00a0 4E92      		jsr (%a2)
 183               	.LVL20:
 303:test3.c       **** 		P(0);
 184               		.loc 1 303 7 discriminator 1 view .LVU57
 185               		.loc 1 308 3 is_stmt 0 discriminator 1 view .LVU58
 186 00a2 4FEF 0010 		lea (16,%sp),%sp
 187               		.cfi_def_cfa_offset 12
 303:test3.c       **** 		P(0);
 188               		.loc 1 303 2 is_stmt 1 discriminator 1 view .LVU59
 304:test3.c       **** 		P(1);
 189               		.loc 1 304 3 discriminator 1 view .LVU60
 190 00a6 42A7      		clr.l -(%sp)
 191               		.cfi_def_cfa_offset 16
 192 00a8 4E93      		jsr (%a3)
 193               	.LVL21:
 305:test3.c       **** 		
 194               		.loc 1 305 3 discriminator 1 view .LVU61
 195 00aa 4878 0001 		pea 1.w
 196               		.cfi_def_cfa_offset 20
 197 00ae 4E93      		jsr (%a3)
 198               	.LVL22:
 307:test3.c       **** 		V(0);
 199               		.loc 1 307 3 discriminator 1 view .LVU62
 200 00b0 4878 0001 		pea 1.w
 201               		.cfi_def_cfa_offset 24
 202 00b4 4E92      		jsr (%a2)
 203               	.LVL23:
 204               		.loc 1 308 3 discriminator 1 view .LVU63
 205 00b6 42A7      		clr.l -(%sp)
 206               		.cfi_def_cfa_offset 28
 207 00b8 4E92      		jsr (%a2)
 208               	.LVL24:
 303:test3.c       **** 		P(0);
 209               		.loc 1 303 7 discriminator 1 view .LVU64
 210               		.loc 1 308 3 is_stmt 0 discriminator 1 view .LVU65
 211 00ba 4FEF 0010 		lea (16,%sp),%sp
 212               		.cfi_def_cfa_offset 12
 213 00be 60CE      		jra .L10
 214               		.cfi_endproc
 215               	.LFE12:
 216               		.size	client2, .-client2
 217               		.section	.rodata.str1.1,"aMS",@progbits,1
 218               	.LC0:
 219 0000 1B5B 2564 		.string	"\033[%d;%dH"
 219      3B25 6448 
 219      00
 220               		.text


 221               		.align	2
 222               		.globl	gotoxy
 223               		.type	gotoxy, @function
 224               	gotoxy:
 225               	.LVL25:
 226               	.LFB3:
  45:test3.c       **** 	fprintf(fd, "\033[%d;%dH", x, y);
 227               		.loc 1 45 37 is_stmt 1 view -0
 228               		.cfi_startproc
  46:test3.c       **** }
 229               		.loc 1 46 2 view .LVU67
 230 00c0 2F2F 000C 		move.l 12(%sp),-(%sp)
 231               		.cfi_def_cfa_offset 8
 232 00c4 2F2F 000C 		move.l 12(%sp),-(%sp)
 233               		.cfi_def_cfa_offset 12
 234 00c8 4879 0000 		pea .LC0
 234      0000 
 235               		.cfi_def_cfa_offset 16
 236 00ce 2F2F 0010 		move.l 16(%sp),-(%sp)
 237               		.cfi_def_cfa_offset 20
 238 00d2 4EB9 0000 		jsr fprintf
 238      0000 
 239               	.LVL26:
  47:test3.c       **** 
 240               		.loc 1 47 1 is_stmt 0 view .LVU68
 241 00d8 4FEF 0010 		lea (16,%sp),%sp
 242               		.cfi_def_cfa_offset 4
 243 00dc 4E75      		rts
 244               		.cfi_endproc
 245               	.LFE3:
 246               		.size	gotoxy, .-gotoxy
 247               		.section	.rodata.str1.1
 248               	.LC1:
 249 0009 7200      		.string	"r"
 250               	.LC2:
 251 000b 636F 6D30 		.string	"com0in not open"
 251      696E 206E 
 251      6F74 206F 
 251      7065 6E00 
 252               	.LC3:
 253 001b 7700      		.string	"w"
 254               	.LC4:
 255 001d 636F 6D30 		.string	"com0out not open"
 255      6F75 7420 
 255      6E6F 7420 
 255      6F70 656E 
 255      00
 256               		.text
 257               		.align	2
 258               		.globl	initPort
 259               		.type	initPort, @function
 260               	initPort:
 261               	.LFB4:
  49:test3.c       **** 	/*
 262               		.loc 1 49 17 is_stmt 1 view -0
 263               		.cfi_startproc
 264 00de 2F0A      		move.l %a2,-(%sp)


 265               		.cfi_def_cfa_offset 8
 266               		.cfi_offset 10, -8
  58:test3.c       ****     if(com0in == NULL) {
 267               		.loc 1 58 5 view .LVU70
  58:test3.c       ****     if(com0in == NULL) {
 268               		.loc 1 58 14 is_stmt 0 view .LVU71
 269 00e0 4879 0000 		pea .LC1
 269      0000 
 270               		.cfi_def_cfa_offset 12
 271 00e6 4878 0003 		pea 3.w
 272               		.cfi_def_cfa_offset 16
 273 00ea 45F9 0000 		lea fdopen,%a2
 273      0000 
 274 00f0 4E92      		jsr (%a2)
 275               	.LVL27:
  58:test3.c       ****     if(com0in == NULL) {
 276               		.loc 1 58 12 view .LVU72
 277 00f2 23C0 0000 		move.l %d0,com0in
 277      0000 
  59:test3.c       ****         perror("com0in not open");
 278               		.loc 1 59 5 is_stmt 1 view .LVU73
  59:test3.c       ****         perror("com0in not open");
 279               		.loc 1 59 7 is_stmt 0 view .LVU74
 280 00f8 508F      		addq.l #8,%sp
 281               		.cfi_def_cfa_offset 8
 282 00fa 671A      		jeq .L20
  63:test3.c       ****     if(com0out == NULL) {
 283               		.loc 1 63 5 is_stmt 1 view .LVU75
  63:test3.c       ****     if(com0out == NULL) {
 284               		.loc 1 63 15 is_stmt 0 view .LVU76
 285 00fc 4879 0000 		pea .LC3
 285      0000 
 286               		.cfi_def_cfa_offset 12
 287 0102 4878 0003 		pea 3.w
 288               		.cfi_def_cfa_offset 16
 289 0106 4E92      		jsr (%a2)
 290               	.LVL28:
  63:test3.c       ****     if(com0out == NULL) {
 291               		.loc 1 63 13 view .LVU77
 292 0108 23C0 0000 		move.l %d0,com0out
 292      0000 
  64:test3.c       ****         perror("com0out not open");
 293               		.loc 1 64 5 is_stmt 1 view .LVU78
  64:test3.c       ****         perror("com0out not open");
 294               		.loc 1 64 7 is_stmt 0 view .LVU79
 295 010e 508F      		addq.l #8,%sp
 296               		.cfi_def_cfa_offset 8
 297 0110 671A      		jeq .L21
  81:test3.c       **** 
 298               		.loc 1 81 1 view .LVU80
 299 0112 245F      		move.l (%sp)+,%a2
 300 0114 4E75      		rts
 301               	.L20:
  60:test3.c       ****         exit(1);
 302               		.loc 1 60 9 is_stmt 1 view .LVU81
 303 0116 4879 0000 		pea .LC2
 303      0000 


 304               		.cfi_remember_state
 305               		.cfi_def_cfa_offset 12
 306 011c 4EB9 0000 		jsr perror
 306      0000 
 307               	.LVL29:
  61:test3.c       ****     }
 308               		.loc 1 61 9 view .LVU82
 309 0122 4878 0001 		pea 1.w
 310               		.cfi_def_cfa_offset 16
 311 0126 4EB9 0000 		jsr exit
 311      0000 
 312               	.LVL30:
 313               	.L21:
 314               		.cfi_restore_state
 315               	.LBB12:
 316               	.LBI12:
  49:test3.c       **** 	/*
 317               		.loc 1 49 6 view .LVU83
 318               	.LBB13:
  65:test3.c       ****         exit(1);
 319               		.loc 1 65 9 view .LVU84
 320 012c 4879 0000 		pea .LC4
 320      0000 
 321               		.cfi_def_cfa_offset 12
 322 0132 4EB9 0000 		jsr perror
 322      0000 
 323               	.LVL31:
  66:test3.c       ****     }
 324               		.loc 1 66 9 view .LVU85
 325 0138 4878 0001 		pea 1.w
 326               		.cfi_def_cfa_offset 16
 327 013c 4EB9 0000 		jsr exit
 327      0000 
 328               	.LVL32:
 329               	.LBE13:
 330               	.LBE12:
 331               		.cfi_endproc
 332               	.LFE4:
 333               		.size	initPort, .-initPort
 334               		.section	.rodata.str1.1
 335               	.LC5:
 336 002e 1B00      		.string	"\033"
 337               	.LC6:
 338 0030 2573 5B38 		.string	"%s[8;%d;%dt"
 338      3B25 643B 
 338      2564 7400 
 339               	.LC7:
 340 003c 1B5B 324A 		.string	"\033[2J"
 340      00
 341               	.LC8:
 342 0041 1B5B 313B 		.string	"\033[1;1H"
 342      3148 00
 343               	.LC9:
 344 0048 1B5B 3F32 		.string	"\033[?25l"
 344      356C 00
 345               	.LC10:
 346 004f E295 94E2 		.string	"\342\225\224\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\


 346      9590 E295 
 346      90E2 9590 
 346      E295 90E2 
 346      9590 E295 
 347               	.LC11:
 348 00b4 E295 9120 		.string	"\342\225\221 Welcome to Terminal Chat Box! \342\225\221\n"
 348      5765 6C63 
 348      6F6D 6520 
 348      746F 2054 
 348      6572 6D69 
 349               	.LC12:
 350 00db E295 9AE2 		.string	"\342\225\232\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\225\220\342\
 350      9590 E295 
 350      90E2 9590 
 350      E295 90E2 
 350      9590 E295 
 351               	.LC13:
 352 0140 2D2D 2D2D 		.string	"------------------------------------------------------------------\n"
 352      2D2D 2D2D 
 352      2D2D 2D2D 
 352      2D2D 2D2D 
 352      2D2D 2D2D 
 353               	.LC14:
 354 0184 496E 7374 		.string	"Instruction:\n"
 354      7275 6374 
 354      696F 6E3A 
 354      0A00 
 355               	.LC15:
 356 0192 2D20 6A75 		.string	"- just input your message in dude!\n"
 356      7374 2069 
 356      6E70 7574 
 356      2079 6F75 
 356      7220 6D65 
 357               	.LC16:
 358 01b6 2D20 616E 		.string	"- and make sure the message does not exceed 100 characters\n"
 358      6420 6D61 
 358      6B65 2073 
 358      7572 6520 
 358      7468 6520 
 359               	.LC17:
 360 01f2 0A20 2A2A 		.string	"\n ** Current runtime \n"
 360      2043 7572 
 360      7265 6E74 
 360      2072 756E 
 360      7469 6D65 
 361               	.LC18:
 362 0209 2323 2121 		.string	"##!!==//##!!==//##!!==//##!!==//##!!==//##!!==//##!!==//##!!==//##\n"
 362      3D3D 2F2F 
 362      2323 2121 
 362      3D3D 2F2F 
 362      2323 2121 
 363               	.LC19:
 364 024d 1B5B 3F32 		.string	"\033[?25h"
 364      3568 00
 365               		.text
 366               		.align	2
 367               		.globl	welcome_ui


 368               		.type	welcome_ui, @function
 369               	welcome_ui:
 370               	.LVL33:
 371               	.LFB6:
 124:test3.c       **** 	/*
 372               		.loc 1 124 30 view -0
 373               		.cfi_startproc
 124:test3.c       **** 	/*
 374               		.loc 1 124 30 is_stmt 0 view .LVU87
 375 0142 2F0A      		move.l %a2,-(%sp)
 376               		.cfi_def_cfa_offset 8
 377               		.cfi_offset 10, -8
 378 0144 2F02      		move.l %d2,-(%sp)
 379               		.cfi_def_cfa_offset 12
 380               		.cfi_offset 2, -12
 381 0146 202F 000C 		move.l 12(%sp),%d0
 133:test3.c       **** 	if(channel == 0) fd = com0out;
 382               		.loc 1 133 2 is_stmt 1 view .LVU88
 134:test3.c       **** 	if(channel == 1) fd = com1out;
 383               		.loc 1 134 2 view .LVU89
 134:test3.c       **** 	if(channel == 1) fd = com1out;
 384               		.loc 1 134 4 is_stmt 0 view .LVU90
 385 014a 6600 017E 		jne .L23
 134:test3.c       **** 	if(channel == 1) fd = com1out;
 386               		.loc 1 134 19 is_stmt 1 discriminator 1 view .LVU91
 134:test3.c       **** 	if(channel == 1) fd = com1out;
 387               		.loc 1 134 22 is_stmt 0 discriminator 1 view .LVU92
 388 014e 2439 0000 		move.l com0out,%d2
 388      0000 
 389               	.LVL34:
 135:test3.c       **** 	
 390               		.loc 1 135 2 is_stmt 1 discriminator 1 view .LVU93
 391               	.L24:
 138:test3.c       **** 	fprintf(fd, "%s[8;%d;%dt", ESC, screen_height, screen_width);
 392               		.loc 1 138 2 view .LVU94
 139:test3.c       **** 	
 393               		.loc 1 139 2 view .LVU95
 394 0154 4878 0084 		pea 132.w
 395               		.cfi_def_cfa_offset 16
 396 0158 4878 002B 		pea 43.w
 397               		.cfi_def_cfa_offset 20
 398 015c 4879 0000 		pea .LC5
 398      0000 
 399               		.cfi_def_cfa_offset 24
 400 0162 4879 0000 		pea .LC6
 400      0000 
 401               		.cfi_def_cfa_offset 28
 402 0168 2F02      		move.l %d2,-(%sp)
 403               		.cfi_def_cfa_offset 32
 404 016a 4EB9 0000 		jsr fprintf
 404      0000 
 405               	.LVL35:
 142:test3.c       **** 	
 406               		.loc 1 142 2 view .LVU96
 407 0170 2F02      		move.l %d2,-(%sp)
 408               		.cfi_def_cfa_offset 36
 409 0172 4878 0004 		pea 4.w


 410               		.cfi_def_cfa_offset 40
 411 0176 4878 0001 		pea 1.w
 412               		.cfi_def_cfa_offset 44
 413 017a 4879 0000 		pea .LC7
 413      0000 
 414               		.cfi_def_cfa_offset 48
 415 0180 45F9 0000 		lea fwrite,%a2
 415      0000 
 416 0186 4E92      		jsr (%a2)
 417               	.LVL36:
 145:test3.c       **** 	
 418               		.loc 1 145 2 view .LVU97
 419 0188 4FEF 0020 		lea (32,%sp),%sp
 420               		.cfi_def_cfa_offset 16
 421 018c 2E82      		move.l %d2,(%sp)
 422 018e 4878 0006 		pea 6.w
 423               		.cfi_def_cfa_offset 20
 424 0192 4878 0001 		pea 1.w
 425               		.cfi_def_cfa_offset 24
 426 0196 4879 0000 		pea .LC8
 426      0000 
 427               		.cfi_def_cfa_offset 28
 428 019c 4E92      		jsr (%a2)
 429               	.LVL37:
 148:test3.c       **** 	
 430               		.loc 1 148 2 view .LVU98
 431 019e 2F02      		move.l %d2,-(%sp)
 432               		.cfi_def_cfa_offset 32
 433 01a0 4878 0006 		pea 6.w
 434               		.cfi_def_cfa_offset 36
 435 01a4 4878 0001 		pea 1.w
 436               		.cfi_def_cfa_offset 40
 437 01a8 4879 0000 		pea .LC9
 437      0000 
 438               		.cfi_def_cfa_offset 44
 439 01ae 4E92      		jsr (%a2)
 440               	.LVL38:
 151:test3.c       **** 	fprintf(fd, "╔═══════════════════════════
 441               		.loc 1 151 2 view .LVU99
 152:test3.c       **** 	fprintf(fd, "║ Welcome to Terminal Chat Box! ║\n");
 442               		.loc 1 152 2 view .LVU100
 443 01b0 4FEF 001C 		lea (28,%sp),%sp
 444               		.cfi_def_cfa_offset 16
 445 01b4 2E82      		move.l %d2,(%sp)
 446 01b6 4878 0064 		pea 100.w
 447               		.cfi_def_cfa_offset 20
 448 01ba 4878 0001 		pea 1.w
 449               		.cfi_def_cfa_offset 24
 450 01be 4879 0000 		pea .LC10
 450      0000 
 451               		.cfi_def_cfa_offset 28
 452 01c4 4E92      		jsr (%a2)
 453               	.LVL39:
 153:test3.c       **** 	fprintf(fd, "╚═══════════════════════════
 454               		.loc 1 153 2 view .LVU101
 455 01c6 2F02      		move.l %d2,-(%sp)
 456               		.cfi_def_cfa_offset 32


 457 01c8 4878 0026 		pea 38.w
 458               		.cfi_def_cfa_offset 36
 459 01cc 4878 0001 		pea 1.w
 460               		.cfi_def_cfa_offset 40
 461 01d0 4879 0000 		pea .LC11
 461      0000 
 462               		.cfi_def_cfa_offset 44
 463 01d6 4E92      		jsr (%a2)
 464               	.LVL40:
 154:test3.c       **** 	
 465               		.loc 1 154 2 view .LVU102
 466 01d8 4FEF 001C 		lea (28,%sp),%sp
 467               		.cfi_def_cfa_offset 16
 468 01dc 2E82      		move.l %d2,(%sp)
 469 01de 4878 0064 		pea 100.w
 470               		.cfi_def_cfa_offset 20
 471 01e2 4878 0001 		pea 1.w
 472               		.cfi_def_cfa_offset 24
 473 01e6 4879 0000 		pea .LC12
 473      0000 
 474               		.cfi_def_cfa_offset 28
 475 01ec 4E92      		jsr (%a2)
 476               	.LVL41:
 157:test3.c       **** 	fprintf(fd, "------------------------------------------------------------------\n");
 477               		.loc 1 157 2 view .LVU103
 158:test3.c       **** 	fprintf(fd, "Instruction:\n");
 478               		.loc 1 158 2 view .LVU104
 479 01ee 2F02      		move.l %d2,-(%sp)
 480               		.cfi_def_cfa_offset 32
 481 01f0 4878 0043 		pea 67.w
 482               		.cfi_def_cfa_offset 36
 483 01f4 4878 0001 		pea 1.w
 484               		.cfi_def_cfa_offset 40
 485 01f8 4879 0000 		pea .LC13
 485      0000 
 486               		.cfi_def_cfa_offset 44
 487 01fe 4E92      		jsr (%a2)
 488               	.LVL42:
 159:test3.c       **** 	fprintf(fd, "- just input your message in dude!\n");
 489               		.loc 1 159 2 view .LVU105
 490 0200 4FEF 001C 		lea (28,%sp),%sp
 491               		.cfi_def_cfa_offset 16
 492 0204 2E82      		move.l %d2,(%sp)
 493 0206 4878 000D 		pea 13.w
 494               		.cfi_def_cfa_offset 20
 495 020a 4878 0001 		pea 1.w
 496               		.cfi_def_cfa_offset 24
 497 020e 4879 0000 		pea .LC14
 497      0000 
 498               		.cfi_def_cfa_offset 28
 499 0214 4E92      		jsr (%a2)
 500               	.LVL43:
 160:test3.c       **** 	fprintf(fd, "- and make sure the message does not exceed 100 characters\n");
 501               		.loc 1 160 2 view .LVU106
 502 0216 2F02      		move.l %d2,-(%sp)
 503               		.cfi_def_cfa_offset 32
 504 0218 4878 0023 		pea 35.w


 505               		.cfi_def_cfa_offset 36
 506 021c 4878 0001 		pea 1.w
 507               		.cfi_def_cfa_offset 40
 508 0220 4879 0000 		pea .LC15
 508      0000 
 509               		.cfi_def_cfa_offset 44
 510 0226 4E92      		jsr (%a2)
 511               	.LVL44:
 161:test3.c       **** 	fprintf(fd, "------------------------------------------------------------------\n");
 512               		.loc 1 161 2 view .LVU107
 513 0228 4FEF 001C 		lea (28,%sp),%sp
 514               		.cfi_def_cfa_offset 16
 515 022c 2E82      		move.l %d2,(%sp)
 516 022e 4878 003B 		pea 59.w
 517               		.cfi_def_cfa_offset 20
 518 0232 4878 0001 		pea 1.w
 519               		.cfi_def_cfa_offset 24
 520 0236 4879 0000 		pea .LC16
 520      0000 
 521               		.cfi_def_cfa_offset 28
 522 023c 4E92      		jsr (%a2)
 523               	.LVL45:
 162:test3.c       **** 	
 524               		.loc 1 162 2 view .LVU108
 525 023e 2F02      		move.l %d2,-(%sp)
 526               		.cfi_def_cfa_offset 32
 527 0240 4878 0043 		pea 67.w
 528               		.cfi_def_cfa_offset 36
 529 0244 4878 0001 		pea 1.w
 530               		.cfi_def_cfa_offset 40
 531 0248 4879 0000 		pea .LC13
 531      0000 
 532               		.cfi_def_cfa_offset 44
 533 024e 4E92      		jsr (%a2)
 534               	.LVL46:
 165:test3.c       **** 	clock_pos_x = welcome_box_size + instruction_box_size + 2;
 535               		.loc 1 165 2 view .LVU109
 536 0250 4FEF 001C 		lea (28,%sp),%sp
 537               		.cfi_def_cfa_offset 16
 538 0254 2E82      		move.l %d2,(%sp)
 539 0256 4878 0016 		pea 22.w
 540               		.cfi_def_cfa_offset 20
 541 025a 4878 0001 		pea 1.w
 542               		.cfi_def_cfa_offset 24
 543 025e 4879 0000 		pea .LC17
 543      0000 
 544               		.cfi_def_cfa_offset 28
 545 0264 4E92      		jsr (%a2)
 546               	.LVL47:
 166:test3.c       **** 	clock_pos_y = 21;
 547               		.loc 1 166 2 view .LVU110
 166:test3.c       **** 	clock_pos_y = 21;
 548               		.loc 1 166 14 is_stmt 0 view .LVU111
 549 0266 700A      		moveq #10,%d0
 550 0268 23C0 0000 		move.l %d0,clock_pos_x
 550      0000 
 167:test3.c       **** 	


 551               		.loc 1 167 2 is_stmt 1 view .LVU112
 167:test3.c       **** 	
 552               		.loc 1 167 14 is_stmt 0 view .LVU113
 553 026e 7215      		moveq #21,%d1
 554 0270 23C1 0000 		move.l %d1,clock_pos_y
 554      0000 
 170:test3.c       **** 	
 555               		.loc 1 170 2 is_stmt 1 view .LVU114
 556 0276 2F02      		move.l %d2,-(%sp)
 557               		.cfi_def_cfa_offset 32
 558 0278 4878 0043 		pea 67.w
 559               		.cfi_def_cfa_offset 36
 560 027c 4878 0001 		pea 1.w
 561               		.cfi_def_cfa_offset 40
 562 0280 4879 0000 		pea .LC18
 562      0000 
 563               		.cfi_def_cfa_offset 44
 564 0286 4E92      		jsr (%a2)
 565               	.LVL48:
 173:test3.c       **** 	chatlog_start_y = 1;
 566               		.loc 1 173 2 view .LVU115
 173:test3.c       **** 	chatlog_start_y = 1;
 567               		.loc 1 173 32 is_stmt 0 view .LVU116
 568 0288 2039 0000 		move.l clock_pos_x,%d0
 568      0000 
 569 028e 5480      		addq.l #2,%d0
 173:test3.c       **** 	chatlog_start_y = 1;
 570               		.loc 1 173 18 view .LVU117
 571 0290 23C0 0000 		move.l %d0,chatlog_start_x
 571      0000 
 174:test3.c       **** 	// set chatlog pos
 572               		.loc 1 174 2 is_stmt 1 view .LVU118
 174:test3.c       **** 	// set chatlog pos
 573               		.loc 1 174 18 is_stmt 0 view .LVU119
 574 0296 7201      		moveq #1,%d1
 575 0298 23C1 0000 		move.l %d1,chatlog_start_y
 575      0000 
 176:test3.c       **** 	chatlog_y = chatlog_start_y;
 576               		.loc 1 176 2 is_stmt 1 view .LVU120
 176:test3.c       **** 	chatlog_y = chatlog_start_y;
 577               		.loc 1 176 12 is_stmt 0 view .LVU121
 578 029e 23C0 0000 		move.l %d0,chatlog_x
 578      0000 
 177:test3.c       **** 	
 579               		.loc 1 177 2 is_stmt 1 view .LVU122
 177:test3.c       **** 	
 580               		.loc 1 177 12 is_stmt 0 view .LVU123
 581 02a4 23C1 0000 		move.l %d1,chatlog_y
 581      0000 
 180:test3.c       **** }
 582               		.loc 1 180 2 is_stmt 1 view .LVU124
 583 02aa 4FEF 001C 		lea (28,%sp),%sp
 584               		.cfi_def_cfa_offset 16
 585 02ae 2E82      		move.l %d2,(%sp)
 586 02b0 4878 0006 		pea 6.w
 587               		.cfi_def_cfa_offset 20
 588 02b4 4878 0001 		pea 1.w


 589               		.cfi_def_cfa_offset 24
 590 02b8 4879 0000 		pea .LC19
 590      0000 
 591               		.cfi_def_cfa_offset 28
 592 02be 4E92      		jsr (%a2)
 593               	.LVL49:
 181:test3.c       **** 
 594               		.loc 1 181 1 is_stmt 0 view .LVU125
 595 02c0 4FEF 0010 		lea (16,%sp),%sp
 596               		.cfi_def_cfa_offset 12
 597 02c4 241F      		move.l (%sp)+,%d2
 598               	.LVL50:
 181:test3.c       **** 
 599               		.loc 1 181 1 view .LVU126
 600 02c6 245F      		move.l (%sp)+,%a2
 601 02c8 4E75      		rts
 602               	.LVL51:
 603               	.L23:
 135:test3.c       **** 	
 604               		.loc 1 135 2 is_stmt 1 view .LVU127
 135:test3.c       **** 	
 605               		.loc 1 135 4 is_stmt 0 view .LVU128
 606 02ca 5380      		subq.l #1,%d0
 607 02cc 6600 FE86 		jne .L24
 135:test3.c       **** 	
 608               		.loc 1 135 19 is_stmt 1 discriminator 1 view .LVU129
 135:test3.c       **** 	
 609               		.loc 1 135 22 is_stmt 0 discriminator 1 view .LVU130
 610 02d0 2439 0000 		move.l com1out,%d2
 610      0000 
 611               	.LVL52:
 138:test3.c       **** 	fprintf(fd, "%s[8;%d;%dt", ESC, screen_height, screen_width);
 612               		.loc 1 138 2 is_stmt 1 discriminator 1 view .LVU131
 139:test3.c       **** 	
 613               		.loc 1 139 2 discriminator 1 view .LVU132
 614 02d6 4878 0084 		pea 132.w
 615               		.cfi_def_cfa_offset 16
 616 02da 4878 002B 		pea 43.w
 617               		.cfi_def_cfa_offset 20
 618 02de 4879 0000 		pea .LC5
 618      0000 
 619               		.cfi_def_cfa_offset 24
 620 02e4 4879 0000 		pea .LC6
 620      0000 
 621               		.cfi_def_cfa_offset 28
 622 02ea 2F02      		move.l %d2,-(%sp)
 623               		.cfi_def_cfa_offset 32
 624 02ec 4EB9 0000 		jsr fprintf
 624      0000 
 625               	.LVL53:
 142:test3.c       **** 	
 626               		.loc 1 142 2 discriminator 1 view .LVU133
 627 02f2 2F02      		move.l %d2,-(%sp)
 628               		.cfi_def_cfa_offset 36
 629 02f4 4878 0004 		pea 4.w
 630               		.cfi_def_cfa_offset 40
 631 02f8 4878 0001 		pea 1.w


 632               		.cfi_def_cfa_offset 44
 633 02fc 4879 0000 		pea .LC7
 633      0000 
 634               		.cfi_def_cfa_offset 48
 635 0302 45F9 0000 		lea fwrite,%a2
 635      0000 
 636 0308 4E92      		jsr (%a2)
 637               	.LVL54:
 145:test3.c       **** 	
 638               		.loc 1 145 2 discriminator 1 view .LVU134
 639 030a 4FEF 0020 		lea (32,%sp),%sp
 640               		.cfi_def_cfa_offset 16
 641 030e 2E82      		move.l %d2,(%sp)
 642 0310 4878 0006 		pea 6.w
 643               		.cfi_def_cfa_offset 20
 644 0314 4878 0001 		pea 1.w
 645               		.cfi_def_cfa_offset 24
 646 0318 4879 0000 		pea .LC8
 646      0000 
 647               		.cfi_def_cfa_offset 28
 648 031e 4E92      		jsr (%a2)
 649               	.LVL55:
 148:test3.c       **** 	
 650               		.loc 1 148 2 discriminator 1 view .LVU135
 651 0320 2F02      		move.l %d2,-(%sp)
 652               		.cfi_def_cfa_offset 32
 653 0322 4878 0006 		pea 6.w
 654               		.cfi_def_cfa_offset 36
 655 0326 4878 0001 		pea 1.w
 656               		.cfi_def_cfa_offset 40
 657 032a 4879 0000 		pea .LC9
 657      0000 
 658               		.cfi_def_cfa_offset 44
 659 0330 4E92      		jsr (%a2)
 660               	.LVL56:
 151:test3.c       **** 	fprintf(fd, "╔═══════════════════════════
 661               		.loc 1 151 2 discriminator 1 view .LVU136
 152:test3.c       **** 	fprintf(fd, "║ Welcome to Terminal Chat Box! ║\n");
 662               		.loc 1 152 2 discriminator 1 view .LVU137
 663 0332 4FEF 001C 		lea (28,%sp),%sp
 664               		.cfi_def_cfa_offset 16
 665 0336 2E82      		move.l %d2,(%sp)
 666 0338 4878 0064 		pea 100.w
 667               		.cfi_def_cfa_offset 20
 668 033c 4878 0001 		pea 1.w
 669               		.cfi_def_cfa_offset 24
 670 0340 4879 0000 		pea .LC10
 670      0000 
 671               		.cfi_def_cfa_offset 28
 672 0346 4E92      		jsr (%a2)
 673               	.LVL57:
 153:test3.c       **** 	fprintf(fd, "╚═══════════════════════════
 674               		.loc 1 153 2 discriminator 1 view .LVU138
 675 0348 2F02      		move.l %d2,-(%sp)
 676               		.cfi_def_cfa_offset 32
 677 034a 4878 0026 		pea 38.w
 678               		.cfi_def_cfa_offset 36


 679 034e 4878 0001 		pea 1.w
 680               		.cfi_def_cfa_offset 40
 681 0352 4879 0000 		pea .LC11
 681      0000 
 682               		.cfi_def_cfa_offset 44
 683 0358 4E92      		jsr (%a2)
 684               	.LVL58:
 154:test3.c       **** 	
 685               		.loc 1 154 2 discriminator 1 view .LVU139
 686 035a 4FEF 001C 		lea (28,%sp),%sp
 687               		.cfi_def_cfa_offset 16
 688 035e 2E82      		move.l %d2,(%sp)
 689 0360 4878 0064 		pea 100.w
 690               		.cfi_def_cfa_offset 20
 691 0364 4878 0001 		pea 1.w
 692               		.cfi_def_cfa_offset 24
 693 0368 4879 0000 		pea .LC12
 693      0000 
 694               		.cfi_def_cfa_offset 28
 695 036e 4E92      		jsr (%a2)
 696               	.LVL59:
 157:test3.c       **** 	fprintf(fd, "------------------------------------------------------------------\n");
 697               		.loc 1 157 2 discriminator 1 view .LVU140
 158:test3.c       **** 	fprintf(fd, "Instruction:\n");
 698               		.loc 1 158 2 discriminator 1 view .LVU141
 699 0370 2F02      		move.l %d2,-(%sp)
 700               		.cfi_def_cfa_offset 32
 701 0372 4878 0043 		pea 67.w
 702               		.cfi_def_cfa_offset 36
 703 0376 4878 0001 		pea 1.w
 704               		.cfi_def_cfa_offset 40
 705 037a 4879 0000 		pea .LC13
 705      0000 
 706               		.cfi_def_cfa_offset 44
 707 0380 4E92      		jsr (%a2)
 708               	.LVL60:
 159:test3.c       **** 	fprintf(fd, "- just input your message in dude!\n");
 709               		.loc 1 159 2 discriminator 1 view .LVU142
 710 0382 4FEF 001C 		lea (28,%sp),%sp
 711               		.cfi_def_cfa_offset 16
 712 0386 2E82      		move.l %d2,(%sp)
 713 0388 4878 000D 		pea 13.w
 714               		.cfi_def_cfa_offset 20
 715 038c 4878 0001 		pea 1.w
 716               		.cfi_def_cfa_offset 24
 717 0390 4879 0000 		pea .LC14
 717      0000 
 718               		.cfi_def_cfa_offset 28
 719 0396 4E92      		jsr (%a2)
 720               	.LVL61:
 160:test3.c       **** 	fprintf(fd, "- and make sure the message does not exceed 100 characters\n");
 721               		.loc 1 160 2 discriminator 1 view .LVU143
 722 0398 2F02      		move.l %d2,-(%sp)
 723               		.cfi_def_cfa_offset 32
 724 039a 4878 0023 		pea 35.w
 725               		.cfi_def_cfa_offset 36
 726 039e 4878 0001 		pea 1.w


 727               		.cfi_def_cfa_offset 40
 728 03a2 4879 0000 		pea .LC15
 728      0000 
 729               		.cfi_def_cfa_offset 44
 730 03a8 4E92      		jsr (%a2)
 731               	.LVL62:
 161:test3.c       **** 	fprintf(fd, "------------------------------------------------------------------\n");
 732               		.loc 1 161 2 discriminator 1 view .LVU144
 733 03aa 4FEF 001C 		lea (28,%sp),%sp
 734               		.cfi_def_cfa_offset 16
 735 03ae 2E82      		move.l %d2,(%sp)
 736 03b0 4878 003B 		pea 59.w
 737               		.cfi_def_cfa_offset 20
 738 03b4 4878 0001 		pea 1.w
 739               		.cfi_def_cfa_offset 24
 740 03b8 4879 0000 		pea .LC16
 740      0000 
 741               		.cfi_def_cfa_offset 28
 742 03be 4E92      		jsr (%a2)
 743               	.LVL63:
 162:test3.c       **** 	
 744               		.loc 1 162 2 discriminator 1 view .LVU145
 745 03c0 2F02      		move.l %d2,-(%sp)
 746               		.cfi_def_cfa_offset 32
 747 03c2 4878 0043 		pea 67.w
 748               		.cfi_def_cfa_offset 36
 749 03c6 4878 0001 		pea 1.w
 750               		.cfi_def_cfa_offset 40
 751 03ca 4879 0000 		pea .LC13
 751      0000 
 752               		.cfi_def_cfa_offset 44
 753 03d0 4E92      		jsr (%a2)
 754               	.LVL64:
 165:test3.c       **** 	clock_pos_x = welcome_box_size + instruction_box_size + 2;
 755               		.loc 1 165 2 discriminator 1 view .LVU146
 756 03d2 4FEF 001C 		lea (28,%sp),%sp
 757               		.cfi_def_cfa_offset 16
 758 03d6 2E82      		move.l %d2,(%sp)
 759 03d8 4878 0016 		pea 22.w
 760               		.cfi_def_cfa_offset 20
 761 03dc 4878 0001 		pea 1.w
 762               		.cfi_def_cfa_offset 24
 763 03e0 4879 0000 		pea .LC17
 763      0000 
 764               		.cfi_def_cfa_offset 28
 765 03e6 4E92      		jsr (%a2)
 766               	.LVL65:
 166:test3.c       **** 	clock_pos_y = 21;
 767               		.loc 1 166 2 discriminator 1 view .LVU147
 166:test3.c       **** 	clock_pos_y = 21;
 768               		.loc 1 166 14 is_stmt 0 discriminator 1 view .LVU148
 769 03e8 700A      		moveq #10,%d0
 770 03ea 23C0 0000 		move.l %d0,clock_pos_x
 770      0000 
 167:test3.c       **** 	
 771               		.loc 1 167 2 is_stmt 1 discriminator 1 view .LVU149
 167:test3.c       **** 	


 772               		.loc 1 167 14 is_stmt 0 discriminator 1 view .LVU150
 773 03f0 7215      		moveq #21,%d1
 774 03f2 23C1 0000 		move.l %d1,clock_pos_y
 774      0000 
 170:test3.c       **** 	
 775               		.loc 1 170 2 is_stmt 1 discriminator 1 view .LVU151
 776 03f8 2F02      		move.l %d2,-(%sp)
 777               		.cfi_def_cfa_offset 32
 778 03fa 4878 0043 		pea 67.w
 779               		.cfi_def_cfa_offset 36
 780 03fe 4878 0001 		pea 1.w
 781               		.cfi_def_cfa_offset 40
 782 0402 4879 0000 		pea .LC18
 782      0000 
 783               		.cfi_def_cfa_offset 44
 784 0408 4E92      		jsr (%a2)
 785               	.LVL66:
 173:test3.c       **** 	chatlog_start_y = 1;
 786               		.loc 1 173 2 discriminator 1 view .LVU152
 173:test3.c       **** 	chatlog_start_y = 1;
 787               		.loc 1 173 32 is_stmt 0 discriminator 1 view .LVU153
 788 040a 2039 0000 		move.l clock_pos_x,%d0
 788      0000 
 789 0410 5480      		addq.l #2,%d0
 173:test3.c       **** 	chatlog_start_y = 1;
 790               		.loc 1 173 18 discriminator 1 view .LVU154
 791 0412 23C0 0000 		move.l %d0,chatlog_start_x
 791      0000 
 174:test3.c       **** 	// set chatlog pos
 792               		.loc 1 174 2 is_stmt 1 discriminator 1 view .LVU155
 174:test3.c       **** 	// set chatlog pos
 793               		.loc 1 174 18 is_stmt 0 discriminator 1 view .LVU156
 794 0418 7201      		moveq #1,%d1
 795 041a 23C1 0000 		move.l %d1,chatlog_start_y
 795      0000 
 176:test3.c       **** 	chatlog_y = chatlog_start_y;
 796               		.loc 1 176 2 is_stmt 1 discriminator 1 view .LVU157
 176:test3.c       **** 	chatlog_y = chatlog_start_y;
 797               		.loc 1 176 12 is_stmt 0 discriminator 1 view .LVU158
 798 0420 23C0 0000 		move.l %d0,chatlog_x
 798      0000 
 177:test3.c       **** 	
 799               		.loc 1 177 2 is_stmt 1 discriminator 1 view .LVU159
 177:test3.c       **** 	
 800               		.loc 1 177 12 is_stmt 0 discriminator 1 view .LVU160
 801 0426 23C1 0000 		move.l %d1,chatlog_y
 801      0000 
 180:test3.c       **** }
 802               		.loc 1 180 2 is_stmt 1 discriminator 1 view .LVU161
 803 042c 4FEF 001C 		lea (28,%sp),%sp
 804               		.cfi_def_cfa_offset 16
 805 0430 2E82      		move.l %d2,(%sp)
 806 0432 4878 0006 		pea 6.w
 807               		.cfi_def_cfa_offset 20
 808 0436 4878 0001 		pea 1.w
 809               		.cfi_def_cfa_offset 24
 810 043a 4879 0000 		pea .LC19


 810      0000 
 811               		.cfi_def_cfa_offset 28
 812 0440 4E92      		jsr (%a2)
 813               	.LVL67:
 181:test3.c       **** 
 814               		.loc 1 181 1 is_stmt 0 discriminator 1 view .LVU162
 815 0442 4FEF 0010 		lea (16,%sp),%sp
 816               		.cfi_def_cfa_offset 12
 817 0446 241F      		move.l (%sp)+,%d2
 818               	.LVL68:
 181:test3.c       **** 
 819               		.loc 1 181 1 discriminator 1 view .LVU163
 820 0448 245F      		move.l (%sp)+,%a2
 821 044a 4E75      		rts
 822               		.cfi_endproc
 823               	.LFE6:
 824               		.size	welcome_ui, .-welcome_ui
 825               		.section	.rodata.str1.1
 826               	.LC20:
 827 0254 2530 3264 		.string	"%02d:%02d:%02d"
 827      3A25 3032 
 827      643A 2530 
 827      3264 00
 828               		.text
 829               		.align	2
 830               		.globl	refresh_clock
 831               		.type	refresh_clock, @function
 832               	refresh_clock:
 833               	.LVL69:
 834               	.LFB7:
 183:test3.c       **** 	// refresh current runtime
 835               		.loc 1 183 30 is_stmt 1 view -0
 836               		.cfi_startproc
 183:test3.c       **** 	// refresh current runtime
 837               		.loc 1 183 30 is_stmt 0 view .LVU165
 838 044c 2F0A      		move.l %a2,-(%sp)
 839               		.cfi_def_cfa_offset 8
 840               		.cfi_offset 10, -8
 841 044e 2F02      		move.l %d2,-(%sp)
 842               		.cfi_def_cfa_offset 12
 843               		.cfi_offset 2, -12
 844 0450 242F 000C 		move.l 12(%sp),%d2
 185:test3.c       **** 	fprintf(fd, "%02d:%02d:%02d", global_hour, global_min, global_sec);		// (10, 20)
 845               		.loc 1 185 2 is_stmt 1 view .LVU166
 846               	.LVL70:
 847               	.LBB16:
 848               	.LBI16:
  45:test3.c       **** 	fprintf(fd, "\033[%d;%dH", x, y);
 849               		.loc 1 45 6 view .LVU167
 850               	.LBB17:
  46:test3.c       **** }
 851               		.loc 1 46 2 view .LVU168
 852 0454 2F39 0000 		move.l clock_pos_y,-(%sp)
 852      0000 
 853               		.cfi_def_cfa_offset 16
 854 045a 2F39 0000 		move.l clock_pos_x,-(%sp)
 854      0000 


 855               		.cfi_def_cfa_offset 20
 856 0460 4879 0000 		pea .LC0
 856      0000 
 857               		.cfi_def_cfa_offset 24
 858 0466 2F02      		move.l %d2,-(%sp)
 859               		.cfi_def_cfa_offset 28
 860 0468 45F9 0000 		lea fprintf,%a2
 860      0000 
 861 046e 4E92      		jsr (%a2)
 862               	.LVL71:
  46:test3.c       **** }
 863               		.loc 1 46 2 is_stmt 0 view .LVU169
 864               	.LBE17:
 865               	.LBE16:
 186:test3.c       **** }
 866               		.loc 1 186 2 is_stmt 1 view .LVU170
 867 0470 2F39 0000 		move.l global_sec,-(%sp)
 867      0000 
 868               		.cfi_def_cfa_offset 32
 869 0476 2F39 0000 		move.l global_min,-(%sp)
 869      0000 
 870               		.cfi_def_cfa_offset 36
 871 047c 2F39 0000 		move.l global_hour,-(%sp)
 871      0000 
 872               		.cfi_def_cfa_offset 40
 873 0482 4879 0000 		pea .LC20
 873      0000 
 874               		.cfi_def_cfa_offset 44
 875 0488 2F02      		move.l %d2,-(%sp)
 876               		.cfi_def_cfa_offset 48
 877 048a 4E92      		jsr (%a2)
 878               	.LVL72:
 187:test3.c       **** 
 879               		.loc 1 187 1 is_stmt 0 view .LVU171
 880 048c 4FEF 0024 		lea (36,%sp),%sp
 881               		.cfi_def_cfa_offset 12
 882 0490 241F      		move.l (%sp)+,%d2
 883 0492 245F      		move.l (%sp)+,%a2
 884 0494 4E75      		rts
 885               		.cfi_endproc
 886               	.LFE7:
 887               		.size	refresh_clock, .-refresh_clock
 888               		.section	.rodata.str1.1
 889               	.LC21:
 890 0263 7C20 2573 		.string	"| %s: %s"
 890      3A20 2573 
 890      00
 891               		.text
 892               		.align	2
 893               		.globl	refresh_chat
 894               		.type	refresh_chat, @function
 895               	refresh_chat:
 896               	.LVL73:
 897               	.LFB8:
 189:test3.c       **** 	if(chatlog_read_index != chatlog_write_index) {
 898               		.loc 1 189 29 is_stmt 1 view -0
 899               		.cfi_startproc


 189:test3.c       **** 	if(chatlog_read_index != chatlog_write_index) {
 900               		.loc 1 189 29 is_stmt 0 view .LVU173
 901 0496 2F0A      		move.l %a2,-(%sp)
 902               		.cfi_def_cfa_offset 8
 903               		.cfi_offset 10, -8
 190:test3.c       **** 		gotoxy(fd, chatlog_x, chatlog_y);
 904               		.loc 1 190 2 is_stmt 1 view .LVU174
 190:test3.c       **** 		gotoxy(fd, chatlog_x, chatlog_y);
 905               		.loc 1 190 4 is_stmt 0 view .LVU175
 906 0498 2039 0000 		move.l chatlog_read_index,%d0
 906      0000 
 907 049e B0B9 0000 		cmp.l chatlog_write_index.l,%d0
 907      0000 
 908 04a4 6604      		jne .L33
 197:test3.c       **** 
 909               		.loc 1 197 1 view .LVU176
 910 04a6 245F      		move.l (%sp)+,%a2
 911 04a8 4E75      		rts
 912               	.L33:
 913               	.LVL74:
 914               	.LBB22:
 915               	.LBI22:
 189:test3.c       **** 	if(chatlog_read_index != chatlog_write_index) {
 916               		.loc 1 189 6 is_stmt 1 view .LVU177
 917               	.LBB23:
 191:test3.c       **** 		fprintf(fd, "| %s: %s", chatlog_sender[chatlog_read_index], chatlog[chatlog_read_index]);
 918               		.loc 1 191 3 view .LVU178
 919               	.LBB24:
 920               	.LBI24:
  45:test3.c       **** 	fprintf(fd, "\033[%d;%dH", x, y);
 921               		.loc 1 45 6 view .LVU179
 922               	.LBB25:
  46:test3.c       **** }
 923               		.loc 1 46 2 view .LVU180
 924 04aa 2F39 0000 		move.l chatlog_y,-(%sp)
 924      0000 
 925               		.cfi_def_cfa_offset 12
 926 04b0 2F39 0000 		move.l chatlog_x,-(%sp)
 926      0000 
 927               		.cfi_def_cfa_offset 16
 928 04b6 4879 0000 		pea .LC0
 928      0000 
 929               		.cfi_def_cfa_offset 20
 930 04bc 2F2F 0014 		move.l 20(%sp),-(%sp)
 931               		.cfi_def_cfa_offset 24
 932 04c0 45F9 0000 		lea fprintf,%a2
 932      0000 
 933 04c6 4E92      		jsr (%a2)
 934               	.LVL75:
  46:test3.c       **** }
 935               		.loc 1 46 2 is_stmt 0 view .LVU181
 936               	.LBE25:
 937               	.LBE24:
 192:test3.c       **** 		
 938               		.loc 1 192 3 is_stmt 1 view .LVU182
 939 04c8 2079 0000 		move.l chatlog_read_index,%a0
 939      0000 


 192:test3.c       **** 		
 940               		.loc 1 192 70 is_stmt 0 view .LVU183
 941 04ce 2008      		move.l %a0,%d0
 942 04d0 D088      		add.l %a0,%d0
 943 04d2 D088      		add.l %a0,%d0
 944 04d4 2200      		move.l %d0,%d1
 945 04d6 E789      		lsl.l #3,%d1
 946 04d8 D288      		add.l %a0,%d1
 947 04da D281      		add.l %d1,%d1
 948 04dc D281      		add.l %d1,%d1
 949 04de D288      		add.l %a0,%d1
 192:test3.c       **** 		
 950               		.loc 1 192 3 view .LVU184
 951 04e0 0681 0000 		add.l #chatlog,%d1
 951      0000 
 952 04e6 2F01      		move.l %d1,-(%sp)
 953               		.cfi_def_cfa_offset 28
 192:test3.c       **** 		
 954               		.loc 1 192 41 view .LVU185
 955 04e8 D080      		add.l %d0,%d0
 956 04ea D080      		add.l %d0,%d0
 957 04ec 9088      		sub.l %a0,%d0
 192:test3.c       **** 		
 958               		.loc 1 192 3 view .LVU186
 959 04ee 0680 0000 		add.l #chatlog_sender,%d0
 959      0000 
 960 04f4 2F00      		move.l %d0,-(%sp)
 961               		.cfi_def_cfa_offset 32
 962 04f6 4879 0000 		pea .LC21
 962      0000 
 963               		.cfi_def_cfa_offset 36
 964 04fc 2F2F 0024 		move.l 36(%sp),-(%sp)
 965               		.cfi_def_cfa_offset 40
 966 0500 4E92      		jsr (%a2)
 967               	.LVL76:
 194:test3.c       **** 		chatlog_read_index++;
 968               		.loc 1 194 3 is_stmt 1 view .LVU187
 194:test3.c       **** 		chatlog_read_index++;
 969               		.loc 1 194 12 is_stmt 0 view .LVU188
 970 0502 52B9 0000 		addq.l #1,chatlog_x
 970      0000 
 195:test3.c       **** 	}
 971               		.loc 1 195 3 is_stmt 1 view .LVU189
 195:test3.c       **** 	}
 972               		.loc 1 195 21 is_stmt 0 view .LVU190
 973 0508 52B9 0000 		addq.l #1,chatlog_read_index
 973      0000 
 197:test3.c       **** 
 974               		.loc 1 197 1 view .LVU191
 975 050e 4FEF 0020 		lea (32,%sp),%sp
 976               		.cfi_def_cfa_offset 8
 977               	.LVL77:
 197:test3.c       **** 
 978               		.loc 1 197 1 view .LVU192
 979               	.LBE23:
 980               	.LBE22:
 981 0512 245F      		move.l (%sp)+,%a2


 982 0514 4E75      		rts
 983               		.cfi_endproc
 984               	.LFE8:
 985               		.size	refresh_chat, .-refresh_chat
 986               		.align	2
 987               		.globl	draw_client_ui
 988               		.type	draw_client_ui, @function
 989               	draw_client_ui:
 990               	.LVL78:
 991               	.LFB9:
 199:test3.c       **** 	/*
 992               		.loc 1 199 34 is_stmt 1 view -0
 993               		.cfi_startproc
 199:test3.c       **** 	/*
 994               		.loc 1 199 34 is_stmt 0 view .LVU194
 995 0516 48E7 2030 		movem.l #8240,-(%sp)
 996               		.cfi_def_cfa_offset 16
 997               		.cfi_offset 2, -16
 998               		.cfi_offset 10, -12
 999               		.cfi_offset 11, -8
 1000 051a 202F 0010 		move.l 16(%sp),%d0
 208:test3.c       **** 	if(channel == 0) fd = com0out;
 1001               		.loc 1 208 2 is_stmt 1 view .LVU195
 209:test3.c       **** 	if(channel == 1) fd = com1out;
 1002               		.loc 1 209 2 view .LVU196
 209:test3.c       **** 	if(channel == 1) fd = com1out;
 1003               		.loc 1 209 4 is_stmt 0 view .LVU197
 1004 051e 6600 009C 		jne .L35
 209:test3.c       **** 	if(channel == 1) fd = com1out;
 1005               		.loc 1 209 19 is_stmt 1 discriminator 1 view .LVU198
 209:test3.c       **** 	if(channel == 1) fd = com1out;
 1006               		.loc 1 209 22 is_stmt 0 discriminator 1 view .LVU199
 1007 0522 2439 0000 		move.l com0out,%d2
 1007      0000 
 1008               	.LVL79:
 210:test3.c       **** 	
 1009               		.loc 1 210 2 is_stmt 1 discriminator 1 view .LVU200
 1010               	.L36:
 213:test3.c       **** 	
 1011               		.loc 1 213 2 view .LVU201
 1012 0528 2F02      		move.l %d2,-(%sp)
 1013               		.cfi_def_cfa_offset 20
 1014 052a 4878 0006 		pea 6.w
 1015               		.cfi_def_cfa_offset 24
 1016 052e 4878 0001 		pea 1.w
 1017               		.cfi_def_cfa_offset 28
 1018 0532 4879 0000 		pea .LC9
 1018      0000 
 1019               		.cfi_def_cfa_offset 32
 1020 0538 47F9 0000 		lea fwrite,%a3
 1020      0000 
 1021 053e 4E93      		jsr (%a3)
 1022               	.LVL80:
 216:test3.c       **** 	
 1023               		.loc 1 216 2 view .LVU202
 1024               	.LBB32:
 1025               	.LBI32:


 183:test3.c       **** 	// refresh current runtime
 1026               		.loc 1 183 6 view .LVU203
 1027               	.LBB33:
 185:test3.c       **** 	fprintf(fd, "%02d:%02d:%02d", global_hour, global_min, global_sec);		// (10, 20)
 1028               		.loc 1 185 2 view .LVU204
 1029               	.LBB34:
 1030               	.LBI34:
  45:test3.c       **** 	fprintf(fd, "\033[%d;%dH", x, y);
 1031               		.loc 1 45 6 view .LVU205
 1032               	.LBB35:
  46:test3.c       **** }
 1033               		.loc 1 46 2 view .LVU206
 1034 0540 2F39 0000 		move.l clock_pos_y,-(%sp)
 1034      0000 
 1035               		.cfi_def_cfa_offset 36
 1036 0546 2F39 0000 		move.l clock_pos_x,-(%sp)
 1036      0000 
 1037               		.cfi_def_cfa_offset 40
 1038 054c 4879 0000 		pea .LC0
 1038      0000 
 1039               		.cfi_def_cfa_offset 44
 1040 0552 2F02      		move.l %d2,-(%sp)
 1041               		.cfi_def_cfa_offset 48
 1042 0554 45F9 0000 		lea fprintf,%a2
 1042      0000 
 1043 055a 4E92      		jsr (%a2)
 1044               	.LVL81:
  46:test3.c       **** }
 1045               		.loc 1 46 2 is_stmt 0 view .LVU207
 1046               	.LBE35:
 1047               	.LBE34:
 186:test3.c       **** }
 1048               		.loc 1 186 2 is_stmt 1 view .LVU208
 1049 055c 4FEF 001C 		lea (28,%sp),%sp
 1050               		.cfi_def_cfa_offset 20
 1051 0560 2EB9 0000 		move.l global_sec,(%sp)
 1051      0000 
 1052 0566 2F39 0000 		move.l global_min,-(%sp)
 1052      0000 
 1053               		.cfi_def_cfa_offset 24
 1054 056c 2F39 0000 		move.l global_hour,-(%sp)
 1054      0000 
 1055               		.cfi_def_cfa_offset 28
 1056 0572 4879 0000 		pea .LC20
 1056      0000 
 1057               		.cfi_def_cfa_offset 32
 1058 0578 2F02      		move.l %d2,-(%sp)
 1059               		.cfi_def_cfa_offset 36
 1060 057a 4E92      		jsr (%a2)
 1061               	.LVL82:
 186:test3.c       **** }
 1062               		.loc 1 186 2 is_stmt 0 view .LVU209
 1063               	.LBE33:
 1064               	.LBE32:
 219:test3.c       **** 	
 1065               		.loc 1 219 2 is_stmt 1 view .LVU210
 1066 057c 2F02      		move.l %d2,-(%sp)


 1067               		.cfi_def_cfa_offset 40
 1068 057e 4EBA FF16 		jsr refresh_chat
 1069               	.LVL83:
 222:test3.c       **** 	
 1070               		.loc 1 222 2 view .LVU211
 1071               	.LBB39:
 1072               	.LBI39:
  45:test3.c       **** 	fprintf(fd, "\033[%d;%dH", x, y);
 1073               		.loc 1 45 6 view .LVU212
 1074               	.LBB40:
  46:test3.c       **** }
 1075               		.loc 1 46 2 view .LVU213
 1076 0582 2F39 0000 		move.l chatlog_y,-(%sp)
 1076      0000 
 1077               		.cfi_def_cfa_offset 44
 1078 0588 2039 0000 		move.l chatlog_x,%d0
 1078      0000 
 1079 058e 5480      		addq.l #2,%d0
 1080               	.LVL84:
  46:test3.c       **** }
 1081               		.loc 1 46 2 is_stmt 0 view .LVU214
 1082 0590 2F00      		move.l %d0,-(%sp)
 1083               		.cfi_def_cfa_offset 48
 1084 0592 4879 0000 		pea .LC0
 1084      0000 
 1085               		.cfi_def_cfa_offset 52
 1086 0598 2F02      		move.l %d2,-(%sp)
 1087               		.cfi_def_cfa_offset 56
 1088 059a 4E92      		jsr (%a2)
 1089               	.LVL85:
  46:test3.c       **** }
 1090               		.loc 1 46 2 view .LVU215
 1091               	.LBE40:
 1092               	.LBE39:
 225:test3.c       **** }
 1093               		.loc 1 225 2 is_stmt 1 view .LVU216
 1094 059c 4FEF 0024 		lea (36,%sp),%sp
 1095               		.cfi_def_cfa_offset 20
 1096 05a0 2E82      		move.l %d2,(%sp)
 1097 05a2 4878 0006 		pea 6.w
 1098               		.cfi_def_cfa_offset 24
 1099 05a6 4878 0001 		pea 1.w
 1100               		.cfi_def_cfa_offset 28
 1101 05aa 4879 0000 		pea .LC19
 1101      0000 
 1102               		.cfi_def_cfa_offset 32
 1103 05b0 4E93      		jsr (%a3)
 1104               	.LVL86:
 226:test3.c       **** 
 1105               		.loc 1 226 1 is_stmt 0 view .LVU217
 1106 05b2 4FEF 0010 		lea (16,%sp),%sp
 1107               		.cfi_def_cfa_offset 16
 1108 05b6 4CDF 0C04 		movem.l (%sp)+,#3076
 1109               	.LVL87:
 226:test3.c       **** 
 1110               		.loc 1 226 1 view .LVU218
 1111 05ba 4E75      		rts


 1112               	.L35:
 210:test3.c       **** 	
 1113               		.loc 1 210 2 is_stmt 1 view .LVU219
 210:test3.c       **** 	
 1114               		.loc 1 210 4 is_stmt 0 view .LVU220
 1115 05bc 5380      		subq.l #1,%d0
 1116 05be 6600 FF68 		jne .L36
 210:test3.c       **** 	
 1117               		.loc 1 210 19 is_stmt 1 discriminator 1 view .LVU221
 210:test3.c       **** 	
 1118               		.loc 1 210 22 is_stmt 0 discriminator 1 view .LVU222
 1119 05c2 2439 0000 		move.l com1out,%d2
 1119      0000 
 1120               	.LVL88:
 213:test3.c       **** 	
 1121               		.loc 1 213 2 is_stmt 1 discriminator 1 view .LVU223
 1122 05c8 2F02      		move.l %d2,-(%sp)
 1123               		.cfi_def_cfa_offset 20
 1124 05ca 4878 0006 		pea 6.w
 1125               		.cfi_def_cfa_offset 24
 1126 05ce 4878 0001 		pea 1.w
 1127               		.cfi_def_cfa_offset 28
 1128 05d2 4879 0000 		pea .LC9
 1128      0000 
 1129               		.cfi_def_cfa_offset 32
 1130 05d8 47F9 0000 		lea fwrite,%a3
 1130      0000 
 1131 05de 4E93      		jsr (%a3)
 1132               	.LVL89:
 216:test3.c       **** 	
 1133               		.loc 1 216 2 discriminator 1 view .LVU224
 1134               	.LBB42:
 183:test3.c       **** 	// refresh current runtime
 1135               		.loc 1 183 6 discriminator 1 view .LVU225
 1136               	.LBB38:
 185:test3.c       **** 	fprintf(fd, "%02d:%02d:%02d", global_hour, global_min, global_sec);		// (10, 20)
 1137               		.loc 1 185 2 discriminator 1 view .LVU226
 1138               	.LBB37:
  45:test3.c       **** 	fprintf(fd, "\033[%d;%dH", x, y);
 1139               		.loc 1 45 6 discriminator 1 view .LVU227
 1140               	.LBB36:
  46:test3.c       **** }
 1141               		.loc 1 46 2 discriminator 1 view .LVU228
 1142 05e0 2F39 0000 		move.l clock_pos_y,-(%sp)
 1142      0000 
 1143               		.cfi_def_cfa_offset 36
 1144 05e6 2F39 0000 		move.l clock_pos_x,-(%sp)
 1144      0000 
 1145               		.cfi_def_cfa_offset 40
 1146 05ec 4879 0000 		pea .LC0
 1146      0000 
 1147               		.cfi_def_cfa_offset 44
 1148 05f2 2F02      		move.l %d2,-(%sp)
 1149               		.cfi_def_cfa_offset 48
 1150 05f4 45F9 0000 		lea fprintf,%a2
 1150      0000 
 1151 05fa 4E92      		jsr (%a2)


 1152               	.LVL90:
  46:test3.c       **** }
 1153               		.loc 1 46 2 is_stmt 0 discriminator 1 view .LVU229
 1154               	.LBE36:
 1155               	.LBE37:
 186:test3.c       **** }
 1156               		.loc 1 186 2 is_stmt 1 discriminator 1 view .LVU230
 1157 05fc 4FEF 001C 		lea (28,%sp),%sp
 1158               		.cfi_def_cfa_offset 20
 1159 0600 2EB9 0000 		move.l global_sec,(%sp)
 1159      0000 
 1160 0606 2F39 0000 		move.l global_min,-(%sp)
 1160      0000 
 1161               		.cfi_def_cfa_offset 24
 1162 060c 2F39 0000 		move.l global_hour,-(%sp)
 1162      0000 
 1163               		.cfi_def_cfa_offset 28
 1164 0612 4879 0000 		pea .LC20
 1164      0000 
 1165               		.cfi_def_cfa_offset 32
 1166 0618 2F02      		move.l %d2,-(%sp)
 1167               		.cfi_def_cfa_offset 36
 1168 061a 4E92      		jsr (%a2)
 1169               	.LVL91:
 186:test3.c       **** }
 1170               		.loc 1 186 2 is_stmt 0 discriminator 1 view .LVU231
 1171               	.LBE38:
 1172               	.LBE42:
 219:test3.c       **** 	
 1173               		.loc 1 219 2 is_stmt 1 discriminator 1 view .LVU232
 1174 061c 2F02      		move.l %d2,-(%sp)
 1175               		.cfi_def_cfa_offset 40
 1176 061e 4EBA FE76 		jsr refresh_chat
 1177               	.LVL92:
 222:test3.c       **** 	
 1178               		.loc 1 222 2 discriminator 1 view .LVU233
 1179               	.LBB43:
  45:test3.c       **** 	fprintf(fd, "\033[%d;%dH", x, y);
 1180               		.loc 1 45 6 discriminator 1 view .LVU234
 1181               	.LBB41:
  46:test3.c       **** }
 1182               		.loc 1 46 2 discriminator 1 view .LVU235
 1183 0622 2F39 0000 		move.l chatlog_y,-(%sp)
 1183      0000 
 1184               		.cfi_def_cfa_offset 44
 1185 0628 2039 0000 		move.l chatlog_x,%d0
 1185      0000 
 1186 062e 5480      		addq.l #2,%d0
 1187               	.LVL93:
  46:test3.c       **** }
 1188               		.loc 1 46 2 is_stmt 0 discriminator 1 view .LVU236
 1189 0630 2F00      		move.l %d0,-(%sp)
 1190               		.cfi_def_cfa_offset 48
 1191 0632 4879 0000 		pea .LC0
 1191      0000 
 1192               		.cfi_def_cfa_offset 52
 1193 0638 2F02      		move.l %d2,-(%sp)


 1194               		.cfi_def_cfa_offset 56
 1195 063a 4E92      		jsr (%a2)
 1196               	.LVL94:
  46:test3.c       **** }
 1197               		.loc 1 46 2 discriminator 1 view .LVU237
 1198               	.LBE41:
 1199               	.LBE43:
 225:test3.c       **** }
 1200               		.loc 1 225 2 is_stmt 1 discriminator 1 view .LVU238
 1201 063c 4FEF 0024 		lea (36,%sp),%sp
 1202               		.cfi_def_cfa_offset 20
 1203 0640 2E82      		move.l %d2,(%sp)
 1204 0642 4878 0006 		pea 6.w
 1205               		.cfi_def_cfa_offset 24
 1206 0646 4878 0001 		pea 1.w
 1207               		.cfi_def_cfa_offset 28
 1208 064a 4879 0000 		pea .LC19
 1208      0000 
 1209               		.cfi_def_cfa_offset 32
 1210 0650 4E93      		jsr (%a3)
 1211               	.LVL95:
 226:test3.c       **** 
 1212               		.loc 1 226 1 is_stmt 0 discriminator 1 view .LVU239
 1213 0652 4FEF 0010 		lea (16,%sp),%sp
 1214               		.cfi_def_cfa_offset 16
 1215 0656 4CDF 0C04 		movem.l (%sp)+,#3076
 1216               	.LVL96:
 226:test3.c       **** 
 1217               		.loc 1 226 1 discriminator 1 view .LVU240
 1218 065a 4E75      		rts
 1219               		.cfi_endproc
 1220               	.LFE9:
 1221               		.size	draw_client_ui, .-draw_client_ui
 1222               		.section	.rodata.str1.1
 1223               	.LC22:
 1224 026c 2563 00   		.string	"%c"
 1225               	.LC23:
 1226 026f 5265 6365 		.string	"Received message: %s\n"
 1226      6976 6564 
 1226      206D 6573 
 1226      7361 6765 
 1226      3A20 2573 
 1227               		.text
 1228               		.align	2
 1229               		.globl	get_client_input
 1230               		.type	get_client_input, @function
 1231               	get_client_input:
 1232               	.LVL97:
 1233               	.LFB10:
 228:test3.c       **** 	FILE* fd;
 1234               		.loc 1 228 36 is_stmt 1 view -0
 1235               		.cfi_startproc
 228:test3.c       **** 	FILE* fd;
 1236               		.loc 1 228 36 is_stmt 0 view .LVU242
 1237 065c 4E56 FF98 		link.w %fp,#-104
 1238               		.cfi_offset 14, -8
 1239               		.cfi_def_cfa 14, 8


 1240               	.LVL98:
 228:test3.c       **** 	FILE* fd;
 1241               		.loc 1 228 36 view .LVU243
 1242 0660 2F02      		move.l %d2,-(%sp)
 1243               		.cfi_offset 2, -116
 1244 0662 202E 0008 		move.l 8(%fp),%d0
 229:test3.c       **** 	if(channel == 0) fd = com0out;
 1245               		.loc 1 229 2 is_stmt 1 view .LVU244
 230:test3.c       **** 	if(channel == 1) fd = com1out;
 1246               		.loc 1 230 2 view .LVU245
 230:test3.c       **** 	if(channel == 1) fd = com1out;
 1247               		.loc 1 230 4 is_stmt 0 view .LVU246
 1248 0666 665C      		jne .L40
 230:test3.c       **** 	if(channel == 1) fd = com1out;
 1249               		.loc 1 230 19 is_stmt 1 discriminator 1 view .LVU247
 230:test3.c       **** 	if(channel == 1) fd = com1out;
 1250               		.loc 1 230 22 is_stmt 0 discriminator 1 view .LVU248
 1251 0668 2439 0000 		move.l com0out,%d2
 1251      0000 
 1252               	.LVL99:
 231:test3.c       **** 	
 1253               		.loc 1 231 2 is_stmt 1 discriminator 1 view .LVU249
 1254               	.L41:
 233:test3.c       **** 	int input_index = 0;
 1255               		.loc 1 233 2 view .LVU250
 234:test3.c       **** 	if (inbyte(fd)) {
 1256               		.loc 1 234 2 view .LVU251
 235:test3.c       **** 		// Input is available, use fscanf to read from com0in
 1257               		.loc 1 235 2 view .LVU252
 235:test3.c       **** 		// Input is available, use fscanf to read from com0in
 1258               		.loc 1 235 6 is_stmt 0 view .LVU253
 1259 066e 2F02      		move.l %d2,-(%sp)
 1260 0670 4EB9 0000 		jsr inbyte
 1260      0000 
 1261               	.LVL100:
 235:test3.c       **** 		// Input is available, use fscanf to read from com0in
 1262               		.loc 1 235 5 view .LVU254
 1263 0676 588F      		addq.l #4,%sp
 1264 0678 4A00      		tst.b %d0
 1265 067a 6608      		jne .L49
 1266               	.L39:
 254:test3.c       **** 
 1267               		.loc 1 254 1 view .LVU255
 1268 067c 242E FF94 		move.l -108(%fp),%d2
 1269               	.LVL101:
 254:test3.c       **** 
 1270               		.loc 1 254 1 view .LVU256
 1271 0680 4E5E      		unlk %fp
 1272               	.LVL102:
 254:test3.c       **** 
 1273               		.loc 1 254 1 view .LVU257
 1274 0682 4E75      		rts
 1275               	.LVL103:
 1276               	.L49:
 1277               	.LBB44:
 237:test3.c       **** 		fscanf(fd, "%c", &tmp);  // Read one character at a time
 1278               		.loc 1 237 3 is_stmt 1 view .LVU258


 238:test3.c       ****             
 1279               		.loc 1 238 3 view .LVU259
 1280 0684 486E FF9A 		pea -102(%fp)
 1281 0688 4879 0000 		pea .LC22
 1281      0000 
 1282 068e 2F02      		move.l %d2,-(%sp)
 1283 0690 4EB9 0000 		jsr fscanf
 1283      0000 
 1284               	.LVL104:
 240:test3.c       **** 			// End of input, process the message
 1285               		.loc 1 240 3 view .LVU260
 240:test3.c       **** 			// End of input, process the message
 1286               		.loc 1 240 6 is_stmt 0 view .LVU261
 1287 0696 4FEF 000C 		lea (12,%sp),%sp
 1288 069a 0C2E 000A 		cmp.b #10,-102(%fp)
 1288      FF9A 
 1289 06a0 66DA      		jne .L39
 242:test3.c       **** 			fprintf(fd, "Received message: %s\n", input_buffer);  	// Process message
 1290               		.loc 1 242 4 is_stmt 1 view .LVU262
 242:test3.c       **** 			fprintf(fd, "Received message: %s\n", input_buffer);  	// Process message
 1291               		.loc 1 242 30 is_stmt 0 view .LVU263
 1292 06a2 422E FF9B 		clr.b -101(%fp)
 243:test3.c       ****                 
 1293               		.loc 1 243 4 is_stmt 1 view .LVU264
 1294 06a6 486E FF9B 		pea -101(%fp)
 1295 06aa 4879 0000 		pea .LC23
 1295      0000 
 1296 06b0 2F02      		move.l %d2,-(%sp)
 1297 06b2 4EB9 0000 		jsr fprintf
 1297      0000 
 1298               	.LVL105:
 246:test3.c       **** 		} else {
 1299               		.loc 1 246 4 view .LVU265
 246:test3.c       **** 		} else {
 1300               		.loc 1 246 4 is_stmt 0 view .LVU266
 1301 06b8 4FEF 000C 		lea (12,%sp),%sp
 1302               	.LVL106:
 246:test3.c       **** 		} else {
 1303               		.loc 1 246 4 view .LVU267
 1304               	.LBE44:
 254:test3.c       **** 
 1305               		.loc 1 254 1 view .LVU268
 1306 06bc 242E FF94 		move.l -108(%fp),%d2
 1307               	.LVL107:
 254:test3.c       **** 
 1308               		.loc 1 254 1 view .LVU269
 1309 06c0 4E5E      		unlk %fp
 1310               	.LVL108:
 254:test3.c       **** 
 1311               		.loc 1 254 1 view .LVU270
 1312 06c2 4E75      		rts
 1313               	.LVL109:
 1314               	.L40:
 231:test3.c       **** 	
 1315               		.loc 1 231 2 is_stmt 1 view .LVU271
 231:test3.c       **** 	
 1316               		.loc 1 231 4 is_stmt 0 view .LVU272


 1317 06c4 5380      		subq.l #1,%d0
 1318 06c6 66A6      		jne .L41
 231:test3.c       **** 	
 1319               		.loc 1 231 19 is_stmt 1 discriminator 1 view .LVU273
 231:test3.c       **** 	
 1320               		.loc 1 231 22 is_stmt 0 discriminator 1 view .LVU274
 1321 06c8 2439 0000 		move.l com1out,%d2
 1321      0000 
 1322               	.LVL110:
 233:test3.c       **** 	int input_index = 0;
 1323               		.loc 1 233 2 is_stmt 1 discriminator 1 view .LVU275
 234:test3.c       **** 	if (inbyte(fd)) {
 1324               		.loc 1 234 2 discriminator 1 view .LVU276
 235:test3.c       **** 		// Input is available, use fscanf to read from com0in
 1325               		.loc 1 235 2 discriminator 1 view .LVU277
 235:test3.c       **** 		// Input is available, use fscanf to read from com0in
 1326               		.loc 1 235 6 is_stmt 0 discriminator 1 view .LVU278
 1327 06ce 2F02      		move.l %d2,-(%sp)
 1328 06d0 4EB9 0000 		jsr inbyte
 1328      0000 
 1329               	.LVL111:
 235:test3.c       **** 		// Input is available, use fscanf to read from com0in
 1330               		.loc 1 235 5 discriminator 1 view .LVU279
 1331 06d6 588F      		addq.l #4,%sp
 1332 06d8 4A00      		tst.b %d0
 1333 06da 67A0      		jeq .L39
 1334 06dc 60A6      		jra .L49
 1335               		.cfi_endproc
 1336               	.LFE10:
 1337               		.size	get_client_input, .-get_client_input
 1338               		.section	.rodata.str1.1
 1339               	.LC24:
 1340 0285 4869 2079 		.string	"Hi your message starts here\n"
 1340      6F75 7220 
 1340      6D65 7373 
 1340      6167 6520 
 1340      7374 6172 
 1341               		.text
 1342               		.align	2
 1343               		.globl	client1
 1344               		.type	client1, @function
 1345               	client1:
 1346               	.LFB11:
 256:test3.c       **** 	/*
 1347               		.loc 1 256 16 is_stmt 1 view -0
 1348               		.cfi_startproc
 1349 06de 48E7 003C 		movem.l #60,-(%sp)
 1350               		.cfi_def_cfa_offset 20
 1351               		.cfi_offset 10, -20
 1352               		.cfi_offset 11, -16
 1353               		.cfi_offset 12, -12
 1354               		.cfi_offset 13, -8
 267:test3.c       **** 	
 1355               		.loc 1 267 2 view .LVU281
 1356 06e2 42A7      		clr.l -(%sp)
 1357               		.cfi_def_cfa_offset 24
 1358 06e4 4EBA FA5C 		jsr welcome_ui


 1359               	.LVL112:
 270:test3.c       **** 	strcpy(chatlog[0], "Hi your message starts here\n");
 1360               		.loc 1 270 2 view .LVU282
 1361 06e8 13FC 0061 		move.b #97,chatlog_sender
 1361      0000 0000 
 1362 06f0 13FC 006E 		move.b #110,chatlog_sender+1
 1362      0000 0000 
 1363 06f8 13FC 006E 		move.b #110,chatlog_sender+2
 1363      0000 0000 
 1364 0700 13FC 006F 		move.b #111,chatlog_sender+3
 1364      0000 0000 
 1365 0708 13FC 0075 		move.b #117,chatlog_sender+4
 1365      0000 0000 
 1366 0710 13FC 006E 		move.b #110,chatlog_sender+5
 1366      0000 0000 
 1367 0718 13FC 0063 		move.b #99,chatlog_sender+6
 1367      0000 0000 
 1368 0720 13FC 0065 		move.b #101,chatlog_sender+7
 1368      0000 0000 
 1369 0728 13FC 0072 		move.b #114,chatlog_sender+8
 1369      0000 0000 
 1370 0730 4239 0000 		clr.b chatlog_sender+9
 1370      0000 
 271:test3.c       **** 	
 1371               		.loc 1 271 2 view .LVU283
 1372 0736 4878 001D 		pea 29.w
 1373               		.cfi_def_cfa_offset 28
 1374 073a 4879 0000 		pea .LC24
 1374      0000 
 1375               		.cfi_def_cfa_offset 32
 1376 0740 4879 0000 		pea chatlog
 1376      0000 
 1377               		.cfi_def_cfa_offset 36
 1378 0746 4EB9 0000 		jsr memcpy
 1378      0000 
 1379               	.LVL113:
 1380 074c 4FEF 0010 		lea (16,%sp),%sp
 1381               		.cfi_def_cfa_offset 20
 1382 0750 4BFA FDC4 		lea draw_client_ui,%a5
 1383 0754 47F9 0000 		lea P,%a3
 1383      0000 
 1384 075a 49FA FF00 		lea get_client_input,%a4
 1385 075e 45F9 0000 		lea V,%a2
 1385      0000 
 1386               	.L51:
 273:test3.c       **** 	
 1387               		.loc 1 273 2 discriminator 1 view .LVU284
 275:test3.c       **** 		// draw the ui for client1
 1388               		.loc 1 275 2 discriminator 1 view .LVU285
 277:test3.c       **** 		
 1389               		.loc 1 277 3 discriminator 1 view .LVU286
 1390 0764 42A7      		clr.l -(%sp)
 1391               		.cfi_def_cfa_offset 24
 1392 0766 4E95      		jsr (%a5)
 1393               	.LVL114:
 280:test3.c       **** 		P(1);
 1394               		.loc 1 280 3 discriminator 1 view .LVU287


 1395 0768 42A7      		clr.l -(%sp)
 1396               		.cfi_def_cfa_offset 28
 1397 076a 4E93      		jsr (%a3)
 1398               	.LVL115:
 281:test3.c       **** 			get_client_input(0);
 1399               		.loc 1 281 3 discriminator 1 view .LVU288
 1400 076c 4878 0001 		pea 1.w
 1401               		.cfi_def_cfa_offset 32
 1402 0770 4E93      		jsr (%a3)
 1403               	.LVL116:
 282:test3.c       **** 			// input the string into chatlog
 1404               		.loc 1 282 4 discriminator 1 view .LVU289
 1405 0772 42A7      		clr.l -(%sp)
 1406               		.cfi_def_cfa_offset 36
 1407 0774 4E94      		jsr (%a4)
 1408               	.LVL117:
 287:test3.c       **** 		V(0);	
 1409               		.loc 1 287 3 discriminator 1 view .LVU290
 1410 0776 4878 0001 		pea 1.w
 1411               		.cfi_def_cfa_offset 40
 1412 077a 4E92      		jsr (%a2)
 1413               	.LVL118:
 288:test3.c       **** 	}
 1414               		.loc 1 288 3 discriminator 1 view .LVU291
 1415 077c 42A7      		clr.l -(%sp)
 1416               		.cfi_def_cfa_offset 44
 1417 077e 4E92      		jsr (%a2)
 1418               	.LVL119:
 275:test3.c       **** 		// draw the ui for client1
 1419               		.loc 1 275 7 discriminator 1 view .LVU292
 288:test3.c       **** 	}
 1420               		.loc 1 288 3 is_stmt 0 discriminator 1 view .LVU293
 1421 0780 4FEF 0018 		lea (24,%sp),%sp
 1422               		.cfi_def_cfa_offset 20
 273:test3.c       **** 	
 1423               		.loc 1 273 2 is_stmt 1 discriminator 1 view .LVU294
 275:test3.c       **** 		// draw the ui for client1
 1424               		.loc 1 275 2 discriminator 1 view .LVU295
 277:test3.c       **** 		
 1425               		.loc 1 277 3 discriminator 1 view .LVU296
 1426 0784 42A7      		clr.l -(%sp)
 1427               		.cfi_def_cfa_offset 24
 1428 0786 4E95      		jsr (%a5)
 1429               	.LVL120:
 280:test3.c       **** 		P(1);
 1430               		.loc 1 280 3 discriminator 1 view .LVU297
 1431 0788 42A7      		clr.l -(%sp)
 1432               		.cfi_def_cfa_offset 28
 1433 078a 4E93      		jsr (%a3)
 1434               	.LVL121:
 281:test3.c       **** 			get_client_input(0);
 1435               		.loc 1 281 3 discriminator 1 view .LVU298
 1436 078c 4878 0001 		pea 1.w
 1437               		.cfi_def_cfa_offset 32
 1438 0790 4E93      		jsr (%a3)
 1439               	.LVL122:
 282:test3.c       **** 			// input the string into chatlog


 1440               		.loc 1 282 4 discriminator 1 view .LVU299
 1441 0792 42A7      		clr.l -(%sp)
 1442               		.cfi_def_cfa_offset 36
 1443 0794 4E94      		jsr (%a4)
 1444               	.LVL123:
 287:test3.c       **** 		V(0);	
 1445               		.loc 1 287 3 discriminator 1 view .LVU300
 1446 0796 4878 0001 		pea 1.w
 1447               		.cfi_def_cfa_offset 40
 1448 079a 4E92      		jsr (%a2)
 1449               	.LVL124:
 288:test3.c       **** 	}
 1450               		.loc 1 288 3 discriminator 1 view .LVU301
 1451 079c 42A7      		clr.l -(%sp)
 1452               		.cfi_def_cfa_offset 44
 1453 079e 4E92      		jsr (%a2)
 1454               	.LVL125:
 275:test3.c       **** 		// draw the ui for client1
 1455               		.loc 1 275 7 discriminator 1 view .LVU302
 288:test3.c       **** 	}
 1456               		.loc 1 288 3 is_stmt 0 discriminator 1 view .LVU303
 1457 07a0 4FEF 0018 		lea (24,%sp),%sp
 1458               		.cfi_def_cfa_offset 20
 1459 07a4 60BE      		jra .L51
 1460               		.cfi_endproc
 1461               	.LFE11:
 1462               		.size	client1, .-client1
 1463               		.section	.text.startup,"ax",@progbits
 1464               		.align	2
 1465               		.globl	main
 1466               		.type	main, @function
 1467               	main:
 1468               	.LFB13:
 309:test3.c       **** 	}
 310:test3.c       **** }
 311:test3.c       **** 
 312:test3.c       **** 
 313:test3.c       **** int main() {
 1469               		.loc 1 313 12 is_stmt 1 view -0
 1470               		.cfi_startproc
 1471 0000 2F0A      		move.l %a2,-(%sp)
 1472               		.cfi_def_cfa_offset 8
 1473               		.cfi_offset 10, -8
 314:test3.c       ****     // initialization
 315:test3.c       ****     init_kernel();		// mandatory
 1474               		.loc 1 315 5 view .LVU305
 1475 0002 4EB9 0000 		jsr init_kernel
 1475      0000 
 1476               	.LVL126:
 316:test3.c       ****     initPort();
 1477               		.loc 1 316 5 view .LVU306
 1478 0008 4EB9 0000 		jsr initPort
 1478      0000 
 1479               	.LVL127:
 317:test3.c       ****     
 318:test3.c       ****     // set tasks and start scheduling
 319:test3.c       ****     set_task(runtime_clock);


 1480               		.loc 1 319 5 view .LVU307
 1481 000e 4879 0000 		pea runtime_clock
 1481      0000 
 1482               		.cfi_def_cfa_offset 12
 1483 0014 45F9 0000 		lea set_task,%a2
 1483      0000 
 1484 001a 4E92      		jsr (%a2)
 1485               	.LVL128:
 320:test3.c       ****     set_task(client1);
 1486               		.loc 1 320 5 view .LVU308
 1487 001c 4879 0000 		pea client1
 1487      0000 
 1488               		.cfi_def_cfa_offset 16
 1489 0022 4E92      		jsr (%a2)
 1490               	.LVL129:
 321:test3.c       ****     set_task(client2);
 1491               		.loc 1 321 5 view .LVU309
 1492 0024 4879 0000 		pea client2
 1492      0000 
 1493               		.cfi_def_cfa_offset 20
 1494 002a 4E92      		jsr (%a2)
 1495               	.LVL130:
 322:test3.c       ****     begin_sch();
 1496               		.loc 1 322 5 view .LVU310
 1497 002c 4EB9 0000 		jsr begin_sch
 1497      0000 
 1498               	.LVL131:
 323:test3.c       **** 	
 324:test3.c       **** 	while(1)
 1499               		.loc 1 324 2 view .LVU311
 325:test3.c       **** 	
 326:test3.c       ****     return 0;
 1500               		.loc 1 326 5 view .LVU312
 327:test3.c       **** }
 1501               		.loc 1 327 1 is_stmt 0 view .LVU313
 1502 0032 4FEF 000C 		lea (12,%sp),%sp
 1503               		.cfi_def_cfa_offset 8
 1504 0036 7000      		moveq #0,%d0
 1505 0038 245F      		move.l (%sp)+,%a2
 1506 003a 4E75      		rts
 1507               		.cfi_endproc
 1508               	.LFE13:
 1509               		.size	main, .-main
 1510               		.globl	chatlog
 1511               		.section	.bss
 1512               		.type	chatlog, @object
 1513               		.size	chatlog, 101000
 1514               	chatlog:
 1515 0000 0000 0000 		.zero	101000
 1515      0000 0000 
 1515      0000 0000 
 1515      0000 0000 
 1515      0000 0000 
 1516               		.globl	chatlog_sender
 1517               		.type	chatlog_sender, @object
 1518               		.size	chatlog_sender, 11000
 1519               	chatlog_sender:


 1520 18a88 0000 0000 		.zero	11000
 1520      0000 0000 
 1520      0000 0000 
 1520      0000 0000 
 1520      0000 0000 
 1521               		.globl	chatlog_size
 1522               		.align	2
 1523               		.type	chatlog_size, @object
 1524               		.size	chatlog_size, 4
 1525               	chatlog_size:
 1526 1b580 0000 0000 		.zero	4
 1527               		.globl	chatlog_write_index
 1528               		.align	2
 1529               		.type	chatlog_write_index, @object
 1530               		.size	chatlog_write_index, 4
 1531               	chatlog_write_index:
 1532 1b584 0000 0000 		.zero	4
 1533               		.globl	chatlog_read_index
 1534               		.align	2
 1535               		.type	chatlog_read_index, @object
 1536               		.size	chatlog_read_index, 4
 1537               	chatlog_read_index:
 1538 1b588 0000 0000 		.zero	4
 1539               		.globl	chatlog_y
 1540               		.align	2
 1541               		.type	chatlog_y, @object
 1542               		.size	chatlog_y, 4
 1543               	chatlog_y:
 1544 1b58c 0000 0000 		.zero	4
 1545               		.globl	chatlog_x
 1546               		.align	2
 1547               		.type	chatlog_x, @object
 1548               		.size	chatlog_x, 4
 1549               	chatlog_x:
 1550 1b590 0000 0000 		.zero	4
 1551               		.globl	chatlog_start_y
 1552               		.align	2
 1553               		.type	chatlog_start_y, @object
 1554               		.size	chatlog_start_y, 4
 1555               	chatlog_start_y:
 1556 1b594 0000 0000 		.zero	4
 1557               		.globl	chatlog_start_x
 1558               		.align	2
 1559               		.type	chatlog_start_x, @object
 1560               		.size	chatlog_start_x, 4
 1561               	chatlog_start_x:
 1562 1b598 0000 0000 		.zero	4
 1563               		.globl	clock_pos_y
 1564               		.align	2
 1565               		.type	clock_pos_y, @object
 1566               		.size	clock_pos_y, 4
 1567               	clock_pos_y:
 1568 1b59c 0000 0000 		.zero	4
 1569               		.globl	clock_pos_x
 1570               		.align	2
 1571               		.type	clock_pos_x, @object
 1572               		.size	clock_pos_x, 4


 1573               	clock_pos_x:
 1574 1b5a0 0000 0000 		.zero	4
 1575               		.globl	global_sec
 1576               		.align	2
 1577               		.type	global_sec, @object
 1578               		.size	global_sec, 4
 1579               	global_sec:
 1580 1b5a4 0000 0000 		.zero	4
 1581               		.globl	global_min
 1582               		.align	2
 1583               		.type	global_min, @object
 1584               		.size	global_min, 4
 1585               	global_min:
 1586 1b5a8 0000 0000 		.zero	4
 1587               		.globl	global_hour
 1588               		.align	2
 1589               		.type	global_hour, @object
 1590               		.size	global_hour, 4
 1591               	global_hour:
 1592 1b5ac 0000 0000 		.zero	4
 1593               		.globl	com1out
 1594               		.align	2
 1595               		.type	com1out, @object
 1596               		.size	com1out, 4
 1597               	com1out:
 1598 1b5b0 0000 0000 		.zero	4
 1599               		.globl	com1in
 1600               		.align	2
 1601               		.type	com1in, @object
 1602               		.size	com1in, 4
 1603               	com1in:
 1604 1b5b4 0000 0000 		.zero	4
 1605               		.globl	com0out
 1606               		.align	2
 1607               		.type	com0out, @object
 1608               		.size	com0out, 4
 1609               	com0out:
 1610 1b5b8 0000 0000 		.zero	4
 1611               		.globl	com0in
 1612               		.align	2
 1613               		.type	com0in, @object
 1614               		.size	com0in, 4
 1615               	com0in:
 1616 1b5bc 0000 0000 		.zero	4
 1617               		.text
 1618               	.Letext0:
 1619               		.file 2 "/usr/local/lib/gcc/m68k-elf/11.4.0/include/stddef.h"
 1620               		.file 3 "/usr/local/m68k-elf/include/sys/_types.h"
 1621               		.file 4 "/usr/local/m68k-elf/include/sys/reent.h"
 1622               		.file 5 "/usr/local/m68k-elf/include/sys/lock.h"
 1623               		.file 6 "/usr/local/m68k-elf/include/stdio.h"
 1624               		.file 7 "mtk_c.h"
 1625               		.file 8 "/usr/local/m68k-elf/include/stdlib.h"
 1626               		.file 9 "<built-in>"
 1627               		.section	.debug_info,"",@progbits
 1628               	.Ldebug_info0:
 1629 0000 0000 10F3 		.long	0x10f3


 1630 0004 0005      		.word	0x5
 1631 0006 01        		.byte	0x1
 1632 0007 04        		.byte	0x4
 1633 0008 0000 0000 		.long	.Ldebug_abbrev0
 1634 000c 26        		.uleb128 0x26
 1635 000d 0000 0000 		.long	.LASF153
 1636 0011 1D        		.byte	0x1d
 1637 0012 0000 0000 		.long	.LASF154
 1638 0016 0000 0000 		.long	.LASF155
 1639 001a 0000 0000 		.long	.LLRL32
 1640 001e 0000 0000 		.long	0
 1641 0022 0000 0000 		.long	.Ldebug_line0
 1642 0026 0A        		.uleb128 0xa
 1643 0027 01        		.byte	0x1
 1644 0028 06        		.byte	0x6
 1645 0029 0000 0000 		.long	.LASF0
 1646 002d 0A        		.uleb128 0xa
 1647 002e 01        		.byte	0x1
 1648 002f 08        		.byte	0x8
 1649 0030 0000 0000 		.long	.LASF1
 1650 0034 0A        		.uleb128 0xa
 1651 0035 02        		.byte	0x2
 1652 0036 05        		.byte	0x5
 1653 0037 0000 0000 		.long	.LASF2
 1654 003b 0A        		.uleb128 0xa
 1655 003c 02        		.byte	0x2
 1656 003d 07        		.byte	0x7
 1657 003e 0000 0000 		.long	.LASF3
 1658 0042 0A        		.uleb128 0xa
 1659 0043 04        		.byte	0x4
 1660 0044 05        		.byte	0x5
 1661 0045 0000 0000 		.long	.LASF4
 1662 0049 0A        		.uleb128 0xa
 1663 004a 04        		.byte	0x4
 1664 004b 07        		.byte	0x7
 1665 004c 0000 0000 		.long	.LASF5
 1666 0050 0A        		.uleb128 0xa
 1667 0051 08        		.byte	0x8
 1668 0052 05        		.byte	0x5
 1669 0053 0000 0000 		.long	.LASF6
 1670 0057 0A        		.uleb128 0xa
 1671 0058 08        		.byte	0x8
 1672 0059 07        		.byte	0x7
 1673 005a 0000 0000 		.long	.LASF7
 1674 005e 0A        		.uleb128 0xa
 1675 005f 0C        		.byte	0xc
 1676 0060 04        		.byte	0x4
 1677 0061 0000 0000 		.long	.LASF8
 1678 0065 1B        		.uleb128 0x1b
 1679 0066 0000 0000 		.long	.LASF10
 1680 006a 02        		.byte	0x2
 1681 006b 015E      		.word	0x15e
 1682 006d 17        		.byte	0x17
 1683 006e 0000 0072 		.long	0x72
 1684 0072 0A        		.uleb128 0xa
 1685 0073 04        		.byte	0x4
 1686 0074 07        		.byte	0x7


 1687 0075 0000 0000 		.long	.LASF9
 1688 0079 0D        		.uleb128 0xd
 1689 007a 0000 0000 		.long	.LASF11
 1690 007e 03        		.byte	0x3
 1691 007f 2E        		.byte	0x2e
 1692 0080 0E        		.byte	0xe
 1693 0081 0000 0042 		.long	0x42
 1694 0085 27        		.uleb128 0x27
 1695 0086 04        		.byte	0x4
 1696 0087 05        		.byte	0x5
 1697 0088 696E 7400 		.string	"int"
 1698 008c 1C        		.uleb128 0x1c
 1699 008d 0000 0085 		.long	0x85
 1700 0091 0D        		.uleb128 0xd
 1701 0092 0000 0000 		.long	.LASF12
 1702 0096 03        		.byte	0x3
 1703 0097 74        		.byte	0x74
 1704 0098 0E        		.byte	0xe
 1705 0099 0000 0042 		.long	0x42
 1706 009d 0D        		.uleb128 0xd
 1707 009e 0000 0000 		.long	.LASF13
 1708 00a2 03        		.byte	0x3
 1709 00a3 93        		.byte	0x93
 1710 00a4 17        		.byte	0x17
 1711 00a5 0000 0042 		.long	0x42
 1712 00a9 28        		.uleb128 0x28
 1713 00aa 04        		.byte	0x4
 1714 00ab 03        		.byte	0x3
 1715 00ac A5        		.byte	0xa5
 1716 00ad 03        		.byte	0x3
 1717 00ae 0000 00C9 		.long	0xc9
 1718 00b2 1D        		.uleb128 0x1d
 1719 00b3 0000 0000 		.long	.LASF14
 1720 00b7 A7        		.byte	0xa7
 1721 00b8 0C        		.byte	0xc
 1722 00b9 0000 0065 		.long	0x65
 1723 00bd 1D        		.uleb128 0x1d
 1724 00be 0000 0000 		.long	.LASF15
 1725 00c2 A8        		.byte	0xa8
 1726 00c3 13        		.byte	0x13
 1727 00c4 0000 00C9 		.long	0xc9
 1728 00c8 00        		.byte	0
 1729 00c9 08        		.uleb128 0x8
 1730 00ca 0000 002D 		.long	0x2d
 1731 00ce 0000 00D9 		.long	0xd9
 1732 00d2 09        		.uleb128 0x9
 1733 00d3 0000 0049 		.long	0x49
 1734 00d7 03        		.byte	0x3
 1735 00d8 00        		.byte	0
 1736 00d9 29        		.uleb128 0x29
 1737 00da 08        		.byte	0x8
 1738 00db 03        		.byte	0x3
 1739 00dc A2        		.byte	0xa2
 1740 00dd 09        		.byte	0x9
 1741 00de 0000 00FD 		.long	0xfd
 1742 00e2 03        		.uleb128 0x3
 1743 00e3 0000 0000 		.long	.LASF16


 1744 00e7 03        		.byte	0x3
 1745 00e8 A4        		.byte	0xa4
 1746 00e9 07        		.byte	0x7
 1747 00ea 0000 0085 		.long	0x85
 1748 00ee 00        		.byte	0
 1749 00ef 03        		.uleb128 0x3
 1750 00f0 0000 0000 		.long	.LASF17
 1751 00f4 03        		.byte	0x3
 1752 00f5 A9        		.byte	0xa9
 1753 00f6 05        		.byte	0x5
 1754 00f7 0000 00A9 		.long	0xa9
 1755 00fb 04        		.byte	0x4
 1756 00fc 00        		.byte	0
 1757 00fd 0D        		.uleb128 0xd
 1758 00fe 0000 0000 		.long	.LASF18
 1759 0102 03        		.byte	0x3
 1760 0103 AA        		.byte	0xaa
 1761 0104 03        		.byte	0x3
 1762 0105 0000 00D9 		.long	0xd9
 1763 0109 2A        		.uleb128 0x2a
 1764 010a 04        		.byte	0x4
 1765 010b 0D        		.uleb128 0xd
 1766 010c 0000 0000 		.long	.LASF19
 1767 0110 04        		.byte	0x4
 1768 0111 16        		.byte	0x16
 1769 0112 19        		.byte	0x19
 1770 0113 0000 0049 		.long	0x49
 1771 0117 0D        		.uleb128 0xd
 1772 0118 0000 0000 		.long	.LASF20
 1773 011c 05        		.byte	0x5
 1774 011d 0C        		.byte	0xc
 1775 011e 0D        		.byte	0xd
 1776 011f 0000 0085 		.long	0x85
 1777 0123 0D        		.uleb128 0xd
 1778 0124 0000 0000 		.long	.LASF21
 1779 0128 04        		.byte	0x4
 1780 0129 23        		.byte	0x23
 1781 012a 1B        		.byte	0x1b
 1782 012b 0000 0117 		.long	0x117
 1783 012f 12        		.uleb128 0x12
 1784 0130 0000 0000 		.long	.LASF26
 1785 0134 18        		.byte	0x18
 1786 0135 34        		.byte	0x34
 1787 0136 0000 0185 		.long	0x185
 1788 013a 03        		.uleb128 0x3
 1789 013b 0000 0000 		.long	.LASF22
 1790 013f 04        		.byte	0x4
 1791 0140 36        		.byte	0x36
 1792 0141 13        		.byte	0x13
 1793 0142 0000 0185 		.long	0x185
 1794 0146 00        		.byte	0
 1795 0147 0B        		.uleb128 0xb
 1796 0148 5F6B 00   		.string	"_k"
 1797 014b 37        		.byte	0x37
 1798 014c 07        		.byte	0x7
 1799 014d 0000 0085 		.long	0x85
 1800 0151 04        		.byte	0x4


 1801 0152 03        		.uleb128 0x3
 1802 0153 0000 0000 		.long	.LASF23
 1803 0157 04        		.byte	0x4
 1804 0158 37        		.byte	0x37
 1805 0159 0B        		.byte	0xb
 1806 015a 0000 0085 		.long	0x85
 1807 015e 08        		.byte	0x8
 1808 015f 03        		.uleb128 0x3
 1809 0160 0000 0000 		.long	.LASF24
 1810 0164 04        		.byte	0x4
 1811 0165 37        		.byte	0x37
 1812 0166 14        		.byte	0x14
 1813 0167 0000 0085 		.long	0x85
 1814 016b 0C        		.byte	0xc
 1815 016c 03        		.uleb128 0x3
 1816 016d 0000 0000 		.long	.LASF25
 1817 0171 04        		.byte	0x4
 1818 0172 37        		.byte	0x37
 1819 0173 1B        		.byte	0x1b
 1820 0174 0000 0085 		.long	0x85
 1821 0178 10        		.byte	0x10
 1822 0179 0B        		.uleb128 0xb
 1823 017a 5F78 00   		.string	"_x"
 1824 017d 38        		.byte	0x38
 1825 017e 0B        		.byte	0xb
 1826 017f 0000 018A 		.long	0x18a
 1827 0183 14        		.byte	0x14
 1828 0184 00        		.byte	0
 1829 0185 06        		.uleb128 0x6
 1830 0186 0000 012F 		.long	0x12f
 1831 018a 08        		.uleb128 0x8
 1832 018b 0000 010B 		.long	0x10b
 1833 018f 0000 019A 		.long	0x19a
 1834 0193 09        		.uleb128 0x9
 1835 0194 0000 0049 		.long	0x49
 1836 0198 00        		.byte	0
 1837 0199 00        		.byte	0
 1838 019a 12        		.uleb128 0x12
 1839 019b 0000 0000 		.long	.LASF27
 1840 019f 24        		.byte	0x24
 1841 01a0 3C        		.byte	0x3c
 1842 01a1 0000 021B 		.long	0x21b
 1843 01a5 03        		.uleb128 0x3
 1844 01a6 0000 0000 		.long	.LASF28
 1845 01aa 04        		.byte	0x4
 1846 01ab 3E        		.byte	0x3e
 1847 01ac 09        		.byte	0x9
 1848 01ad 0000 0085 		.long	0x85
 1849 01b1 00        		.byte	0
 1850 01b2 03        		.uleb128 0x3
 1851 01b3 0000 0000 		.long	.LASF29
 1852 01b7 04        		.byte	0x4
 1853 01b8 3F        		.byte	0x3f
 1854 01b9 09        		.byte	0x9
 1855 01ba 0000 0085 		.long	0x85
 1856 01be 04        		.byte	0x4
 1857 01bf 03        		.uleb128 0x3


 1858 01c0 0000 0000 		.long	.LASF30
 1859 01c4 04        		.byte	0x4
 1860 01c5 40        		.byte	0x40
 1861 01c6 09        		.byte	0x9
 1862 01c7 0000 0085 		.long	0x85
 1863 01cb 08        		.byte	0x8
 1864 01cc 03        		.uleb128 0x3
 1865 01cd 0000 0000 		.long	.LASF31
 1866 01d1 04        		.byte	0x4
 1867 01d2 41        		.byte	0x41
 1868 01d3 09        		.byte	0x9
 1869 01d4 0000 0085 		.long	0x85
 1870 01d8 0C        		.byte	0xc
 1871 01d9 03        		.uleb128 0x3
 1872 01da 0000 0000 		.long	.LASF32
 1873 01de 04        		.byte	0x4
 1874 01df 42        		.byte	0x42
 1875 01e0 09        		.byte	0x9
 1876 01e1 0000 0085 		.long	0x85
 1877 01e5 10        		.byte	0x10
 1878 01e6 03        		.uleb128 0x3
 1879 01e7 0000 0000 		.long	.LASF33
 1880 01eb 04        		.byte	0x4
 1881 01ec 43        		.byte	0x43
 1882 01ed 09        		.byte	0x9
 1883 01ee 0000 0085 		.long	0x85
 1884 01f2 14        		.byte	0x14
 1885 01f3 03        		.uleb128 0x3
 1886 01f4 0000 0000 		.long	.LASF34
 1887 01f8 04        		.byte	0x4
 1888 01f9 44        		.byte	0x44
 1889 01fa 09        		.byte	0x9
 1890 01fb 0000 0085 		.long	0x85
 1891 01ff 18        		.byte	0x18
 1892 0200 03        		.uleb128 0x3
 1893 0201 0000 0000 		.long	.LASF35
 1894 0205 04        		.byte	0x4
 1895 0206 45        		.byte	0x45
 1896 0207 09        		.byte	0x9
 1897 0208 0000 0085 		.long	0x85
 1898 020c 1C        		.byte	0x1c
 1899 020d 03        		.uleb128 0x3
 1900 020e 0000 0000 		.long	.LASF36
 1901 0212 04        		.byte	0x4
 1902 0213 46        		.byte	0x46
 1903 0214 09        		.byte	0x9
 1904 0215 0000 0085 		.long	0x85
 1905 0219 20        		.byte	0x20
 1906 021a 00        		.byte	0
 1907 021b 12        		.uleb128 0x12
 1908 021c 0000 0000 		.long	.LASF37
 1909 0220 08        		.byte	0x8
 1910 0221 73        		.byte	0x73
 1911 0222 0000 0241 		.long	0x241
 1912 0226 03        		.uleb128 0x3
 1913 0227 0000 0000 		.long	.LASF38
 1914 022b 04        		.byte	0x4


 1915 022c 74        		.byte	0x74
 1916 022d 11        		.byte	0x11
 1917 022e 0000 0241 		.long	0x241
 1918 0232 00        		.byte	0
 1919 0233 03        		.uleb128 0x3
 1920 0234 0000 0000 		.long	.LASF39
 1921 0238 04        		.byte	0x4
 1922 0239 75        		.byte	0x75
 1923 023a 06        		.byte	0x6
 1924 023b 0000 0085 		.long	0x85
 1925 023f 04        		.byte	0x4
 1926 0240 00        		.byte	0
 1927 0241 06        		.uleb128 0x6
 1928 0242 0000 002D 		.long	0x2d
 1929 0246 12        		.uleb128 0x12
 1930 0247 0000 0000 		.long	.LASF40
 1931 024b 68        		.byte	0x68
 1932 024c 98        		.byte	0x98
 1933 024d 0000 037F 		.long	0x37f
 1934 0251 0B        		.uleb128 0xb
 1935 0252 5F70 00   		.string	"_p"
 1936 0255 99        		.byte	0x99
 1937 0256 12        		.byte	0x12
 1938 0257 0000 0241 		.long	0x241
 1939 025b 00        		.byte	0
 1940 025c 0B        		.uleb128 0xb
 1941 025d 5F72 00   		.string	"_r"
 1942 0260 9A        		.byte	0x9a
 1943 0261 07        		.byte	0x7
 1944 0262 0000 0085 		.long	0x85
 1945 0266 04        		.byte	0x4
 1946 0267 0B        		.uleb128 0xb
 1947 0268 5F77 00   		.string	"_w"
 1948 026b 9B        		.byte	0x9b
 1949 026c 07        		.byte	0x7
 1950 026d 0000 0085 		.long	0x85
 1951 0271 08        		.byte	0x8
 1952 0272 03        		.uleb128 0x3
 1953 0273 0000 0000 		.long	.LASF41
 1954 0277 04        		.byte	0x4
 1955 0278 9C        		.byte	0x9c
 1956 0279 09        		.byte	0x9
 1957 027a 0000 0034 		.long	0x34
 1958 027e 0C        		.byte	0xc
 1959 027f 03        		.uleb128 0x3
 1960 0280 0000 0000 		.long	.LASF42
 1961 0284 04        		.byte	0x4
 1962 0285 9D        		.byte	0x9d
 1963 0286 09        		.byte	0x9
 1964 0287 0000 0034 		.long	0x34
 1965 028b 0E        		.byte	0xe
 1966 028c 0B        		.uleb128 0xb
 1967 028d 5F62 6600 		.string	"_bf"
 1968 0291 9E        		.byte	0x9e
 1969 0292 11        		.byte	0x11
 1970 0293 0000 021B 		.long	0x21b
 1971 0297 10        		.byte	0x10


 1972 0298 03        		.uleb128 0x3
 1973 0299 0000 0000 		.long	.LASF43
 1974 029d 04        		.byte	0x4
 1975 029e 9F        		.byte	0x9f
 1976 029f 07        		.byte	0x7
 1977 02a0 0000 0085 		.long	0x85
 1978 02a4 18        		.byte	0x18
 1979 02a5 03        		.uleb128 0x3
 1980 02a6 0000 0000 		.long	.LASF44
 1981 02aa 04        		.byte	0x4
 1982 02ab A6        		.byte	0xa6
 1983 02ac 0A        		.byte	0xa
 1984 02ad 0000 0109 		.long	0x109
 1985 02b1 1C        		.byte	0x1c
 1986 02b2 03        		.uleb128 0x3
 1987 02b3 0000 0000 		.long	.LASF45
 1988 02b7 04        		.byte	0x4
 1989 02b8 A8        		.byte	0xa8
 1990 02b9 1D        		.byte	0x1d
 1991 02ba 0000 0495 		.long	0x495
 1992 02be 20        		.byte	0x20
 1993 02bf 03        		.uleb128 0x3
 1994 02c0 0000 0000 		.long	.LASF46
 1995 02c4 04        		.byte	0x4
 1996 02c5 AA        		.byte	0xaa
 1997 02c6 1D        		.byte	0x1d
 1998 02c7 0000 04C2 		.long	0x4c2
 1999 02cb 24        		.byte	0x24
 2000 02cc 03        		.uleb128 0x3
 2001 02cd 0000 0000 		.long	.LASF47
 2002 02d1 04        		.byte	0x4
 2003 02d2 AD        		.byte	0xad
 2004 02d3 0D        		.byte	0xd
 2005 02d4 0000 04E5 		.long	0x4e5
 2006 02d8 28        		.byte	0x28
 2007 02d9 03        		.uleb128 0x3
 2008 02da 0000 0000 		.long	.LASF48
 2009 02de 04        		.byte	0x4
 2010 02df AE        		.byte	0xae
 2011 02e0 09        		.byte	0x9
 2012 02e1 0000 04FE 		.long	0x4fe
 2013 02e5 2C        		.byte	0x2c
 2014 02e6 0B        		.uleb128 0xb
 2015 02e7 5F75 6200 		.string	"_ub"
 2016 02eb B1        		.byte	0xb1
 2017 02ec 11        		.byte	0x11
 2018 02ed 0000 021B 		.long	0x21b
 2019 02f1 30        		.byte	0x30
 2020 02f2 0B        		.uleb128 0xb
 2021 02f3 5F75 7000 		.string	"_up"
 2022 02f7 B2        		.byte	0xb2
 2023 02f8 12        		.byte	0x12
 2024 02f9 0000 0241 		.long	0x241
 2025 02fd 38        		.byte	0x38
 2026 02fe 0B        		.uleb128 0xb
 2027 02ff 5F75 7200 		.string	"_ur"
 2028 0303 B3        		.byte	0xb3


 2029 0304 07        		.byte	0x7
 2030 0305 0000 0085 		.long	0x85
 2031 0309 3C        		.byte	0x3c
 2032 030a 03        		.uleb128 0x3
 2033 030b 0000 0000 		.long	.LASF49
 2034 030f 04        		.byte	0x4
 2035 0310 B6        		.byte	0xb6
 2036 0311 11        		.byte	0x11
 2037 0312 0000 0503 		.long	0x503
 2038 0316 40        		.byte	0x40
 2039 0317 03        		.uleb128 0x3
 2040 0318 0000 0000 		.long	.LASF50
 2041 031c 04        		.byte	0x4
 2042 031d B7        		.byte	0xb7
 2043 031e 11        		.byte	0x11
 2044 031f 0000 0513 		.long	0x513
 2045 0323 43        		.byte	0x43
 2046 0324 0B        		.uleb128 0xb
 2047 0325 5F6C 6200 		.string	"_lb"
 2048 0329 BA        		.byte	0xba
 2049 032a 11        		.byte	0x11
 2050 032b 0000 021B 		.long	0x21b
 2051 032f 44        		.byte	0x44
 2052 0330 03        		.uleb128 0x3
 2053 0331 0000 0000 		.long	.LASF51
 2054 0335 04        		.byte	0x4
 2055 0336 BD        		.byte	0xbd
 2056 0337 07        		.byte	0x7
 2057 0338 0000 0085 		.long	0x85
 2058 033c 4C        		.byte	0x4c
 2059 033d 03        		.uleb128 0x3
 2060 033e 0000 0000 		.long	.LASF52
 2061 0342 04        		.byte	0x4
 2062 0343 BE        		.byte	0xbe
 2063 0344 0A        		.byte	0xa
 2064 0345 0000 0079 		.long	0x79
 2065 0349 50        		.byte	0x50
 2066 034a 03        		.uleb128 0x3
 2067 034b 0000 0000 		.long	.LASF53
 2068 034f 04        		.byte	0x4
 2069 0350 C1        		.byte	0xc1
 2070 0351 12        		.byte	0x12
 2071 0352 0000 039D 		.long	0x39d
 2072 0356 54        		.byte	0x54
 2073 0357 03        		.uleb128 0x3
 2074 0358 0000 0000 		.long	.LASF54
 2075 035c 04        		.byte	0x4
 2076 035d C5        		.byte	0xc5
 2077 035e 0C        		.byte	0xc
 2078 035f 0000 0123 		.long	0x123
 2079 0363 58        		.byte	0x58
 2080 0364 03        		.uleb128 0x3
 2081 0365 0000 0000 		.long	.LASF55
 2082 0369 04        		.byte	0x4
 2083 036a C7        		.byte	0xc7
 2084 036b 0E        		.byte	0xe
 2085 036c 0000 00FD 		.long	0xfd


 2086 0370 5C        		.byte	0x5c
 2087 0371 03        		.uleb128 0x3
 2088 0372 0000 0000 		.long	.LASF56
 2089 0376 04        		.byte	0x4
 2090 0377 C8        		.byte	0xc8
 2091 0378 09        		.byte	0x9
 2092 0379 0000 0085 		.long	0x85
 2093 037d 64        		.byte	0x64
 2094 037e 00        		.byte	0
 2095 037f 13        		.uleb128 0x13
 2096 0380 0000 009D 		.long	0x9d
 2097 0384 0000 039D 		.long	0x39d
 2098 0388 04        		.uleb128 0x4
 2099 0389 0000 039D 		.long	0x39d
 2100 038d 04        		.uleb128 0x4
 2101 038e 0000 0109 		.long	0x109
 2102 0392 04        		.uleb128 0x4
 2103 0393 0000 0484 		.long	0x484
 2104 0397 04        		.uleb128 0x4
 2105 0398 0000 0085 		.long	0x85
 2106 039c 00        		.byte	0
 2107 039d 06        		.uleb128 0x6
 2108 039e 0000 03A2 		.long	0x3a2
 2109 03a2 2B        		.uleb128 0x2b
 2110 03a3 0000 0000 		.long	.LASF57
 2111 03a7 0116      		.word	0x116
 2112 03a9 04        		.byte	0x4
 2113 03aa 0237      		.word	0x237
 2114 03ac 08        		.byte	0x8
 2115 03ad 0000 0484 		.long	0x484
 2116 03b1 02        		.uleb128 0x2
 2117 03b2 0000 0000 		.long	.LASF58
 2118 03b6 0239      		.word	0x239
 2119 03b8 07        		.byte	0x7
 2120 03b9 0000 0085 		.long	0x85
 2121 03bd 00        		.byte	0
 2122 03be 02        		.uleb128 0x2
 2123 03bf 0000 0000 		.long	.LASF59
 2124 03c3 023E      		.word	0x23e
 2125 03c5 0B        		.byte	0xb
 2126 03c6 0000 0530 		.long	0x530
 2127 03ca 04        		.byte	0x4
 2128 03cb 02        		.uleb128 0x2
 2129 03cc 0000 0000 		.long	.LASF60
 2130 03d0 023E      		.word	0x23e
 2131 03d2 14        		.byte	0x14
 2132 03d3 0000 0530 		.long	0x530
 2133 03d7 08        		.byte	0x8
 2134 03d8 02        		.uleb128 0x2
 2135 03d9 0000 0000 		.long	.LASF61
 2136 03dd 023E      		.word	0x23e
 2137 03df 1E        		.byte	0x1e
 2138 03e0 0000 0530 		.long	0x530
 2139 03e4 0C        		.byte	0xc
 2140 03e5 02        		.uleb128 0x2
 2141 03e6 0000 0000 		.long	.LASF62
 2142 03ea 0240      		.word	0x240


 2143 03ec 08        		.byte	0x8
 2144 03ed 0000 0085 		.long	0x85
 2145 03f1 10        		.byte	0x10
 2146 03f2 02        		.uleb128 0x2
 2147 03f3 0000 0000 		.long	.LASF63
 2148 03f7 0241      		.word	0x241
 2149 03f9 08        		.byte	0x8
 2150 03fa 0000 06B8 		.long	0x6b8
 2151 03fe 14        		.byte	0x14
 2152 03ff 02        		.uleb128 0x2
 2153 0400 0000 0000 		.long	.LASF64
 2154 0404 0246      		.word	0x246
 2155 0406 16        		.byte	0x16
 2156 0407 0000 06CD 		.long	0x6cd
 2157 040b 2E        		.byte	0x2e
 2158 040c 02        		.uleb128 0x2
 2159 040d 0000 0000 		.long	.LASF65
 2160 0411 024C      		.word	0x24c
 2161 0413 0A        		.byte	0xa
 2162 0414 0000 06DD 		.long	0x6dd
 2163 0418 32        		.byte	0x32
 2164 0419 02        		.uleb128 0x2
 2165 041a 0000 0000 		.long	.LASF66
 2166 041e 024F      		.word	0x24f
 2167 0420 13        		.byte	0x13
 2168 0421 0000 0185 		.long	0x185
 2169 0425 36        		.byte	0x36
 2170 0426 02        		.uleb128 0x2
 2171 0427 0000 0000 		.long	.LASF67
 2172 042b 0250      		.word	0x250
 2173 042d 07        		.byte	0x7
 2174 042e 0000 0085 		.long	0x85
 2175 0432 3A        		.byte	0x3a
 2176 0433 02        		.uleb128 0x2
 2177 0434 0000 0000 		.long	.LASF68
 2178 0438 0251      		.word	0x251
 2179 043a 13        		.byte	0x13
 2180 043b 0000 0185 		.long	0x185
 2181 043f 3E        		.byte	0x3e
 2182 0440 02        		.uleb128 0x2
 2183 0441 0000 0000 		.long	.LASF69
 2184 0445 0252      		.word	0x252
 2185 0447 14        		.byte	0x14
 2186 0448 0000 06E2 		.long	0x6e2
 2187 044c 42        		.byte	0x42
 2188 044d 02        		.uleb128 0x2
 2189 044e 0000 0000 		.long	.LASF70
 2190 0452 0255      		.word	0x255
 2191 0454 07        		.byte	0x7
 2192 0455 0000 0085 		.long	0x85
 2193 0459 46        		.byte	0x46
 2194 045a 02        		.uleb128 0x2
 2195 045b 0000 0000 		.long	.LASF71
 2196 045f 0256      		.word	0x256
 2197 0461 09        		.byte	0x9
 2198 0462 0000 0484 		.long	0x484
 2199 0466 4A        		.byte	0x4a


 2200 0467 02        		.uleb128 0x2
 2201 0468 0000 0000 		.long	.LASF72
 2202 046c 0279      		.word	0x279
 2203 046e 07        		.byte	0x7
 2204 046f 0000 06A0 		.long	0x6a0
 2205 0473 4E        		.byte	0x4e
 2206 0474 2C        		.uleb128 0x2c
 2207 0475 0000 0000 		.long	.LASF73
 2208 0479 04        		.byte	0x4
 2209 047a 0281      		.word	0x281
 2210 047c 0B        		.byte	0xb
 2211 047d 0000 06F2 		.long	0x6f2
 2212 0481 0112      		.word	0x112
 2213 0483 00        		.byte	0
 2214 0484 06        		.uleb128 0x6
 2215 0485 0000 0489 		.long	0x489
 2216 0489 0A        		.uleb128 0xa
 2217 048a 01        		.byte	0x1
 2218 048b 06        		.byte	0x6
 2219 048c 0000 0000 		.long	.LASF74
 2220 0490 1C        		.uleb128 0x1c
 2221 0491 0000 0489 		.long	0x489
 2222 0495 06        		.uleb128 0x6
 2223 0496 0000 037F 		.long	0x37f
 2224 049a 13        		.uleb128 0x13
 2225 049b 0000 009D 		.long	0x9d
 2226 049f 0000 04B8 		.long	0x4b8
 2227 04a3 04        		.uleb128 0x4
 2228 04a4 0000 039D 		.long	0x39d
 2229 04a8 04        		.uleb128 0x4
 2230 04a9 0000 0109 		.long	0x109
 2231 04ad 04        		.uleb128 0x4
 2232 04ae 0000 04B8 		.long	0x4b8
 2233 04b2 04        		.uleb128 0x4
 2234 04b3 0000 0085 		.long	0x85
 2235 04b7 00        		.byte	0
 2236 04b8 06        		.uleb128 0x6
 2237 04b9 0000 0490 		.long	0x490
 2238 04bd 1E        		.uleb128 0x1e
 2239 04be 0000 04B8 		.long	0x4b8
 2240 04c2 06        		.uleb128 0x6
 2241 04c3 0000 049A 		.long	0x49a
 2242 04c7 13        		.uleb128 0x13
 2243 04c8 0000 0091 		.long	0x91
 2244 04cc 0000 04E5 		.long	0x4e5
 2245 04d0 04        		.uleb128 0x4
 2246 04d1 0000 039D 		.long	0x39d
 2247 04d5 04        		.uleb128 0x4
 2248 04d6 0000 0109 		.long	0x109
 2249 04da 04        		.uleb128 0x4
 2250 04db 0000 0091 		.long	0x91
 2251 04df 04        		.uleb128 0x4
 2252 04e0 0000 0085 		.long	0x85
 2253 04e4 00        		.byte	0
 2254 04e5 06        		.uleb128 0x6
 2255 04e6 0000 04C7 		.long	0x4c7
 2256 04ea 13        		.uleb128 0x13


 2257 04eb 0000 0085 		.long	0x85
 2258 04ef 0000 04FE 		.long	0x4fe
 2259 04f3 04        		.uleb128 0x4
 2260 04f4 0000 039D 		.long	0x39d
 2261 04f8 04        		.uleb128 0x4
 2262 04f9 0000 0109 		.long	0x109
 2263 04fd 00        		.byte	0
 2264 04fe 06        		.uleb128 0x6
 2265 04ff 0000 04EA 		.long	0x4ea
 2266 0503 08        		.uleb128 0x8
 2267 0504 0000 002D 		.long	0x2d
 2268 0508 0000 0513 		.long	0x513
 2269 050c 09        		.uleb128 0x9
 2270 050d 0000 0049 		.long	0x49
 2271 0511 02        		.byte	0x2
 2272 0512 00        		.byte	0
 2273 0513 08        		.uleb128 0x8
 2274 0514 0000 002D 		.long	0x2d
 2275 0518 0000 0523 		.long	0x523
 2276 051c 09        		.uleb128 0x9
 2277 051d 0000 0049 		.long	0x49
 2278 0521 00        		.byte	0
 2279 0522 00        		.byte	0
 2280 0523 1B        		.uleb128 0x1b
 2281 0524 0000 0000 		.long	.LASF75
 2282 0528 04        		.byte	0x4
 2283 0529 010D      		.word	0x10d
 2284 052b 1A        		.byte	0x1a
 2285 052c 0000 0246 		.long	0x246
 2286 0530 06        		.uleb128 0x6
 2287 0531 0000 0523 		.long	0x523
 2288 0535 2D        		.uleb128 0x2d
 2289 0536 0000 0000 		.long	.LASF76
 2290 053a 0E        		.byte	0xe
 2291 053b 04        		.byte	0x4
 2292 053c 0131      		.word	0x131
 2293 053e 08        		.byte	0x8
 2294 053f 0000 056B 		.long	0x56b
 2295 0543 02        		.uleb128 0x2
 2296 0544 0000 0000 		.long	.LASF77
 2297 0548 0132      		.word	0x132
 2298 054a 12        		.byte	0x12
 2299 054b 0000 056B 		.long	0x56b
 2300 054f 00        		.byte	0
 2301 0550 02        		.uleb128 0x2
 2302 0551 0000 0000 		.long	.LASF78
 2303 0555 0133      		.word	0x133
 2304 0557 12        		.byte	0x12
 2305 0558 0000 056B 		.long	0x56b
 2306 055c 06        		.byte	0x6
 2307 055d 02        		.uleb128 0x2
 2308 055e 0000 0000 		.long	.LASF79
 2309 0562 0134      		.word	0x134
 2310 0564 12        		.byte	0x12
 2311 0565 0000 003B 		.long	0x3b
 2312 0569 0C        		.byte	0xc
 2313 056a 00        		.byte	0


 2314 056b 08        		.uleb128 0x8
 2315 056c 0000 003B 		.long	0x3b
 2316 0570 0000 057B 		.long	0x57b
 2317 0574 09        		.uleb128 0x9
 2318 0575 0000 0049 		.long	0x49
 2319 0579 02        		.byte	0x2
 2320 057a 00        		.byte	0
 2321 057b 2E        		.uleb128 0x2e
 2322 057c C4        		.byte	0xc4
 2323 057d 04        		.byte	0x4
 2324 057e 025A      		.word	0x25a
 2325 0580 07        		.byte	0x7
 2326 0581 0000 0670 		.long	0x670
 2327 0585 02        		.uleb128 0x2
 2328 0586 0000 0000 		.long	.LASF80
 2329 058a 025F      		.word	0x25f
 2330 058c 12        		.byte	0x12
 2331 058d 0000 0484 		.long	0x484
 2332 0591 00        		.byte	0
 2333 0592 02        		.uleb128 0x2
 2334 0593 0000 0000 		.long	.LASF81
 2335 0597 0260      		.word	0x260
 2336 0599 10        		.byte	0x10
 2337 059a 0000 0670 		.long	0x670
 2338 059e 04        		.byte	0x4
 2339 059f 02        		.uleb128 0x2
 2340 05a0 0000 0000 		.long	.LASF82
 2341 05a4 0261      		.word	0x261
 2342 05a6 17        		.byte	0x17
 2343 05a7 0000 019A 		.long	0x19a
 2344 05ab 1E        		.byte	0x1e
 2345 05ac 02        		.uleb128 0x2
 2346 05ad 0000 0000 		.long	.LASF83
 2347 05b1 0262      		.word	0x262
 2348 05b3 0F        		.byte	0xf
 2349 05b4 0000 0085 		.long	0x85
 2350 05b8 42        		.byte	0x42
 2351 05b9 02        		.uleb128 0x2
 2352 05ba 0000 0000 		.long	.LASF84
 2353 05be 0263      		.word	0x263
 2354 05c0 2C        		.byte	0x2c
 2355 05c1 0000 0057 		.long	0x57
 2356 05c5 46        		.byte	0x46
 2357 05c6 02        		.uleb128 0x2
 2358 05c7 0000 0000 		.long	.LASF85
 2359 05cb 0264      		.word	0x264
 2360 05cd 1A        		.byte	0x1a
 2361 05ce 0000 0535 		.long	0x535
 2362 05d2 4E        		.byte	0x4e
 2363 05d3 02        		.uleb128 0x2
 2364 05d4 0000 0000 		.long	.LASF86
 2365 05d8 0265      		.word	0x265
 2366 05da 16        		.byte	0x16
 2367 05db 0000 00FD 		.long	0xfd
 2368 05df 5C        		.byte	0x5c
 2369 05e0 02        		.uleb128 0x2
 2370 05e1 0000 0000 		.long	.LASF87


 2371 05e5 0266      		.word	0x266
 2372 05e7 16        		.byte	0x16
 2373 05e8 0000 00FD 		.long	0xfd
 2374 05ec 64        		.byte	0x64
 2375 05ed 02        		.uleb128 0x2
 2376 05ee 0000 0000 		.long	.LASF88
 2377 05f2 0267      		.word	0x267
 2378 05f4 16        		.byte	0x16
 2379 05f5 0000 00FD 		.long	0xfd
 2380 05f9 6C        		.byte	0x6c
 2381 05fa 02        		.uleb128 0x2
 2382 05fb 0000 0000 		.long	.LASF89
 2383 05ff 0268      		.word	0x268
 2384 0601 10        		.byte	0x10
 2385 0602 0000 0680 		.long	0x680
 2386 0606 74        		.byte	0x74
 2387 0607 02        		.uleb128 0x2
 2388 0608 0000 0000 		.long	.LASF90
 2389 060c 0269      		.word	0x269
 2390 060e 10        		.byte	0x10
 2391 060f 0000 0690 		.long	0x690
 2392 0613 7C        		.byte	0x7c
 2393 0614 02        		.uleb128 0x2
 2394 0615 0000 0000 		.long	.LASF91
 2395 0619 026A      		.word	0x26a
 2396 061b 0F        		.byte	0xf
 2397 061c 0000 0085 		.long	0x85
 2398 0620 94        		.byte	0x94
 2399 0621 02        		.uleb128 0x2
 2400 0622 0000 0000 		.long	.LASF92
 2401 0626 026B      		.word	0x26b
 2402 0628 16        		.byte	0x16
 2403 0629 0000 00FD 		.long	0xfd
 2404 062d 98        		.byte	0x98
 2405 062e 02        		.uleb128 0x2
 2406 062f 0000 0000 		.long	.LASF93
 2407 0633 026C      		.word	0x26c
 2408 0635 16        		.byte	0x16
 2409 0636 0000 00FD 		.long	0xfd
 2410 063a A0        		.byte	0xa0
 2411 063b 02        		.uleb128 0x2
 2412 063c 0000 0000 		.long	.LASF94
 2413 0640 026D      		.word	0x26d
 2414 0642 16        		.byte	0x16
 2415 0643 0000 00FD 		.long	0xfd
 2416 0647 A8        		.byte	0xa8
 2417 0648 02        		.uleb128 0x2
 2418 0649 0000 0000 		.long	.LASF95
 2419 064d 026E      		.word	0x26e
 2420 064f 16        		.byte	0x16
 2421 0650 0000 00FD 		.long	0xfd
 2422 0654 B0        		.byte	0xb0
 2423 0655 02        		.uleb128 0x2
 2424 0656 0000 0000 		.long	.LASF96
 2425 065a 026F      		.word	0x26f
 2426 065c 16        		.byte	0x16
 2427 065d 0000 00FD 		.long	0xfd


 2428 0661 B8        		.byte	0xb8
 2429 0662 02        		.uleb128 0x2
 2430 0663 0000 0000 		.long	.LASF97
 2431 0667 0270      		.word	0x270
 2432 0669 08        		.byte	0x8
 2433 066a 0000 0085 		.long	0x85
 2434 066e C0        		.byte	0xc0
 2435 066f 00        		.byte	0
 2436 0670 08        		.uleb128 0x8
 2437 0671 0000 0489 		.long	0x489
 2438 0675 0000 0680 		.long	0x680
 2439 0679 09        		.uleb128 0x9
 2440 067a 0000 0049 		.long	0x49
 2441 067e 19        		.byte	0x19
 2442 067f 00        		.byte	0
 2443 0680 08        		.uleb128 0x8
 2444 0681 0000 0489 		.long	0x489
 2445 0685 0000 0690 		.long	0x690
 2446 0689 09        		.uleb128 0x9
 2447 068a 0000 0049 		.long	0x49
 2448 068e 07        		.byte	0x7
 2449 068f 00        		.byte	0
 2450 0690 08        		.uleb128 0x8
 2451 0691 0000 0489 		.long	0x489
 2452 0695 0000 06A0 		.long	0x6a0
 2453 0699 09        		.uleb128 0x9
 2454 069a 0000 0049 		.long	0x49
 2455 069e 17        		.byte	0x17
 2456 069f 00        		.byte	0
 2457 06a0 2F        		.uleb128 0x2f
 2458 06a1 C4        		.byte	0xc4
 2459 06a2 04        		.byte	0x4
 2460 06a3 0258      		.word	0x258
 2461 06a5 03        		.byte	0x3
 2462 06a6 0000 06B8 		.long	0x6b8
 2463 06aa 30        		.uleb128 0x30
 2464 06ab 0000 0000 		.long	.LASF57
 2465 06af 04        		.byte	0x4
 2466 06b0 0271      		.word	0x271
 2467 06b2 0B        		.byte	0xb
 2468 06b3 0000 057B 		.long	0x57b
 2469 06b7 00        		.byte	0
 2470 06b8 08        		.uleb128 0x8
 2471 06b9 0000 0489 		.long	0x489
 2472 06bd 0000 06C8 		.long	0x6c8
 2473 06c1 09        		.uleb128 0x9
 2474 06c2 0000 0049 		.long	0x49
 2475 06c6 18        		.byte	0x18
 2476 06c7 00        		.byte	0
 2477 06c8 31        		.uleb128 0x31
 2478 06c9 0000 0000 		.long	.LASF156
 2479 06cd 06        		.uleb128 0x6
 2480 06ce 0000 06C8 		.long	0x6c8
 2481 06d2 1F        		.uleb128 0x1f
 2482 06d3 0000 06DD 		.long	0x6dd
 2483 06d7 04        		.uleb128 0x4
 2484 06d8 0000 039D 		.long	0x39d


 2485 06dc 00        		.byte	0
 2486 06dd 06        		.uleb128 0x6
 2487 06de 0000 06D2 		.long	0x6d2
 2488 06e2 06        		.uleb128 0x6
 2489 06e3 0000 0185 		.long	0x185
 2490 06e7 1F        		.uleb128 0x1f
 2491 06e8 0000 06F2 		.long	0x6f2
 2492 06ec 04        		.uleb128 0x4
 2493 06ed 0000 0085 		.long	0x85
 2494 06f1 00        		.byte	0
 2495 06f2 06        		.uleb128 0x6
 2496 06f3 0000 06F7 		.long	0x6f7
 2497 06f7 06        		.uleb128 0x6
 2498 06f8 0000 06E7 		.long	0x6e7
 2499 06fc 0D        		.uleb128 0xd
 2500 06fd 0000 0000 		.long	.LASF98
 2501 0701 06        		.byte	0x6
 2502 0702 42        		.byte	0x42
 2503 0703 10        		.byte	0x10
 2504 0704 0000 0523 		.long	0x523
 2505 0708 32        		.uleb128 0x32
 2506 0709 0000 070F 		.long	0x70f
 2507 070d 0E        		.uleb128 0xe
 2508 070e 00        		.byte	0
 2509 070f 06        		.uleb128 0x6
 2510 0710 0000 0708 		.long	0x708
 2511 0714 05        		.uleb128 0x5
 2512 0715 0000 0000 		.long	.LASF99
 2513 0719 1C        		.byte	0x1c
 2514 071a 07        		.byte	0x7
 2515 071b 0000 0725 		.long	0x725
 2516 071f 05        		.uleb128 0x5
 2517 0720 03        		.byte	0x3
 2518 0721 0000 0000 		.long	com0in
 2519 0725 06        		.uleb128 0x6
 2520 0726 0000 06FC 		.long	0x6fc
 2521 072a 1E        		.uleb128 0x1e
 2522 072b 0000 0725 		.long	0x725
 2523 072f 05        		.uleb128 0x5
 2524 0730 0000 0000 		.long	.LASF100
 2525 0734 1D        		.byte	0x1d
 2526 0735 07        		.byte	0x7
 2527 0736 0000 0725 		.long	0x725
 2528 073a 05        		.uleb128 0x5
 2529 073b 03        		.byte	0x3
 2530 073c 0000 0000 		.long	com0out
 2531 0740 05        		.uleb128 0x5
 2532 0741 0000 0000 		.long	.LASF101
 2533 0745 1E        		.byte	0x1e
 2534 0746 07        		.byte	0x7
 2535 0747 0000 0725 		.long	0x725
 2536 074b 05        		.uleb128 0x5
 2537 074c 03        		.byte	0x3
 2538 074d 0000 0000 		.long	com1in
 2539 0751 05        		.uleb128 0x5
 2540 0752 0000 0000 		.long	.LASF102
 2541 0756 1F        		.byte	0x1f


 2542 0757 07        		.byte	0x7
 2543 0758 0000 0725 		.long	0x725
 2544 075c 05        		.uleb128 0x5
 2545 075d 03        		.byte	0x3
 2546 075e 0000 0000 		.long	com1out
 2547 0762 05        		.uleb128 0x5
 2548 0763 0000 0000 		.long	.LASF103
 2549 0767 22        		.byte	0x22
 2550 0768 05        		.byte	0x5
 2551 0769 0000 0085 		.long	0x85
 2552 076d 05        		.uleb128 0x5
 2553 076e 03        		.byte	0x3
 2554 076f 0000 0000 		.long	global_hour
 2555 0773 05        		.uleb128 0x5
 2556 0774 0000 0000 		.long	.LASF104
 2557 0778 22        		.byte	0x22
 2558 0779 16        		.byte	0x16
 2559 077a 0000 0085 		.long	0x85
 2560 077e 05        		.uleb128 0x5
 2561 077f 03        		.byte	0x3
 2562 0780 0000 0000 		.long	global_min
 2563 0784 05        		.uleb128 0x5
 2564 0785 0000 0000 		.long	.LASF105
 2565 0789 22        		.byte	0x22
 2566 078a 26        		.byte	0x26
 2567 078b 0000 0085 		.long	0x85
 2568 078f 05        		.uleb128 0x5
 2569 0790 03        		.byte	0x3
 2570 0791 0000 0000 		.long	global_sec
 2571 0795 05        		.uleb128 0x5
 2572 0796 0000 0000 		.long	.LASF106
 2573 079a 24        		.byte	0x24
 2574 079b 05        		.byte	0x5
 2575 079c 0000 0085 		.long	0x85
 2576 07a0 05        		.uleb128 0x5
 2577 07a1 03        		.byte	0x3
 2578 07a2 0000 0000 		.long	clock_pos_x
 2579 07a6 05        		.uleb128 0x5
 2580 07a7 0000 0000 		.long	.LASF107
 2581 07ab 24        		.byte	0x24
 2582 07ac 12        		.byte	0x12
 2583 07ad 0000 0085 		.long	0x85
 2584 07b1 05        		.uleb128 0x5
 2585 07b2 03        		.byte	0x3
 2586 07b3 0000 0000 		.long	clock_pos_y
 2587 07b7 05        		.uleb128 0x5
 2588 07b8 0000 0000 		.long	.LASF108
 2589 07bc 25        		.byte	0x25
 2590 07bd 05        		.byte	0x5
 2591 07be 0000 0085 		.long	0x85
 2592 07c2 05        		.uleb128 0x5
 2593 07c3 03        		.byte	0x3
 2594 07c4 0000 0000 		.long	chatlog_start_x
 2595 07c8 05        		.uleb128 0x5
 2596 07c9 0000 0000 		.long	.LASF109
 2597 07cd 25        		.byte	0x25
 2598 07ce 16        		.byte	0x16


 2599 07cf 0000 0085 		.long	0x85
 2600 07d3 05        		.uleb128 0x5
 2601 07d4 03        		.byte	0x3
 2602 07d5 0000 0000 		.long	chatlog_start_y
 2603 07d9 05        		.uleb128 0x5
 2604 07da 0000 0000 		.long	.LASF110
 2605 07de 25        		.byte	0x25
 2606 07df 27        		.byte	0x27
 2607 07e0 0000 0085 		.long	0x85
 2608 07e4 05        		.uleb128 0x5
 2609 07e5 03        		.byte	0x3
 2610 07e6 0000 0000 		.long	chatlog_x
 2611 07ea 05        		.uleb128 0x5
 2612 07eb 0000 0000 		.long	.LASF111
 2613 07ef 25        		.byte	0x25
 2614 07f0 32        		.byte	0x32
 2615 07f1 0000 0085 		.long	0x85
 2616 07f5 05        		.uleb128 0x5
 2617 07f6 03        		.byte	0x3
 2618 07f7 0000 0000 		.long	chatlog_y
 2619 07fb 05        		.uleb128 0x5
 2620 07fc 0000 0000 		.long	.LASF112
 2621 0800 27        		.byte	0x27
 2622 0801 05        		.byte	0x5
 2623 0802 0000 0085 		.long	0x85
 2624 0806 05        		.uleb128 0x5
 2625 0807 03        		.byte	0x3
 2626 0808 0000 0000 		.long	chatlog_read_index
 2627 080c 05        		.uleb128 0x5
 2628 080d 0000 0000 		.long	.LASF113
 2629 0811 27        		.byte	0x27
 2630 0812 1D        		.byte	0x1d
 2631 0813 0000 0085 		.long	0x85
 2632 0817 05        		.uleb128 0x5
 2633 0818 03        		.byte	0x3
 2634 0819 0000 0000 		.long	chatlog_write_index
 2635 081d 05        		.uleb128 0x5
 2636 081e 0000 0000 		.long	.LASF114
 2637 0822 27        		.byte	0x27
 2638 0823 36        		.byte	0x36
 2639 0824 0000 0085 		.long	0x85
 2640 0828 05        		.uleb128 0x5
 2641 0829 03        		.byte	0x3
 2642 082a 0000 0000 		.long	chatlog_size
 2643 082e 08        		.uleb128 0x8
 2644 082f 0000 0489 		.long	0x489
 2645 0833 0000 0843 		.long	0x843
 2646 0837 20        		.uleb128 0x20
 2647 0838 0000 0049 		.long	0x49
 2648 083c 09        		.uleb128 0x9
 2649 083d 0000 0049 		.long	0x49
 2650 0841 0A        		.byte	0xa
 2651 0842 00        		.byte	0
 2652 0843 05        		.uleb128 0x5
 2653 0844 0000 0000 		.long	.LASF115
 2654 0848 28        		.byte	0x28
 2655 0849 06        		.byte	0x6


 2656 084a 0000 082E 		.long	0x82e
 2657 084e 05        		.uleb128 0x5
 2658 084f 03        		.byte	0x3
 2659 0850 0000 0000 		.long	chatlog_sender
 2660 0854 08        		.uleb128 0x8
 2661 0855 0000 0489 		.long	0x489
 2662 0859 0000 0869 		.long	0x869
 2663 085d 20        		.uleb128 0x20
 2664 085e 0000 0049 		.long	0x49
 2665 0862 09        		.uleb128 0x9
 2666 0863 0000 0049 		.long	0x49
 2667 0867 64        		.byte	0x64
 2668 0868 00        		.byte	0
 2669 0869 05        		.uleb128 0x5
 2670 086a 0000 0000 		.long	.LASF116
 2671 086e 29        		.byte	0x29
 2672 086f 06        		.byte	0x6
 2673 0870 0000 0854 		.long	0x854
 2674 0874 05        		.uleb128 0x5
 2675 0875 03        		.byte	0x3
 2676 0876 0000 0000 		.long	chatlog
 2677 087a 21        		.uleb128 0x21
 2678 087b 0000 0000 		.long	.LASF117
 2679 087f 3E        		.byte	0x3e
 2680 0880 0000 0886 		.long	0x886
 2681 0884 0E        		.uleb128 0xe
 2682 0885 00        		.byte	0
 2683 0886 22        		.uleb128 0x22
 2684 0887 0000 0000 		.long	.LASF122
 2685 088b 07        		.byte	0x7
 2686 088c 3C        		.byte	0x3c
 2687 088d 06        		.byte	0x6
 2688 088e 0000 0898 		.long	0x898
 2689 0892 04        		.uleb128 0x4
 2690 0893 0000 070F 		.long	0x70f
 2691 0897 00        		.byte	0
 2692 0898 21        		.uleb128 0x21
 2693 0899 0000 0000 		.long	.LASF118
 2694 089d 3B        		.byte	0x3b
 2695 089e 0000 08A4 		.long	0x8a4
 2696 08a2 0E        		.uleb128 0xe
 2697 08a3 00        		.byte	0
 2698 08a4 15        		.uleb128 0x15
 2699 08a5 0000 0000 		.long	.LASF119
 2700 08a9 06        		.byte	0x6
 2701 08aa CC        		.byte	0xcc
 2702 08ab 05        		.byte	0x5
 2703 08ac 0000 0085 		.long	0x85
 2704 08b0 0000 08C0 		.long	0x8c0
 2705 08b4 04        		.uleb128 0x4
 2706 08b5 0000 072A 		.long	0x72a
 2707 08b9 04        		.uleb128 0x4
 2708 08ba 0000 04BD 		.long	0x4bd
 2709 08be 0E        		.uleb128 0xe
 2710 08bf 00        		.byte	0
 2711 08c0 15        		.uleb128 0x15
 2712 08c1 0000 0000 		.long	.LASF120


 2713 08c5 01        		.byte	0x1
 2714 08c6 19        		.byte	0x19
 2715 08c7 0D        		.byte	0xd
 2716 08c8 0000 0489 		.long	0x489
 2717 08cc 0000 08D6 		.long	0x8d6
 2718 08d0 04        		.uleb128 0x4
 2719 08d1 0000 0085 		.long	0x85
 2720 08d5 00        		.byte	0
 2721 08d6 23        		.uleb128 0x23
 2722 08d7 5600      		.string	"V"
 2723 08d9 5A        		.byte	0x5a
 2724 08da 0000 0085 		.long	0x85
 2725 08de 0000 08E8 		.long	0x8e8
 2726 08e2 04        		.uleb128 0x4
 2727 08e3 0000 0085 		.long	0x85
 2728 08e7 00        		.byte	0
 2729 08e8 23        		.uleb128 0x23
 2730 08e9 5000      		.string	"P"
 2731 08eb 59        		.byte	0x59
 2732 08ec 0000 0085 		.long	0x85
 2733 08f0 0000 08FA 		.long	0x8fa
 2734 08f4 04        		.uleb128 0x4
 2735 08f5 0000 0085 		.long	0x85
 2736 08f9 00        		.byte	0
 2737 08fa 33        		.uleb128 0x33
 2738 08fb 0000 0000 		.long	.LASF121
 2739 08ff 08        		.byte	0x8
 2740 0900 5D        		.byte	0x5d
 2741 0901 06        		.byte	0x6
 2742 0902 0000 090C 		.long	0x90c
 2743 0906 04        		.uleb128 0x4
 2744 0907 0000 0085 		.long	0x85
 2745 090b 00        		.byte	0
 2746 090c 22        		.uleb128 0x22
 2747 090d 0000 0000 		.long	.LASF123
 2748 0911 06        		.byte	0x6
 2749 0912 F7        		.byte	0xf7
 2750 0913 09        		.byte	0x9
 2751 0914 0000 091E 		.long	0x91e
 2752 0918 04        		.uleb128 0x4
 2753 0919 0000 04B8 		.long	0x4b8
 2754 091d 00        		.byte	0
 2755 091e 34        		.uleb128 0x34
 2756 091f 0000 0000 		.long	.LASF124
 2757 0923 06        		.byte	0x6
 2758 0924 0159      		.word	0x159
 2759 0926 08        		.byte	0x8
 2760 0927 0000 0725 		.long	0x725
 2761 092b 0000 093A 		.long	0x93a
 2762 092f 04        		.uleb128 0x4
 2763 0930 0000 0085 		.long	0x85
 2764 0934 04        		.uleb128 0x4
 2765 0935 0000 04B8 		.long	0x4b8
 2766 0939 00        		.byte	0
 2767 093a 15        		.uleb128 0x15
 2768 093b 0000 0000 		.long	.LASF125
 2769 093f 06        		.byte	0x6


 2770 0940 CA        		.byte	0xca
 2771 0941 05        		.byte	0x5
 2772 0942 0000 0085 		.long	0x85
 2773 0946 0000 0956 		.long	0x956
 2774 094a 04        		.uleb128 0x4
 2775 094b 0000 072A 		.long	0x72a
 2776 094f 04        		.uleb128 0x4
 2777 0950 0000 04BD 		.long	0x4bd
 2778 0954 0E        		.uleb128 0xe
 2779 0955 00        		.byte	0
 2780 0956 35        		.uleb128 0x35
 2781 0957 0000 0000 		.long	.LASF128
 2782 095b 01        		.byte	0x1
 2783 095c 0139      		.word	0x139
 2784 095e 05        		.byte	0x5
 2785 095f 0000 0085 		.long	0x85
 2786 0963 0000 0000 		.long	.LFB13
 2787 0967 0000 003C 		.long	.LFE13-.LFB13
 2788 096b 01        		.uleb128 0x1
 2789 096c 9C        		.byte	0x9c
 2790 096d 0000 09A8 		.long	0x9a8
 2791 0971 01        		.uleb128 0x1
 2792 0972 0000 0000 		.long	.LVL126
 2793 0976 0000 0898 		.long	0x898
 2794 097a 01        		.uleb128 0x1
 2795 097b 0000 0000 		.long	.LVL127
 2796 097f 0000 0F14 		.long	0xf14
 2797 0983 01        		.uleb128 0x1
 2798 0984 0000 0000 		.long	.LVL128
 2799 0988 0000 0886 		.long	0x886
 2800 098c 01        		.uleb128 0x1
 2801 098d 0000 0000 		.long	.LVL129
 2802 0991 0000 0886 		.long	0x886
 2803 0995 01        		.uleb128 0x1
 2804 0996 0000 0000 		.long	.LVL130
 2805 099a 0000 0886 		.long	0x886
 2806 099e 01        		.uleb128 0x1
 2807 099f 0000 0000 		.long	.LVL131
 2808 09a3 0000 087A 		.long	0x87a
 2809 09a7 00        		.byte	0
 2810 09a8 24        		.uleb128 0x24
 2811 09a9 0000 0000 		.long	.LASF126
 2812 09ad 0124      		.word	0x124
 2813 09af 0000 0000 		.long	.LFB12
 2814 09b3 0000 0042 		.long	.LFE12-.LFB12
 2815 09b7 01        		.uleb128 0x1
 2816 09b8 9C        		.byte	0x9c
 2817 09b9 0000 0A06 		.long	0xa06
 2818 09bd 01        		.uleb128 0x1
 2819 09be 0000 0000 		.long	.LVL17
 2820 09c2 0000 08E8 		.long	0x8e8
 2821 09c6 01        		.uleb128 0x1
 2822 09c7 0000 0000 		.long	.LVL18
 2823 09cb 0000 08E8 		.long	0x8e8
 2824 09cf 01        		.uleb128 0x1
 2825 09d0 0000 0000 		.long	.LVL19
 2826 09d4 0000 08D6 		.long	0x8d6


 2827 09d8 01        		.uleb128 0x1
 2828 09d9 0000 0000 		.long	.LVL20
 2829 09dd 0000 08D6 		.long	0x8d6
 2830 09e1 01        		.uleb128 0x1
 2831 09e2 0000 0000 		.long	.LVL21
 2832 09e6 0000 08E8 		.long	0x8e8
 2833 09ea 01        		.uleb128 0x1
 2834 09eb 0000 0000 		.long	.LVL22
 2835 09ef 0000 08E8 		.long	0x8e8
 2836 09f3 01        		.uleb128 0x1
 2837 09f4 0000 0000 		.long	.LVL23
 2838 09f8 0000 08D6 		.long	0x8d6
 2839 09fc 01        		.uleb128 0x1
 2840 09fd 0000 0000 		.long	.LVL24
 2841 0a01 0000 08D6 		.long	0x8d6
 2842 0a05 00        		.byte	0
 2843 0a06 24        		.uleb128 0x24
 2844 0a07 0000 0000 		.long	.LASF127
 2845 0a0b 0100      		.word	0x100
 2846 0a0d 0000 0000 		.long	.LFB11
 2847 0a11 0000 00C8 		.long	.LFE11-.LFB11
 2848 0a15 01        		.uleb128 0x1
 2849 0a16 9C        		.byte	0x9c
 2850 0a17 0000 0AA7 		.long	0xaa7
 2851 0a1b 36        		.uleb128 0x36
 2852 0a1c 746D 7000 		.string	"tmp"
 2853 0a20 01        		.byte	0x1
 2854 0a21 0111      		.word	0x111
 2855 0a23 07        		.byte	0x7
 2856 0a24 0000 0489 		.long	0x489
 2857 0a28 01        		.uleb128 0x1
 2858 0a29 0000 0000 		.long	.LVL112
 2859 0a2d 0000 0CB9 		.long	0xcb9
 2860 0a31 01        		.uleb128 0x1
 2861 0a32 0000 0000 		.long	.LVL113
 2862 0a36 0000 10DB 		.long	0x10db
 2863 0a3a 01        		.uleb128 0x1
 2864 0a3b 0000 0000 		.long	.LVL114
 2865 0a3f 0000 0B57 		.long	0xb57
 2866 0a43 01        		.uleb128 0x1
 2867 0a44 0000 0000 		.long	.LVL115
 2868 0a48 0000 08E8 		.long	0x8e8
 2869 0a4c 01        		.uleb128 0x1
 2870 0a4d 0000 0000 		.long	.LVL116
 2871 0a51 0000 08E8 		.long	0x8e8
 2872 0a55 01        		.uleb128 0x1
 2873 0a56 0000 0000 		.long	.LVL117
 2874 0a5a 0000 0AA7 		.long	0xaa7
 2875 0a5e 01        		.uleb128 0x1
 2876 0a5f 0000 0000 		.long	.LVL118
 2877 0a63 0000 08D6 		.long	0x8d6
 2878 0a67 01        		.uleb128 0x1
 2879 0a68 0000 0000 		.long	.LVL119
 2880 0a6c 0000 08D6 		.long	0x8d6
 2881 0a70 01        		.uleb128 0x1
 2882 0a71 0000 0000 		.long	.LVL120
 2883 0a75 0000 0B57 		.long	0xb57


 2884 0a79 01        		.uleb128 0x1
 2885 0a7a 0000 0000 		.long	.LVL121
 2886 0a7e 0000 08E8 		.long	0x8e8
 2887 0a82 01        		.uleb128 0x1
 2888 0a83 0000 0000 		.long	.LVL122
 2889 0a87 0000 08E8 		.long	0x8e8
 2890 0a8b 01        		.uleb128 0x1
 2891 0a8c 0000 0000 		.long	.LVL123
 2892 0a90 0000 0AA7 		.long	0xaa7
 2893 0a94 01        		.uleb128 0x1
 2894 0a95 0000 0000 		.long	.LVL124
 2895 0a99 0000 08D6 		.long	0x8d6
 2896 0a9d 01        		.uleb128 0x1
 2897 0a9e 0000 0000 		.long	.LVL125
 2898 0aa2 0000 08D6 		.long	0x8d6
 2899 0aa6 00        		.byte	0
 2900 0aa7 16        		.uleb128 0x16
 2901 0aa8 0000 0000 		.long	.LASF129
 2902 0aac E4        		.byte	0xe4
 2903 0aad 0000 0000 		.long	.LFB10
 2904 0ab1 0000 0082 		.long	.LFE10-.LFB10
 2905 0ab5 01        		.uleb128 0x1
 2906 0ab6 9C        		.byte	0x9c
 2907 0ab7 0000 0B47 		.long	0xb47
 2908 0abb 37        		.uleb128 0x37
 2909 0abc 0000 0000 		.long	.LASF136
 2910 0ac0 01        		.byte	0x1
 2911 0ac1 E4        		.byte	0xe4
 2912 0ac2 1B        		.byte	0x1b
 2913 0ac3 0000 0085 		.long	0x85
 2914 0ac7 0000 0000 		.long	.LLST29
 2915 0acb 0000 0000 		.long	.LVUS29
 2916 0acf 0F        		.uleb128 0xf
 2917 0ad0 6664 00   		.string	"fd"
 2918 0ad3 E5        		.byte	0xe5
 2919 0ad4 08        		.byte	0x8
 2920 0ad5 0000 0725 		.long	0x725
 2921 0ad9 0000 0000 		.long	.LLST30
 2922 0add 0000 0000 		.long	.LVUS30
 2923 0ae1 38        		.uleb128 0x38
 2924 0ae2 0000 0000 		.long	.LASF131
 2925 0ae6 01        		.byte	0x1
 2926 0ae7 E9        		.byte	0xe9
 2927 0ae8 07        		.byte	0x7
 2928 0ae9 0000 0B47 		.long	0xb47
 2929 0aed 03        		.uleb128 0x3
 2930 0aee 7E        		.byte	0x7e
 2931 0aef 9B7F      		.sleb128 -101
 2932 0af1 0C        		.uleb128 0xc
 2933 0af2 0000 0000 		.long	.LASF130
 2934 0af6 EA        		.byte	0xea
 2935 0af7 06        		.byte	0x6
 2936 0af8 0000 0085 		.long	0x85
 2937 0afc 0000 0000 		.long	.LLST31
 2938 0b00 0000 0000 		.long	.LVUS31
 2939 0b04 39        		.uleb128 0x39
 2940 0b05 0000 0000 		.long	.LBB44


 2941 0b09 0000 0038 		.long	.LBE44-.LBB44
 2942 0b0d 0000 0B34 		.long	0xb34
 2943 0b11 3A        		.uleb128 0x3a
 2944 0b12 746D 7000 		.string	"tmp"
 2945 0b16 01        		.byte	0x1
 2946 0b17 ED        		.byte	0xed
 2947 0b18 08        		.byte	0x8
 2948 0b19 0000 0489 		.long	0x489
 2949 0b1d 03        		.uleb128 0x3
 2950 0b1e 7E        		.byte	0x7e
 2951 0b1f 9A7F      		.sleb128 -102
 2952 0b21 01        		.uleb128 0x1
 2953 0b22 0000 0000 		.long	.LVL104
 2954 0b26 0000 08A4 		.long	0x8a4
 2955 0b2a 01        		.uleb128 0x1
 2956 0b2b 0000 0000 		.long	.LVL105
 2957 0b2f 0000 093A 		.long	0x93a
 2958 0b33 00        		.byte	0
 2959 0b34 01        		.uleb128 0x1
 2960 0b35 0000 0000 		.long	.LVL100
 2961 0b39 0000 08C0 		.long	0x8c0
 2962 0b3d 01        		.uleb128 0x1
 2963 0b3e 0000 0000 		.long	.LVL111
 2964 0b42 0000 08C0 		.long	0x8c0
 2965 0b46 00        		.byte	0
 2966 0b47 08        		.uleb128 0x8
 2967 0b48 0000 0489 		.long	0x489
 2968 0b4c 0000 0B57 		.long	0xb57
 2969 0b50 09        		.uleb128 0x9
 2970 0b51 0000 0049 		.long	0x49
 2971 0b55 64        		.byte	0x64
 2972 0b56 00        		.byte	0
 2973 0b57 16        		.uleb128 0x16
 2974 0b58 0000 0000 		.long	.LASF132
 2975 0b5c C7        		.byte	0xc7
 2976 0b5d 0000 0000 		.long	.LFB9
 2977 0b61 0000 0146 		.long	.LFE9-.LFB9
 2978 0b65 01        		.uleb128 0x1
 2979 0b66 9C        		.byte	0x9c
 2980 0b67 0000 0C8F 		.long	0xc8f
 2981 0b6b 25        		.uleb128 0x25
 2982 0b6c 0000 0000 		.long	.LASF136
 2983 0b70 C7        		.byte	0xc7
 2984 0b71 19        		.byte	0x19
 2985 0b72 0000 0085 		.long	0x85
 2986 0b76 02        		.uleb128 0x2
 2987 0b77 91        		.byte	0x91
 2988 0b78 00        		.sleb128 0
 2989 0b79 0F        		.uleb128 0xf
 2990 0b7a 6664 00   		.string	"fd"
 2991 0b7d D0        		.byte	0xd0
 2992 0b7e 08        		.byte	0x8
 2993 0b7f 0000 0725 		.long	0x725
 2994 0b83 0000 0000 		.long	.LLST18
 2995 0b87 0000 0000 		.long	.LVUS18
 2996 0b8b 17        		.uleb128 0x17
 2997 0b8c 0000 0CA4 		.long	0xca4


 2998 0b90 0000 0000 		.long	.LBI32
 2999 0b94 01        		.byte	.LVU203
 3000 0b95 0000 0000 		.long	.LLRL19
 3001 0b99 D8        		.byte	0xd8
 3002 0b9a 0000 0C0B 		.long	0xc0b
 3003 0b9e 07        		.uleb128 0x7
 3004 0b9f 0000 0CAE 		.long	0xcae
 3005 0ba3 0000 0000 		.long	.LLST20
 3006 0ba7 0000 0000 		.long	.LVUS20
 3007 0bab 17        		.uleb128 0x17
 3008 0bac 0000 0F1D 		.long	0xf1d
 3009 0bb0 0000 0000 		.long	.LBI34
 3010 0bb4 03        		.byte	.LVU205
 3011 0bb5 0000 0000 		.long	.LLRL21
 3012 0bb9 B9        		.byte	0xb9
 3013 0bba 0000 0BF8 		.long	0xbf8
 3014 0bbe 07        		.uleb128 0x7
 3015 0bbf 0000 0F3A 		.long	0xf3a
 3016 0bc3 0000 0000 		.long	.LLST22
 3017 0bc7 0000 0000 		.long	.LVUS22
 3018 0bcb 07        		.uleb128 0x7
 3019 0bcc 0000 0F31 		.long	0xf31
 3020 0bd0 0000 0000 		.long	.LLST23
 3021 0bd4 0000 0000 		.long	.LVUS23
 3022 0bd8 07        		.uleb128 0x7
 3023 0bd9 0000 0F27 		.long	0xf27
 3024 0bdd 0000 0000 		.long	.LLST24
 3025 0be1 0000 0000 		.long	.LVUS24
 3026 0be5 01        		.uleb128 0x1
 3027 0be6 0000 0000 		.long	.LVL81
 3028 0bea 0000 10E4 		.long	0x10e4
 3029 0bee 01        		.uleb128 0x1
 3030 0bef 0000 0000 		.long	.LVL90
 3031 0bf3 0000 10E4 		.long	0x10e4
 3032 0bf7 00        		.byte	0
 3033 0bf8 01        		.uleb128 0x1
 3034 0bf9 0000 0000 		.long	.LVL82
 3035 0bfd 0000 10E4 		.long	0x10e4
 3036 0c01 01        		.uleb128 0x1
 3037 0c02 0000 0000 		.long	.LVL91
 3038 0c06 0000 10E4 		.long	0x10e4
 3039 0c0a 00        		.byte	0
 3040 0c0b 17        		.uleb128 0x17
 3041 0c0c 0000 0F1D 		.long	0xf1d
 3042 0c10 0000 0000 		.long	.LBI39
 3043 0c14 01        		.byte	.LVU212
 3044 0c15 0000 0000 		.long	.LLRL25
 3045 0c19 DE        		.byte	0xde
 3046 0c1a 0000 0C58 		.long	0xc58
 3047 0c1e 07        		.uleb128 0x7
 3048 0c1f 0000 0F3A 		.long	0xf3a
 3049 0c23 0000 0000 		.long	.LLST26
 3050 0c27 0000 0000 		.long	.LVUS26
 3051 0c2b 07        		.uleb128 0x7
 3052 0c2c 0000 0F31 		.long	0xf31
 3053 0c30 0000 0000 		.long	.LLST27
 3054 0c34 0000 0000 		.long	.LVUS27


 3055 0c38 07        		.uleb128 0x7
 3056 0c39 0000 0F27 		.long	0xf27
 3057 0c3d 0000 0000 		.long	.LLST28
 3058 0c41 0000 0000 		.long	.LVUS28
 3059 0c45 01        		.uleb128 0x1
 3060 0c46 0000 0000 		.long	.LVL85
 3061 0c4a 0000 10E4 		.long	0x10e4
 3062 0c4e 01        		.uleb128 0x1
 3063 0c4f 0000 0000 		.long	.LVL94
 3064 0c53 0000 10E4 		.long	0x10e4
 3065 0c57 00        		.byte	0
 3066 0c58 01        		.uleb128 0x1
 3067 0c59 0000 0000 		.long	.LVL80
 3068 0c5d 0000 10ED 		.long	0x10ed
 3069 0c61 01        		.uleb128 0x1
 3070 0c62 0000 0000 		.long	.LVL83
 3071 0c66 0000 0C8F 		.long	0xc8f
 3072 0c6a 01        		.uleb128 0x1
 3073 0c6b 0000 0000 		.long	.LVL86
 3074 0c6f 0000 10ED 		.long	0x10ed
 3075 0c73 01        		.uleb128 0x1
 3076 0c74 0000 0000 		.long	.LVL89
 3077 0c78 0000 10ED 		.long	0x10ed
 3078 0c7c 01        		.uleb128 0x1
 3079 0c7d 0000 0000 		.long	.LVL92
 3080 0c81 0000 0C8F 		.long	0xc8f
 3081 0c85 01        		.uleb128 0x1
 3082 0c86 0000 0000 		.long	.LVL95
 3083 0c8a 0000 10ED 		.long	0x10ed
 3084 0c8e 00        		.byte	0
 3085 0c8f 18        		.uleb128 0x18
 3086 0c90 0000 0000 		.long	.LASF133
 3087 0c94 BD        		.byte	0xbd
 3088 0c95 0000 0CA4 		.long	0xca4
 3089 0c99 10        		.uleb128 0x10
 3090 0c9a 6664 00   		.string	"fd"
 3091 0c9d BD        		.byte	0xbd
 3092 0c9e 19        		.byte	0x19
 3093 0c9f 0000 0725 		.long	0x725
 3094 0ca3 00        		.byte	0
 3095 0ca4 18        		.uleb128 0x18
 3096 0ca5 0000 0000 		.long	.LASF134
 3097 0ca9 B7        		.byte	0xb7
 3098 0caa 0000 0CB9 		.long	0xcb9
 3099 0cae 10        		.uleb128 0x10
 3100 0caf 6664 00   		.string	"fd"
 3101 0cb2 B7        		.byte	0xb7
 3102 0cb3 1A        		.byte	0x1a
 3103 0cb4 0000 0725 		.long	0x725
 3104 0cb8 00        		.byte	0
 3105 0cb9 16        		.uleb128 0x16
 3106 0cba 0000 0000 		.long	.LASF135
 3107 0cbe 7C        		.byte	0x7c
 3108 0cbf 0000 0000 		.long	.LFB6
 3109 0cc3 0000 030A 		.long	.LFE6-.LFB6
 3110 0cc7 01        		.uleb128 0x1
 3111 0cc8 9C        		.byte	0x9c


 3112 0cc9 0000 0E48 		.long	0xe48
 3113 0ccd 25        		.uleb128 0x25
 3114 0cce 0000 0000 		.long	.LASF136
 3115 0cd2 7C        		.byte	0x7c
 3116 0cd3 15        		.byte	0x15
 3117 0cd4 0000 0085 		.long	0x85
 3118 0cd8 02        		.uleb128 0x2
 3119 0cd9 91        		.byte	0x91
 3120 0cda 00        		.sleb128 0
 3121 0cdb 0F        		.uleb128 0xf
 3122 0cdc 6664 00   		.string	"fd"
 3123 0cdf 85        		.byte	0x85
 3124 0ce0 08        		.byte	0x8
 3125 0ce1 0000 0725 		.long	0x725
 3126 0ce5 0000 0000 		.long	.LLST6
 3127 0ce9 0000 0000 		.long	.LVUS6
 3128 0ced 0C        		.uleb128 0xc
 3129 0cee 0000 0000 		.long	.LASF137
 3130 0cf2 8A        		.byte	0x8a
 3131 0cf3 0F        		.byte	0xf
 3132 0cf4 0000 0072 		.long	0x72
 3133 0cf8 0000 0000 		.long	.LLST7
 3134 0cfc 0000 0000 		.long	.LVUS7
 3135 0d00 0C        		.uleb128 0xc
 3136 0d01 0000 0000 		.long	.LASF138
 3137 0d05 8A        		.byte	0x8a
 3138 0d06 23        		.byte	0x23
 3139 0d07 0000 0072 		.long	0x72
 3140 0d0b 0000 0000 		.long	.LLST8
 3141 0d0f 0000 0000 		.long	.LVUS8
 3142 0d13 0C        		.uleb128 0xc
 3143 0d14 0000 0000 		.long	.LASF139
 3144 0d18 97        		.byte	0x97
 3145 0d19 06        		.byte	0x6
 3146 0d1a 0000 0085 		.long	0x85
 3147 0d1e 0000 0000 		.long	.LLST9
 3148 0d22 0000 0000 		.long	.LVUS9
 3149 0d26 0C        		.uleb128 0xc
 3150 0d27 0000 0000 		.long	.LASF140
 3151 0d2b 9D        		.byte	0x9d
 3152 0d2c 06        		.byte	0x6
 3153 0d2d 0000 0085 		.long	0x85
 3154 0d31 0000 0000 		.long	.LLST10
 3155 0d35 0000 0000 		.long	.LVUS10
 3156 0d39 01        		.uleb128 0x1
 3157 0d3a 0000 0000 		.long	.LVL35
 3158 0d3e 0000 093A 		.long	0x93a
 3159 0d42 01        		.uleb128 0x1
 3160 0d43 0000 0000 		.long	.LVL36
 3161 0d47 0000 10ED 		.long	0x10ed
 3162 0d4b 01        		.uleb128 0x1
 3163 0d4c 0000 0000 		.long	.LVL37
 3164 0d50 0000 10ED 		.long	0x10ed
 3165 0d54 01        		.uleb128 0x1
 3166 0d55 0000 0000 		.long	.LVL38
 3167 0d59 0000 10ED 		.long	0x10ed
 3168 0d5d 01        		.uleb128 0x1


 3169 0d5e 0000 0000 		.long	.LVL39
 3170 0d62 0000 10ED 		.long	0x10ed
 3171 0d66 01        		.uleb128 0x1
 3172 0d67 0000 0000 		.long	.LVL40
 3173 0d6b 0000 10ED 		.long	0x10ed
 3174 0d6f 01        		.uleb128 0x1
 3175 0d70 0000 0000 		.long	.LVL41
 3176 0d74 0000 10ED 		.long	0x10ed
 3177 0d78 01        		.uleb128 0x1
 3178 0d79 0000 0000 		.long	.LVL42
 3179 0d7d 0000 10ED 		.long	0x10ed
 3180 0d81 01        		.uleb128 0x1
 3181 0d82 0000 0000 		.long	.LVL43
 3182 0d86 0000 10ED 		.long	0x10ed
 3183 0d8a 01        		.uleb128 0x1
 3184 0d8b 0000 0000 		.long	.LVL44
 3185 0d8f 0000 10ED 		.long	0x10ed
 3186 0d93 01        		.uleb128 0x1
 3187 0d94 0000 0000 		.long	.LVL45
 3188 0d98 0000 10ED 		.long	0x10ed
 3189 0d9c 01        		.uleb128 0x1
 3190 0d9d 0000 0000 		.long	.LVL46
 3191 0da1 0000 10ED 		.long	0x10ed
 3192 0da5 01        		.uleb128 0x1
 3193 0da6 0000 0000 		.long	.LVL47
 3194 0daa 0000 10ED 		.long	0x10ed
 3195 0dae 01        		.uleb128 0x1
 3196 0daf 0000 0000 		.long	.LVL48
 3197 0db3 0000 10ED 		.long	0x10ed
 3198 0db7 01        		.uleb128 0x1
 3199 0db8 0000 0000 		.long	.LVL49
 3200 0dbc 0000 10ED 		.long	0x10ed
 3201 0dc0 01        		.uleb128 0x1
 3202 0dc1 0000 0000 		.long	.LVL53
 3203 0dc5 0000 093A 		.long	0x93a
 3204 0dc9 01        		.uleb128 0x1
 3205 0dca 0000 0000 		.long	.LVL54
 3206 0dce 0000 10ED 		.long	0x10ed
 3207 0dd2 01        		.uleb128 0x1
 3208 0dd3 0000 0000 		.long	.LVL55
 3209 0dd7 0000 10ED 		.long	0x10ed
 3210 0ddb 01        		.uleb128 0x1
 3211 0ddc 0000 0000 		.long	.LVL56
 3212 0de0 0000 10ED 		.long	0x10ed
 3213 0de4 01        		.uleb128 0x1
 3214 0de5 0000 0000 		.long	.LVL57
 3215 0de9 0000 10ED 		.long	0x10ed
 3216 0ded 01        		.uleb128 0x1
 3217 0dee 0000 0000 		.long	.LVL58
 3218 0df2 0000 10ED 		.long	0x10ed
 3219 0df6 01        		.uleb128 0x1
 3220 0df7 0000 0000 		.long	.LVL59
 3221 0dfb 0000 10ED 		.long	0x10ed
 3222 0dff 01        		.uleb128 0x1
 3223 0e00 0000 0000 		.long	.LVL60
 3224 0e04 0000 10ED 		.long	0x10ed
 3225 0e08 01        		.uleb128 0x1


 3226 0e09 0000 0000 		.long	.LVL61
 3227 0e0d 0000 10ED 		.long	0x10ed
 3228 0e11 01        		.uleb128 0x1
 3229 0e12 0000 0000 		.long	.LVL62
 3230 0e16 0000 10ED 		.long	0x10ed
 3231 0e1a 01        		.uleb128 0x1
 3232 0e1b 0000 0000 		.long	.LVL63
 3233 0e1f 0000 10ED 		.long	0x10ed
 3234 0e23 01        		.uleb128 0x1
 3235 0e24 0000 0000 		.long	.LVL64
 3236 0e28 0000 10ED 		.long	0x10ed
 3237 0e2c 01        		.uleb128 0x1
 3238 0e2d 0000 0000 		.long	.LVL65
 3239 0e31 0000 10ED 		.long	0x10ed
 3240 0e35 01        		.uleb128 0x1
 3241 0e36 0000 0000 		.long	.LVL66
 3242 0e3a 0000 10ED 		.long	0x10ed
 3243 0e3e 01        		.uleb128 0x1
 3244 0e3f 0000 0000 		.long	.LVL67
 3245 0e43 0000 10ED 		.long	0x10ed
 3246 0e47 00        		.byte	0
 3247 0e48 3B        		.uleb128 0x3b
 3248 0e49 0000 0000 		.long	.LASF141
 3249 0e4d 01        		.byte	0x1
 3250 0e4e 53        		.byte	0x53
 3251 0e4f 06        		.byte	0x6
 3252 0e50 0000 0000 		.long	.LFB5
 3253 0e54 0000 007E 		.long	.LFE5-.LFB5
 3254 0e58 01        		.uleb128 0x1
 3255 0e59 9C        		.byte	0x9c
 3256 0e5a 0000 0F14 		.long	0xf14
 3257 0e5e 3C        		.uleb128 0x3c
 3258 0e5f 0000 0000 		.long	.LASF142
 3259 0e63 01        		.byte	0x1
 3260 0e64 5D        		.byte	0x5d
 3261 0e65 0C        		.byte	0xc
 3262 0e66 0000 008C 		.long	0x8c
 3263 0e6a 64        		.byte	0x64
 3264 0e6b 0C        		.uleb128 0xc
 3265 0e6c 0000 0000 		.long	.LASF143
 3266 0e70 5E        		.byte	0x5e
 3267 0e71 06        		.byte	0x6
 3268 0e72 0000 0085 		.long	0x85
 3269 0e76 0000 0000 		.long	.LLST0
 3270 0e7a 0000 0000 		.long	.LVUS0
 3271 0e7e 0C        		.uleb128 0xc
 3272 0e7f 0000 0000 		.long	.LASF144
 3273 0e83 5E        		.byte	0x5e
 3274 0e84 13        		.byte	0x13
 3275 0e85 0000 0085 		.long	0x85
 3276 0e89 0000 0000 		.long	.LLST0
 3277 0e8d 0000 0000 		.long	.LVUS0
 3278 0e91 0C        		.uleb128 0xc
 3279 0e92 0000 0000 		.long	.LASF145
 3280 0e96 5F        		.byte	0x5f
 3281 0e97 06        		.byte	0x6
 3282 0e98 0000 0085 		.long	0x85


 3283 0e9c 0000 0000 		.long	.LLST2
 3284 0ea0 0000 0000 		.long	.LVUS2
 3285 0ea4 0F        		.uleb128 0xf
 3286 0ea5 6D69 6E00 		.string	"min"
 3287 0ea9 5F        		.byte	0x5f
 3288 0eaa 10        		.byte	0x10
 3289 0eab 0000 0085 		.long	0x85
 3290 0eaf 0000 0000 		.long	.LLST3
 3291 0eb3 0000 0000 		.long	.LVUS3
 3292 0eb7 0F        		.uleb128 0xf
 3293 0eb8 7365 6300 		.string	"sec"
 3294 0ebc 5F        		.byte	0x5f
 3295 0ebd 19        		.byte	0x19
 3296 0ebe 0000 0085 		.long	0x85
 3297 0ec2 0000 0000 		.long	.LLST4
 3298 0ec6 0000 0000 		.long	.LVUS4
 3299 0eca 0C        		.uleb128 0xc
 3300 0ecb 0000 0000 		.long	.LASF146
 3301 0ecf 5F        		.byte	0x5f
 3302 0ed0 22        		.byte	0x22
 3303 0ed1 0000 0085 		.long	0x85
 3304 0ed5 0000 0000 		.long	.LLST5
 3305 0ed9 0000 0000 		.long	.LVUS5
 3306 0edd 01        		.uleb128 0x1
 3307 0ede 0000 0000 		.long	.LVL1
 3308 0ee2 0000 08E8 		.long	0x8e8
 3309 0ee6 01        		.uleb128 0x1
 3310 0ee7 0000 0000 		.long	.LVL2
 3311 0eeb 0000 08E8 		.long	0x8e8
 3312 0eef 01        		.uleb128 0x1
 3313 0ef0 0000 0000 		.long	.LVL6
 3314 0ef4 0000 08D6 		.long	0x8d6
 3315 0ef8 01        		.uleb128 0x1
 3316 0ef9 0000 0000 		.long	.LVL7
 3317 0efd 0000 08D6 		.long	0x8d6
 3318 0f01 01        		.uleb128 0x1
 3319 0f02 0000 0000 		.long	.LVL8
 3320 0f06 0000 08E8 		.long	0x8e8
 3321 0f0a 01        		.uleb128 0x1
 3322 0f0b 0000 0000 		.long	.LVL9
 3323 0f0f 0000 08E8 		.long	0x8e8
 3324 0f13 00        		.byte	0
 3325 0f14 3D        		.uleb128 0x3d
 3326 0f15 0000 0000 		.long	.LASF157
 3327 0f19 01        		.byte	0x1
 3328 0f1a 31        		.byte	0x31
 3329 0f1b 06        		.byte	0x6
 3330 0f1c 01        		.byte	0x1
 3331 0f1d 18        		.uleb128 0x18
 3332 0f1e 0000 0000 		.long	.LASF147
 3333 0f22 2D        		.byte	0x2d
 3334 0f23 0000 0F44 		.long	0xf44
 3335 0f27 10        		.uleb128 0x10
 3336 0f28 6664 00   		.string	"fd"
 3337 0f2b 2D        		.byte	0x2d
 3338 0f2c 13        		.byte	0x13
 3339 0f2d 0000 0725 		.long	0x725


 3340 0f31 10        		.uleb128 0x10
 3341 0f32 7800      		.string	"x"
 3342 0f34 2D        		.byte	0x2d
 3343 0f35 1B        		.byte	0x1b
 3344 0f36 0000 0085 		.long	0x85
 3345 0f3a 10        		.uleb128 0x10
 3346 0f3b 7900      		.string	"y"
 3347 0f3d 2D        		.byte	0x2d
 3348 0f3e 22        		.byte	0x22
 3349 0f3f 0000 0085 		.long	0x85
 3350 0f43 00        		.byte	0
 3351 0f44 14        		.uleb128 0x14
 3352 0f45 0000 0F1D 		.long	0xf1d
 3353 0f49 0000 0000 		.long	.LFB3
 3354 0f4d 0000 001E 		.long	.LFE3-.LFB3
 3355 0f51 01        		.uleb128 0x1
 3356 0f52 9C        		.byte	0x9c
 3357 0f53 0000 0F79 		.long	0xf79
 3358 0f57 11        		.uleb128 0x11
 3359 0f58 0000 0F27 		.long	0xf27
 3360 0f5c 02        		.uleb128 0x2
 3361 0f5d 91        		.byte	0x91
 3362 0f5e 00        		.sleb128 0
 3363 0f5f 11        		.uleb128 0x11
 3364 0f60 0000 0F31 		.long	0xf31
 3365 0f64 02        		.uleb128 0x2
 3366 0f65 91        		.byte	0x91
 3367 0f66 04        		.sleb128 4
 3368 0f67 11        		.uleb128 0x11
 3369 0f68 0000 0F3A 		.long	0xf3a
 3370 0f6c 02        		.uleb128 0x2
 3371 0f6d 91        		.byte	0x91
 3372 0f6e 08        		.sleb128 8
 3373 0f6f 01        		.uleb128 0x1
 3374 0f70 0000 0000 		.long	.LVL26
 3375 0f74 0000 093A 		.long	0x93a
 3376 0f78 00        		.byte	0
 3377 0f79 14        		.uleb128 0x14
 3378 0f7a 0000 0F14 		.long	0xf14
 3379 0f7e 0000 0000 		.long	.LFB4
 3380 0f82 0000 0064 		.long	.LFE4-.LFB4
 3381 0f86 01        		.uleb128 0x1
 3382 0f87 9C        		.byte	0x9c
 3383 0f88 0000 0FDC 		.long	0xfdc
 3384 0f8c 19        		.uleb128 0x19
 3385 0f8d 0000 0F14 		.long	0xf14
 3386 0f91 0000 0000 		.long	.LBI12
 3387 0f95 00        		.byte	.LVU83
 3388 0f96 0000 0000 		.long	.LBB12
 3389 0f9a 0000 0016 		.long	.LBE12-.LBB12
 3390 0f9e 31        		.byte	0x31
 3391 0f9f 06        		.byte	0x6
 3392 0fa0 0000 0FB7 		.long	0xfb7
 3393 0fa4 01        		.uleb128 0x1
 3394 0fa5 0000 0000 		.long	.LVL31
 3395 0fa9 0000 090C 		.long	0x90c
 3396 0fad 01        		.uleb128 0x1


 3397 0fae 0000 0000 		.long	.LVL32
 3398 0fb2 0000 08FA 		.long	0x8fa
 3399 0fb6 00        		.byte	0
 3400 0fb7 01        		.uleb128 0x1
 3401 0fb8 0000 0000 		.long	.LVL27
 3402 0fbc 0000 091E 		.long	0x91e
 3403 0fc0 01        		.uleb128 0x1
 3404 0fc1 0000 0000 		.long	.LVL28
 3405 0fc5 0000 091E 		.long	0x91e
 3406 0fc9 01        		.uleb128 0x1
 3407 0fca 0000 0000 		.long	.LVL29
 3408 0fce 0000 090C 		.long	0x90c
 3409 0fd2 01        		.uleb128 0x1
 3410 0fd3 0000 0000 		.long	.LVL30
 3411 0fd7 0000 08FA 		.long	0x8fa
 3412 0fdb 00        		.byte	0
 3413 0fdc 14        		.uleb128 0x14
 3414 0fdd 0000 0CA4 		.long	0xca4
 3415 0fe1 0000 0000 		.long	.LFB7
 3416 0fe5 0000 004A 		.long	.LFE7-.LFB7
 3417 0fe9 01        		.uleb128 0x1
 3418 0fea 9C        		.byte	0x9c
 3419 0feb 0000 104A 		.long	0x104a
 3420 0fef 11        		.uleb128 0x11
 3421 0ff0 0000 0CAE 		.long	0xcae
 3422 0ff4 02        		.uleb128 0x2
 3423 0ff5 91        		.byte	0x91
 3424 0ff6 00        		.sleb128 0
 3425 0ff7 19        		.uleb128 0x19
 3426 0ff8 0000 0F1D 		.long	0xf1d
 3427 0ffc 0000 0000 		.long	.LBI16
 3428 1000 01        		.byte	.LVU167
 3429 1001 0000 0000 		.long	.LBB16
 3430 1005 0000 001C 		.long	.LBE16-.LBB16
 3431 1009 B9        		.byte	0xb9
 3432 100a 02        		.byte	0x2
 3433 100b 0000 1040 		.long	0x1040
 3434 100f 07        		.uleb128 0x7
 3435 1010 0000 0F3A 		.long	0xf3a
 3436 1014 0000 0000 		.long	.LLST11
 3437 1018 0000 0000 		.long	.LVUS11
 3438 101c 07        		.uleb128 0x7
 3439 101d 0000 0F31 		.long	0xf31
 3440 1021 0000 0000 		.long	.LLST12
 3441 1025 0000 0000 		.long	.LVUS12
 3442 1029 07        		.uleb128 0x7
 3443 102a 0000 0F27 		.long	0xf27
 3444 102e 0000 0000 		.long	.LLST13
 3445 1032 0000 0000 		.long	.LVUS13
 3446 1036 01        		.uleb128 0x1
 3447 1037 0000 0000 		.long	.LVL71
 3448 103b 0000 10E4 		.long	0x10e4
 3449 103f 00        		.byte	0
 3450 1040 01        		.uleb128 0x1
 3451 1041 0000 0000 		.long	.LVL72
 3452 1045 0000 10E4 		.long	0x10e4
 3453 1049 00        		.byte	0


 3454 104a 14        		.uleb128 0x14
 3455 104b 0000 0C8F 		.long	0xc8f
 3456 104f 0000 0000 		.long	.LFB8
 3457 1053 0000 0080 		.long	.LFE8-.LFB8
 3458 1057 01        		.uleb128 0x1
 3459 1058 9C        		.byte	0x9c
 3460 1059 0000 10DB 		.long	0x10db
 3461 105d 11        		.uleb128 0x11
 3462 105e 0000 0C99 		.long	0xc99
 3463 1062 02        		.uleb128 0x2
 3464 1063 91        		.byte	0x91
 3465 1064 00        		.sleb128 0
 3466 1065 3E        		.uleb128 0x3e
 3467 1066 0000 0C8F 		.long	0xc8f
 3468 106a 0000 0000 		.long	.LBI22
 3469 106e 00        		.byte	.LVU177
 3470 106f 0000 0000 		.long	.LBB22
 3471 1073 0000 0068 		.long	.LBE22-.LBB22
 3472 1077 01        		.byte	0x1
 3473 1078 BD        		.byte	0xbd
 3474 1079 06        		.byte	0x6
 3475 107a 07        		.uleb128 0x7
 3476 107b 0000 0C99 		.long	0xc99
 3477 107f 0000 0000 		.long	.LLST14
 3478 1083 0000 0000 		.long	.LVUS14
 3479 1087 19        		.uleb128 0x19
 3480 1088 0000 0F1D 		.long	0xf1d
 3481 108c 0000 0000 		.long	.LBI24
 3482 1090 02        		.byte	.LVU179
 3483 1091 0000 0000 		.long	.LBB24
 3484 1095 0000 001E 		.long	.LBE24-.LBB24
 3485 1099 BF        		.byte	0xbf
 3486 109a 03        		.byte	0x3
 3487 109b 0000 10D0 		.long	0x10d0
 3488 109f 07        		.uleb128 0x7
 3489 10a0 0000 0F3A 		.long	0xf3a
 3490 10a4 0000 0000 		.long	.LLST15
 3491 10a8 0000 0000 		.long	.LVUS15
 3492 10ac 07        		.uleb128 0x7
 3493 10ad 0000 0F31 		.long	0xf31
 3494 10b1 0000 0000 		.long	.LLST16
 3495 10b5 0000 0000 		.long	.LVUS16
 3496 10b9 07        		.uleb128 0x7
 3497 10ba 0000 0F27 		.long	0xf27
 3498 10be 0000 0000 		.long	.LLST17
 3499 10c2 0000 0000 		.long	.LVUS17
 3500 10c6 01        		.uleb128 0x1
 3501 10c7 0000 0000 		.long	.LVL75
 3502 10cb 0000 10E4 		.long	0x10e4
 3503 10cf 00        		.byte	0
 3504 10d0 01        		.uleb128 0x1
 3505 10d1 0000 0000 		.long	.LVL76
 3506 10d5 0000 10E4 		.long	0x10e4
 3507 10d9 00        		.byte	0
 3508 10da 00        		.byte	0
 3509 10db 1A        		.uleb128 0x1a
 3510 10dc 0000 0000 		.long	.LASF148


 3511 10e0 0000 0000 		.long	.LASF149
 3512 10e4 1A        		.uleb128 0x1a
 3513 10e5 0000 0000 		.long	.LASF125
 3514 10e9 0000 0000 		.long	.LASF150
 3515 10ed 1A        		.uleb128 0x1a
 3516 10ee 0000 0000 		.long	.LASF151
 3517 10f2 0000 0000 		.long	.LASF152
 3518 10f6 00        		.byte	0
 3519               		.section	.debug_abbrev,"",@progbits
 3520               	.Ldebug_abbrev0:
 3521 0000 01        		.uleb128 0x1
 3522 0001 48        		.uleb128 0x48
 3523 0002 00        		.byte	0
 3524 0003 7D        		.uleb128 0x7d
 3525 0004 01        		.uleb128 0x1
 3526 0005 7F        		.uleb128 0x7f
 3527 0006 13        		.uleb128 0x13
 3528 0007 00        		.byte	0
 3529 0008 00        		.byte	0
 3530 0009 02        		.uleb128 0x2
 3531 000a 0D        		.uleb128 0xd
 3532 000b 00        		.byte	0
 3533 000c 03        		.uleb128 0x3
 3534 000d 0E        		.uleb128 0xe
 3535 000e 3A        		.uleb128 0x3a
 3536 000f 21        		.uleb128 0x21
 3537 0010 04        		.sleb128 4
 3538 0011 3B        		.uleb128 0x3b
 3539 0012 05        		.uleb128 0x5
 3540 0013 39        		.uleb128 0x39
 3541 0014 0B        		.uleb128 0xb
 3542 0015 49        		.uleb128 0x49
 3543 0016 13        		.uleb128 0x13
 3544 0017 38        		.uleb128 0x38
 3545 0018 0B        		.uleb128 0xb
 3546 0019 00        		.byte	0
 3547 001a 00        		.byte	0
 3548 001b 03        		.uleb128 0x3
 3549 001c 0D        		.uleb128 0xd
 3550 001d 00        		.byte	0
 3551 001e 03        		.uleb128 0x3
 3552 001f 0E        		.uleb128 0xe
 3553 0020 3A        		.uleb128 0x3a
 3554 0021 0B        		.uleb128 0xb
 3555 0022 3B        		.uleb128 0x3b
 3556 0023 0B        		.uleb128 0xb
 3557 0024 39        		.uleb128 0x39
 3558 0025 0B        		.uleb128 0xb
 3559 0026 49        		.uleb128 0x49
 3560 0027 13        		.uleb128 0x13
 3561 0028 38        		.uleb128 0x38
 3562 0029 0B        		.uleb128 0xb
 3563 002a 00        		.byte	0
 3564 002b 00        		.byte	0
 3565 002c 04        		.uleb128 0x4
 3566 002d 05        		.uleb128 0x5
 3567 002e 00        		.byte	0


 3568 002f 49        		.uleb128 0x49
 3569 0030 13        		.uleb128 0x13
 3570 0031 00        		.byte	0
 3571 0032 00        		.byte	0
 3572 0033 05        		.uleb128 0x5
 3573 0034 34        		.uleb128 0x34
 3574 0035 00        		.byte	0
 3575 0036 03        		.uleb128 0x3
 3576 0037 0E        		.uleb128 0xe
 3577 0038 3A        		.uleb128 0x3a
 3578 0039 21        		.uleb128 0x21
 3579 003a 01        		.sleb128 1
 3580 003b 3B        		.uleb128 0x3b
 3581 003c 0B        		.uleb128 0xb
 3582 003d 39        		.uleb128 0x39
 3583 003e 0B        		.uleb128 0xb
 3584 003f 49        		.uleb128 0x49
 3585 0040 13        		.uleb128 0x13
 3586 0041 3F        		.uleb128 0x3f
 3587 0042 19        		.uleb128 0x19
 3588 0043 02        		.uleb128 0x2
 3589 0044 18        		.uleb128 0x18
 3590 0045 00        		.byte	0
 3591 0046 00        		.byte	0
 3592 0047 06        		.uleb128 0x6
 3593 0048 0F        		.uleb128 0xf
 3594 0049 00        		.byte	0
 3595 004a 0B        		.uleb128 0xb
 3596 004b 21        		.uleb128 0x21
 3597 004c 04        		.sleb128 4
 3598 004d 49        		.uleb128 0x49
 3599 004e 13        		.uleb128 0x13
 3600 004f 00        		.byte	0
 3601 0050 00        		.byte	0
 3602 0051 07        		.uleb128 0x7
 3603 0052 05        		.uleb128 0x5
 3604 0053 00        		.byte	0
 3605 0054 31        		.uleb128 0x31
 3606 0055 13        		.uleb128 0x13
 3607 0056 02        		.uleb128 0x2
 3608 0057 17        		.uleb128 0x17
 3609 0058 B742      		.uleb128 0x2137
 3610 005a 17        		.uleb128 0x17
 3611 005b 00        		.byte	0
 3612 005c 00        		.byte	0
 3613 005d 08        		.uleb128 0x8
 3614 005e 01        		.uleb128 0x1
 3615 005f 01        		.byte	0x1
 3616 0060 49        		.uleb128 0x49
 3617 0061 13        		.uleb128 0x13
 3618 0062 01        		.uleb128 0x1
 3619 0063 13        		.uleb128 0x13
 3620 0064 00        		.byte	0
 3621 0065 00        		.byte	0
 3622 0066 09        		.uleb128 0x9
 3623 0067 21        		.uleb128 0x21
 3624 0068 00        		.byte	0


 3625 0069 49        		.uleb128 0x49
 3626 006a 13        		.uleb128 0x13
 3627 006b 2F        		.uleb128 0x2f
 3628 006c 0B        		.uleb128 0xb
 3629 006d 00        		.byte	0
 3630 006e 00        		.byte	0
 3631 006f 0A        		.uleb128 0xa
 3632 0070 24        		.uleb128 0x24
 3633 0071 00        		.byte	0
 3634 0072 0B        		.uleb128 0xb
 3635 0073 0B        		.uleb128 0xb
 3636 0074 3E        		.uleb128 0x3e
 3637 0075 0B        		.uleb128 0xb
 3638 0076 03        		.uleb128 0x3
 3639 0077 0E        		.uleb128 0xe
 3640 0078 00        		.byte	0
 3641 0079 00        		.byte	0
 3642 007a 0B        		.uleb128 0xb
 3643 007b 0D        		.uleb128 0xd
 3644 007c 00        		.byte	0
 3645 007d 03        		.uleb128 0x3
 3646 007e 08        		.uleb128 0x8
 3647 007f 3A        		.uleb128 0x3a
 3648 0080 21        		.uleb128 0x21
 3649 0081 04        		.sleb128 4
 3650 0082 3B        		.uleb128 0x3b
 3651 0083 0B        		.uleb128 0xb
 3652 0084 39        		.uleb128 0x39
 3653 0085 0B        		.uleb128 0xb
 3654 0086 49        		.uleb128 0x49
 3655 0087 13        		.uleb128 0x13
 3656 0088 38        		.uleb128 0x38
 3657 0089 0B        		.uleb128 0xb
 3658 008a 00        		.byte	0
 3659 008b 00        		.byte	0
 3660 008c 0C        		.uleb128 0xc
 3661 008d 34        		.uleb128 0x34
 3662 008e 00        		.byte	0
 3663 008f 03        		.uleb128 0x3
 3664 0090 0E        		.uleb128 0xe
 3665 0091 3A        		.uleb128 0x3a
 3666 0092 21        		.uleb128 0x21
 3667 0093 01        		.sleb128 1
 3668 0094 3B        		.uleb128 0x3b
 3669 0095 0B        		.uleb128 0xb
 3670 0096 39        		.uleb128 0x39
 3671 0097 0B        		.uleb128 0xb
 3672 0098 49        		.uleb128 0x49
 3673 0099 13        		.uleb128 0x13
 3674 009a 02        		.uleb128 0x2
 3675 009b 17        		.uleb128 0x17
 3676 009c B742      		.uleb128 0x2137
 3677 009e 17        		.uleb128 0x17
 3678 009f 00        		.byte	0
 3679 00a0 00        		.byte	0
 3680 00a1 0D        		.uleb128 0xd
 3681 00a2 16        		.uleb128 0x16


 3682 00a3 00        		.byte	0
 3683 00a4 03        		.uleb128 0x3
 3684 00a5 0E        		.uleb128 0xe
 3685 00a6 3A        		.uleb128 0x3a
 3686 00a7 0B        		.uleb128 0xb
 3687 00a8 3B        		.uleb128 0x3b
 3688 00a9 0B        		.uleb128 0xb
 3689 00aa 39        		.uleb128 0x39
 3690 00ab 0B        		.uleb128 0xb
 3691 00ac 49        		.uleb128 0x49
 3692 00ad 13        		.uleb128 0x13
 3693 00ae 00        		.byte	0
 3694 00af 00        		.byte	0
 3695 00b0 0E        		.uleb128 0xe
 3696 00b1 18        		.uleb128 0x18
 3697 00b2 00        		.byte	0
 3698 00b3 00        		.byte	0
 3699 00b4 00        		.byte	0
 3700 00b5 0F        		.uleb128 0xf
 3701 00b6 34        		.uleb128 0x34
 3702 00b7 00        		.byte	0
 3703 00b8 03        		.uleb128 0x3
 3704 00b9 08        		.uleb128 0x8
 3705 00ba 3A        		.uleb128 0x3a
 3706 00bb 21        		.uleb128 0x21
 3707 00bc 01        		.sleb128 1
 3708 00bd 3B        		.uleb128 0x3b
 3709 00be 0B        		.uleb128 0xb
 3710 00bf 39        		.uleb128 0x39
 3711 00c0 0B        		.uleb128 0xb
 3712 00c1 49        		.uleb128 0x49
 3713 00c2 13        		.uleb128 0x13
 3714 00c3 02        		.uleb128 0x2
 3715 00c4 17        		.uleb128 0x17
 3716 00c5 B742      		.uleb128 0x2137
 3717 00c7 17        		.uleb128 0x17
 3718 00c8 00        		.byte	0
 3719 00c9 00        		.byte	0
 3720 00ca 10        		.uleb128 0x10
 3721 00cb 05        		.uleb128 0x5
 3722 00cc 00        		.byte	0
 3723 00cd 03        		.uleb128 0x3
 3724 00ce 08        		.uleb128 0x8
 3725 00cf 3A        		.uleb128 0x3a
 3726 00d0 21        		.uleb128 0x21
 3727 00d1 01        		.sleb128 1
 3728 00d2 3B        		.uleb128 0x3b
 3729 00d3 0B        		.uleb128 0xb
 3730 00d4 39        		.uleb128 0x39
 3731 00d5 0B        		.uleb128 0xb
 3732 00d6 49        		.uleb128 0x49
 3733 00d7 13        		.uleb128 0x13
 3734 00d8 00        		.byte	0
 3735 00d9 00        		.byte	0
 3736 00da 11        		.uleb128 0x11
 3737 00db 05        		.uleb128 0x5
 3738 00dc 00        		.byte	0


 3739 00dd 31        		.uleb128 0x31
 3740 00de 13        		.uleb128 0x13
 3741 00df 02        		.uleb128 0x2
 3742 00e0 18        		.uleb128 0x18
 3743 00e1 00        		.byte	0
 3744 00e2 00        		.byte	0
 3745 00e3 12        		.uleb128 0x12
 3746 00e4 13        		.uleb128 0x13
 3747 00e5 01        		.byte	0x1
 3748 00e6 03        		.uleb128 0x3
 3749 00e7 0E        		.uleb128 0xe
 3750 00e8 0B        		.uleb128 0xb
 3751 00e9 0B        		.uleb128 0xb
 3752 00ea 3A        		.uleb128 0x3a
 3753 00eb 21        		.uleb128 0x21
 3754 00ec 04        		.sleb128 4
 3755 00ed 3B        		.uleb128 0x3b
 3756 00ee 0B        		.uleb128 0xb
 3757 00ef 39        		.uleb128 0x39
 3758 00f0 21        		.uleb128 0x21
 3759 00f1 08        		.sleb128 8
 3760 00f2 01        		.uleb128 0x1
 3761 00f3 13        		.uleb128 0x13
 3762 00f4 00        		.byte	0
 3763 00f5 00        		.byte	0
 3764 00f6 13        		.uleb128 0x13
 3765 00f7 15        		.uleb128 0x15
 3766 00f8 01        		.byte	0x1
 3767 00f9 27        		.uleb128 0x27
 3768 00fa 19        		.uleb128 0x19
 3769 00fb 49        		.uleb128 0x49
 3770 00fc 13        		.uleb128 0x13
 3771 00fd 01        		.uleb128 0x1
 3772 00fe 13        		.uleb128 0x13
 3773 00ff 00        		.byte	0
 3774 0100 00        		.byte	0
 3775 0101 14        		.uleb128 0x14
 3776 0102 2E        		.uleb128 0x2e
 3777 0103 01        		.byte	0x1
 3778 0104 31        		.uleb128 0x31
 3779 0105 13        		.uleb128 0x13
 3780 0106 11        		.uleb128 0x11
 3781 0107 01        		.uleb128 0x1
 3782 0108 12        		.uleb128 0x12
 3783 0109 06        		.uleb128 0x6
 3784 010a 40        		.uleb128 0x40
 3785 010b 18        		.uleb128 0x18
 3786 010c 7A        		.uleb128 0x7a
 3787 010d 19        		.uleb128 0x19
 3788 010e 01        		.uleb128 0x1
 3789 010f 13        		.uleb128 0x13
 3790 0110 00        		.byte	0
 3791 0111 00        		.byte	0
 3792 0112 15        		.uleb128 0x15
 3793 0113 2E        		.uleb128 0x2e
 3794 0114 01        		.byte	0x1
 3795 0115 3F        		.uleb128 0x3f


 3796 0116 19        		.uleb128 0x19
 3797 0117 03        		.uleb128 0x3
 3798 0118 0E        		.uleb128 0xe
 3799 0119 3A        		.uleb128 0x3a
 3800 011a 0B        		.uleb128 0xb
 3801 011b 3B        		.uleb128 0x3b
 3802 011c 0B        		.uleb128 0xb
 3803 011d 39        		.uleb128 0x39
 3804 011e 0B        		.uleb128 0xb
 3805 011f 27        		.uleb128 0x27
 3806 0120 19        		.uleb128 0x19
 3807 0121 49        		.uleb128 0x49
 3808 0122 13        		.uleb128 0x13
 3809 0123 3C        		.uleb128 0x3c
 3810 0124 19        		.uleb128 0x19
 3811 0125 01        		.uleb128 0x1
 3812 0126 13        		.uleb128 0x13
 3813 0127 00        		.byte	0
 3814 0128 00        		.byte	0
 3815 0129 16        		.uleb128 0x16
 3816 012a 2E        		.uleb128 0x2e
 3817 012b 01        		.byte	0x1
 3818 012c 3F        		.uleb128 0x3f
 3819 012d 19        		.uleb128 0x19
 3820 012e 03        		.uleb128 0x3
 3821 012f 0E        		.uleb128 0xe
 3822 0130 3A        		.uleb128 0x3a
 3823 0131 21        		.uleb128 0x21
 3824 0132 01        		.sleb128 1
 3825 0133 3B        		.uleb128 0x3b
 3826 0134 0B        		.uleb128 0xb
 3827 0135 39        		.uleb128 0x39
 3828 0136 21        		.uleb128 0x21
 3829 0137 06        		.sleb128 6
 3830 0138 27        		.uleb128 0x27
 3831 0139 19        		.uleb128 0x19
 3832 013a 11        		.uleb128 0x11
 3833 013b 01        		.uleb128 0x1
 3834 013c 12        		.uleb128 0x12
 3835 013d 06        		.uleb128 0x6
 3836 013e 40        		.uleb128 0x40
 3837 013f 18        		.uleb128 0x18
 3838 0140 7A        		.uleb128 0x7a
 3839 0141 19        		.uleb128 0x19
 3840 0142 01        		.uleb128 0x1
 3841 0143 13        		.uleb128 0x13
 3842 0144 00        		.byte	0
 3843 0145 00        		.byte	0
 3844 0146 17        		.uleb128 0x17
 3845 0147 1D        		.uleb128 0x1d
 3846 0148 01        		.byte	0x1
 3847 0149 31        		.uleb128 0x31
 3848 014a 13        		.uleb128 0x13
 3849 014b 52        		.uleb128 0x52
 3850 014c 01        		.uleb128 0x1
 3851 014d B842      		.uleb128 0x2138
 3852 014f 0B        		.uleb128 0xb


 3853 0150 55        		.uleb128 0x55
 3854 0151 17        		.uleb128 0x17
 3855 0152 58        		.uleb128 0x58
 3856 0153 21        		.uleb128 0x21
 3857 0154 01        		.sleb128 1
 3858 0155 59        		.uleb128 0x59
 3859 0156 0B        		.uleb128 0xb
 3860 0157 57        		.uleb128 0x57
 3861 0158 21        		.uleb128 0x21
 3862 0159 02        		.sleb128 2
 3863 015a 01        		.uleb128 0x1
 3864 015b 13        		.uleb128 0x13
 3865 015c 00        		.byte	0
 3866 015d 00        		.byte	0
 3867 015e 18        		.uleb128 0x18
 3868 015f 2E        		.uleb128 0x2e
 3869 0160 01        		.byte	0x1
 3870 0161 3F        		.uleb128 0x3f
 3871 0162 19        		.uleb128 0x19
 3872 0163 03        		.uleb128 0x3
 3873 0164 0E        		.uleb128 0xe
 3874 0165 3A        		.uleb128 0x3a
 3875 0166 21        		.uleb128 0x21
 3876 0167 01        		.sleb128 1
 3877 0168 3B        		.uleb128 0x3b
 3878 0169 0B        		.uleb128 0xb
 3879 016a 39        		.uleb128 0x39
 3880 016b 21        		.uleb128 0x21
 3881 016c 06        		.sleb128 6
 3882 016d 27        		.uleb128 0x27
 3883 016e 19        		.uleb128 0x19
 3884 016f 20        		.uleb128 0x20
 3885 0170 21        		.uleb128 0x21
 3886 0171 01        		.sleb128 1
 3887 0172 01        		.uleb128 0x1
 3888 0173 13        		.uleb128 0x13
 3889 0174 00        		.byte	0
 3890 0175 00        		.byte	0
 3891 0176 19        		.uleb128 0x19
 3892 0177 1D        		.uleb128 0x1d
 3893 0178 01        		.byte	0x1
 3894 0179 31        		.uleb128 0x31
 3895 017a 13        		.uleb128 0x13
 3896 017b 52        		.uleb128 0x52
 3897 017c 01        		.uleb128 0x1
 3898 017d B842      		.uleb128 0x2138
 3899 017f 0B        		.uleb128 0xb
 3900 0180 11        		.uleb128 0x11
 3901 0181 01        		.uleb128 0x1
 3902 0182 12        		.uleb128 0x12
 3903 0183 06        		.uleb128 0x6
 3904 0184 58        		.uleb128 0x58
 3905 0185 21        		.uleb128 0x21
 3906 0186 01        		.sleb128 1
 3907 0187 59        		.uleb128 0x59
 3908 0188 0B        		.uleb128 0xb
 3909 0189 57        		.uleb128 0x57


 3910 018a 0B        		.uleb128 0xb
 3911 018b 01        		.uleb128 0x1
 3912 018c 13        		.uleb128 0x13
 3913 018d 00        		.byte	0
 3914 018e 00        		.byte	0
 3915 018f 1A        		.uleb128 0x1a
 3916 0190 2E        		.uleb128 0x2e
 3917 0191 00        		.byte	0
 3918 0192 3F        		.uleb128 0x3f
 3919 0193 19        		.uleb128 0x19
 3920 0194 3C        		.uleb128 0x3c
 3921 0195 19        		.uleb128 0x19
 3922 0196 6E        		.uleb128 0x6e
 3923 0197 0E        		.uleb128 0xe
 3924 0198 03        		.uleb128 0x3
 3925 0199 0E        		.uleb128 0xe
 3926 019a 3A        		.uleb128 0x3a
 3927 019b 21        		.uleb128 0x21
 3928 019c 09        		.sleb128 9
 3929 019d 3B        		.uleb128 0x3b
 3930 019e 21        		.uleb128 0x21
 3931 019f 00        		.sleb128 0
 3932 01a0 00        		.byte	0
 3933 01a1 00        		.byte	0
 3934 01a2 1B        		.uleb128 0x1b
 3935 01a3 16        		.uleb128 0x16
 3936 01a4 00        		.byte	0
 3937 01a5 03        		.uleb128 0x3
 3938 01a6 0E        		.uleb128 0xe
 3939 01a7 3A        		.uleb128 0x3a
 3940 01a8 0B        		.uleb128 0xb
 3941 01a9 3B        		.uleb128 0x3b
 3942 01aa 05        		.uleb128 0x5
 3943 01ab 39        		.uleb128 0x39
 3944 01ac 0B        		.uleb128 0xb
 3945 01ad 49        		.uleb128 0x49
 3946 01ae 13        		.uleb128 0x13
 3947 01af 00        		.byte	0
 3948 01b0 00        		.byte	0
 3949 01b1 1C        		.uleb128 0x1c
 3950 01b2 26        		.uleb128 0x26
 3951 01b3 00        		.byte	0
 3952 01b4 49        		.uleb128 0x49
 3953 01b5 13        		.uleb128 0x13
 3954 01b6 00        		.byte	0
 3955 01b7 00        		.byte	0
 3956 01b8 1D        		.uleb128 0x1d
 3957 01b9 0D        		.uleb128 0xd
 3958 01ba 00        		.byte	0
 3959 01bb 03        		.uleb128 0x3
 3960 01bc 0E        		.uleb128 0xe
 3961 01bd 3A        		.uleb128 0x3a
 3962 01be 21        		.uleb128 0x21
 3963 01bf 03        		.sleb128 3
 3964 01c0 3B        		.uleb128 0x3b
 3965 01c1 0B        		.uleb128 0xb
 3966 01c2 39        		.uleb128 0x39


 3967 01c3 0B        		.uleb128 0xb
 3968 01c4 49        		.uleb128 0x49
 3969 01c5 13        		.uleb128 0x13
 3970 01c6 00        		.byte	0
 3971 01c7 00        		.byte	0
 3972 01c8 1E        		.uleb128 0x1e
 3973 01c9 37        		.uleb128 0x37
 3974 01ca 00        		.byte	0
 3975 01cb 49        		.uleb128 0x49
 3976 01cc 13        		.uleb128 0x13
 3977 01cd 00        		.byte	0
 3978 01ce 00        		.byte	0
 3979 01cf 1F        		.uleb128 0x1f
 3980 01d0 15        		.uleb128 0x15
 3981 01d1 01        		.byte	0x1
 3982 01d2 27        		.uleb128 0x27
 3983 01d3 19        		.uleb128 0x19
 3984 01d4 01        		.uleb128 0x1
 3985 01d5 13        		.uleb128 0x13
 3986 01d6 00        		.byte	0
 3987 01d7 00        		.byte	0
 3988 01d8 20        		.uleb128 0x20
 3989 01d9 21        		.uleb128 0x21
 3990 01da 00        		.byte	0
 3991 01db 49        		.uleb128 0x49
 3992 01dc 13        		.uleb128 0x13
 3993 01dd 2F        		.uleb128 0x2f
 3994 01de 21        		.uleb128 0x21
 3995 01df E707      		.sleb128 999
 3996 01e1 00        		.byte	0
 3997 01e2 00        		.byte	0
 3998 01e3 21        		.uleb128 0x21
 3999 01e4 2E        		.uleb128 0x2e
 4000 01e5 01        		.byte	0x1
 4001 01e6 3F        		.uleb128 0x3f
 4002 01e7 19        		.uleb128 0x19
 4003 01e8 03        		.uleb128 0x3
 4004 01e9 0E        		.uleb128 0xe
 4005 01ea 3A        		.uleb128 0x3a
 4006 01eb 21        		.uleb128 0x21
 4007 01ec 07        		.sleb128 7
 4008 01ed 3B        		.uleb128 0x3b
 4009 01ee 0B        		.uleb128 0xb
 4010 01ef 39        		.uleb128 0x39
 4011 01f0 21        		.uleb128 0x21
 4012 01f1 06        		.sleb128 6
 4013 01f2 3C        		.uleb128 0x3c
 4014 01f3 19        		.uleb128 0x19
 4015 01f4 01        		.uleb128 0x1
 4016 01f5 13        		.uleb128 0x13
 4017 01f6 00        		.byte	0
 4018 01f7 00        		.byte	0
 4019 01f8 22        		.uleb128 0x22
 4020 01f9 2E        		.uleb128 0x2e
 4021 01fa 01        		.byte	0x1
 4022 01fb 3F        		.uleb128 0x3f
 4023 01fc 19        		.uleb128 0x19


 4024 01fd 03        		.uleb128 0x3
 4025 01fe 0E        		.uleb128 0xe
 4026 01ff 3A        		.uleb128 0x3a
 4027 0200 0B        		.uleb128 0xb
 4028 0201 3B        		.uleb128 0x3b
 4029 0202 0B        		.uleb128 0xb
 4030 0203 39        		.uleb128 0x39
 4031 0204 0B        		.uleb128 0xb
 4032 0205 27        		.uleb128 0x27
 4033 0206 19        		.uleb128 0x19
 4034 0207 3C        		.uleb128 0x3c
 4035 0208 19        		.uleb128 0x19
 4036 0209 01        		.uleb128 0x1
 4037 020a 13        		.uleb128 0x13
 4038 020b 00        		.byte	0
 4039 020c 00        		.byte	0
 4040 020d 23        		.uleb128 0x23
 4041 020e 2E        		.uleb128 0x2e
 4042 020f 01        		.byte	0x1
 4043 0210 3F        		.uleb128 0x3f
 4044 0211 19        		.uleb128 0x19
 4045 0212 03        		.uleb128 0x3
 4046 0213 08        		.uleb128 0x8
 4047 0214 3A        		.uleb128 0x3a
 4048 0215 21        		.uleb128 0x21
 4049 0216 07        		.sleb128 7
 4050 0217 3B        		.uleb128 0x3b
 4051 0218 0B        		.uleb128 0xb
 4052 0219 39        		.uleb128 0x39
 4053 021a 21        		.uleb128 0x21
 4054 021b 0C        		.sleb128 12
 4055 021c 27        		.uleb128 0x27
 4056 021d 19        		.uleb128 0x19
 4057 021e 49        		.uleb128 0x49
 4058 021f 13        		.uleb128 0x13
 4059 0220 3C        		.uleb128 0x3c
 4060 0221 19        		.uleb128 0x19
 4061 0222 01        		.uleb128 0x1
 4062 0223 13        		.uleb128 0x13
 4063 0224 00        		.byte	0
 4064 0225 00        		.byte	0
 4065 0226 24        		.uleb128 0x24
 4066 0227 2E        		.uleb128 0x2e
 4067 0228 01        		.byte	0x1
 4068 0229 3F        		.uleb128 0x3f
 4069 022a 19        		.uleb128 0x19
 4070 022b 03        		.uleb128 0x3
 4071 022c 0E        		.uleb128 0xe
 4072 022d 3A        		.uleb128 0x3a
 4073 022e 21        		.uleb128 0x21
 4074 022f 01        		.sleb128 1
 4075 0230 3B        		.uleb128 0x3b
 4076 0231 05        		.uleb128 0x5
 4077 0232 39        		.uleb128 0x39
 4078 0233 21        		.uleb128 0x21
 4079 0234 06        		.sleb128 6
 4080 0235 11        		.uleb128 0x11


 4081 0236 01        		.uleb128 0x1
 4082 0237 12        		.uleb128 0x12
 4083 0238 06        		.uleb128 0x6
 4084 0239 40        		.uleb128 0x40
 4085 023a 18        		.uleb128 0x18
 4086 023b 7A        		.uleb128 0x7a
 4087 023c 19        		.uleb128 0x19
 4088 023d 01        		.uleb128 0x1
 4089 023e 13        		.uleb128 0x13
 4090 023f 00        		.byte	0
 4091 0240 00        		.byte	0
 4092 0241 25        		.uleb128 0x25
 4093 0242 05        		.uleb128 0x5
 4094 0243 00        		.byte	0
 4095 0244 03        		.uleb128 0x3
 4096 0245 0E        		.uleb128 0xe
 4097 0246 3A        		.uleb128 0x3a
 4098 0247 21        		.uleb128 0x21
 4099 0248 01        		.sleb128 1
 4100 0249 3B        		.uleb128 0x3b
 4101 024a 0B        		.uleb128 0xb
 4102 024b 39        		.uleb128 0x39
 4103 024c 0B        		.uleb128 0xb
 4104 024d 49        		.uleb128 0x49
 4105 024e 13        		.uleb128 0x13
 4106 024f 02        		.uleb128 0x2
 4107 0250 18        		.uleb128 0x18
 4108 0251 00        		.byte	0
 4109 0252 00        		.byte	0
 4110 0253 26        		.uleb128 0x26
 4111 0254 11        		.uleb128 0x11
 4112 0255 01        		.byte	0x1
 4113 0256 25        		.uleb128 0x25
 4114 0257 0E        		.uleb128 0xe
 4115 0258 13        		.uleb128 0x13
 4116 0259 0B        		.uleb128 0xb
 4117 025a 03        		.uleb128 0x3
 4118 025b 0E        		.uleb128 0xe
 4119 025c 1B        		.uleb128 0x1b
 4120 025d 0E        		.uleb128 0xe
 4121 025e 55        		.uleb128 0x55
 4122 025f 17        		.uleb128 0x17
 4123 0260 11        		.uleb128 0x11
 4124 0261 01        		.uleb128 0x1
 4125 0262 10        		.uleb128 0x10
 4126 0263 17        		.uleb128 0x17
 4127 0264 00        		.byte	0
 4128 0265 00        		.byte	0
 4129 0266 27        		.uleb128 0x27
 4130 0267 24        		.uleb128 0x24
 4131 0268 00        		.byte	0
 4132 0269 0B        		.uleb128 0xb
 4133 026a 0B        		.uleb128 0xb
 4134 026b 3E        		.uleb128 0x3e
 4135 026c 0B        		.uleb128 0xb
 4136 026d 03        		.uleb128 0x3
 4137 026e 08        		.uleb128 0x8


 4138 026f 00        		.byte	0
 4139 0270 00        		.byte	0
 4140 0271 28        		.uleb128 0x28
 4141 0272 17        		.uleb128 0x17
 4142 0273 01        		.byte	0x1
 4143 0274 0B        		.uleb128 0xb
 4144 0275 0B        		.uleb128 0xb
 4145 0276 3A        		.uleb128 0x3a
 4146 0277 0B        		.uleb128 0xb
 4147 0278 3B        		.uleb128 0x3b
 4148 0279 0B        		.uleb128 0xb
 4149 027a 39        		.uleb128 0x39
 4150 027b 0B        		.uleb128 0xb
 4151 027c 01        		.uleb128 0x1
 4152 027d 13        		.uleb128 0x13
 4153 027e 00        		.byte	0
 4154 027f 00        		.byte	0
 4155 0280 29        		.uleb128 0x29
 4156 0281 13        		.uleb128 0x13
 4157 0282 01        		.byte	0x1
 4158 0283 0B        		.uleb128 0xb
 4159 0284 0B        		.uleb128 0xb
 4160 0285 3A        		.uleb128 0x3a
 4161 0286 0B        		.uleb128 0xb
 4162 0287 3B        		.uleb128 0x3b
 4163 0288 0B        		.uleb128 0xb
 4164 0289 39        		.uleb128 0x39
 4165 028a 0B        		.uleb128 0xb
 4166 028b 01        		.uleb128 0x1
 4167 028c 13        		.uleb128 0x13
 4168 028d 00        		.byte	0
 4169 028e 00        		.byte	0
 4170 028f 2A        		.uleb128 0x2a
 4171 0290 0F        		.uleb128 0xf
 4172 0291 00        		.byte	0
 4173 0292 0B        		.uleb128 0xb
 4174 0293 0B        		.uleb128 0xb
 4175 0294 00        		.byte	0
 4176 0295 00        		.byte	0
 4177 0296 2B        		.uleb128 0x2b
 4178 0297 13        		.uleb128 0x13
 4179 0298 01        		.byte	0x1
 4180 0299 03        		.uleb128 0x3
 4181 029a 0E        		.uleb128 0xe
 4182 029b 0B        		.uleb128 0xb
 4183 029c 05        		.uleb128 0x5
 4184 029d 3A        		.uleb128 0x3a
 4185 029e 0B        		.uleb128 0xb
 4186 029f 3B        		.uleb128 0x3b
 4187 02a0 05        		.uleb128 0x5
 4188 02a1 39        		.uleb128 0x39
 4189 02a2 0B        		.uleb128 0xb
 4190 02a3 01        		.uleb128 0x1
 4191 02a4 13        		.uleb128 0x13
 4192 02a5 00        		.byte	0
 4193 02a6 00        		.byte	0
 4194 02a7 2C        		.uleb128 0x2c


 4195 02a8 0D        		.uleb128 0xd
 4196 02a9 00        		.byte	0
 4197 02aa 03        		.uleb128 0x3
 4198 02ab 0E        		.uleb128 0xe
 4199 02ac 3A        		.uleb128 0x3a
 4200 02ad 0B        		.uleb128 0xb
 4201 02ae 3B        		.uleb128 0x3b
 4202 02af 05        		.uleb128 0x5
 4203 02b0 39        		.uleb128 0x39
 4204 02b1 0B        		.uleb128 0xb
 4205 02b2 49        		.uleb128 0x49
 4206 02b3 13        		.uleb128 0x13
 4207 02b4 38        		.uleb128 0x38
 4208 02b5 05        		.uleb128 0x5
 4209 02b6 00        		.byte	0
 4210 02b7 00        		.byte	0
 4211 02b8 2D        		.uleb128 0x2d
 4212 02b9 13        		.uleb128 0x13
 4213 02ba 01        		.byte	0x1
 4214 02bb 03        		.uleb128 0x3
 4215 02bc 0E        		.uleb128 0xe
 4216 02bd 0B        		.uleb128 0xb
 4217 02be 0B        		.uleb128 0xb
 4218 02bf 3A        		.uleb128 0x3a
 4219 02c0 0B        		.uleb128 0xb
 4220 02c1 3B        		.uleb128 0x3b
 4221 02c2 05        		.uleb128 0x5
 4222 02c3 39        		.uleb128 0x39
 4223 02c4 0B        		.uleb128 0xb
 4224 02c5 01        		.uleb128 0x1
 4225 02c6 13        		.uleb128 0x13
 4226 02c7 00        		.byte	0
 4227 02c8 00        		.byte	0
 4228 02c9 2E        		.uleb128 0x2e
 4229 02ca 13        		.uleb128 0x13
 4230 02cb 01        		.byte	0x1
 4231 02cc 0B        		.uleb128 0xb
 4232 02cd 0B        		.uleb128 0xb
 4233 02ce 3A        		.uleb128 0x3a
 4234 02cf 0B        		.uleb128 0xb
 4235 02d0 3B        		.uleb128 0x3b
 4236 02d1 05        		.uleb128 0x5
 4237 02d2 39        		.uleb128 0x39
 4238 02d3 0B        		.uleb128 0xb
 4239 02d4 01        		.uleb128 0x1
 4240 02d5 13        		.uleb128 0x13
 4241 02d6 00        		.byte	0
 4242 02d7 00        		.byte	0
 4243 02d8 2F        		.uleb128 0x2f
 4244 02d9 17        		.uleb128 0x17
 4245 02da 01        		.byte	0x1
 4246 02db 0B        		.uleb128 0xb
 4247 02dc 0B        		.uleb128 0xb
 4248 02dd 3A        		.uleb128 0x3a
 4249 02de 0B        		.uleb128 0xb
 4250 02df 3B        		.uleb128 0x3b
 4251 02e0 05        		.uleb128 0x5


 4252 02e1 39        		.uleb128 0x39
 4253 02e2 0B        		.uleb128 0xb
 4254 02e3 01        		.uleb128 0x1
 4255 02e4 13        		.uleb128 0x13
 4256 02e5 00        		.byte	0
 4257 02e6 00        		.byte	0
 4258 02e7 30        		.uleb128 0x30
 4259 02e8 0D        		.uleb128 0xd
 4260 02e9 00        		.byte	0
 4261 02ea 03        		.uleb128 0x3
 4262 02eb 0E        		.uleb128 0xe
 4263 02ec 3A        		.uleb128 0x3a
 4264 02ed 0B        		.uleb128 0xb
 4265 02ee 3B        		.uleb128 0x3b
 4266 02ef 05        		.uleb128 0x5
 4267 02f0 39        		.uleb128 0x39
 4268 02f1 0B        		.uleb128 0xb
 4269 02f2 49        		.uleb128 0x49
 4270 02f3 13        		.uleb128 0x13
 4271 02f4 00        		.byte	0
 4272 02f5 00        		.byte	0
 4273 02f6 31        		.uleb128 0x31
 4274 02f7 13        		.uleb128 0x13
 4275 02f8 00        		.byte	0
 4276 02f9 03        		.uleb128 0x3
 4277 02fa 0E        		.uleb128 0xe
 4278 02fb 3C        		.uleb128 0x3c
 4279 02fc 19        		.uleb128 0x19
 4280 02fd 00        		.byte	0
 4281 02fe 00        		.byte	0
 4282 02ff 32        		.uleb128 0x32
 4283 0300 15        		.uleb128 0x15
 4284 0301 01        		.byte	0x1
 4285 0302 01        		.uleb128 0x1
 4286 0303 13        		.uleb128 0x13
 4287 0304 00        		.byte	0
 4288 0305 00        		.byte	0
 4289 0306 33        		.uleb128 0x33
 4290 0307 2E        		.uleb128 0x2e
 4291 0308 01        		.byte	0x1
 4292 0309 3F        		.uleb128 0x3f
 4293 030a 19        		.uleb128 0x19
 4294 030b 03        		.uleb128 0x3
 4295 030c 0E        		.uleb128 0xe
 4296 030d 3A        		.uleb128 0x3a
 4297 030e 0B        		.uleb128 0xb
 4298 030f 3B        		.uleb128 0x3b
 4299 0310 0B        		.uleb128 0xb
 4300 0311 39        		.uleb128 0x39
 4301 0312 0B        		.uleb128 0xb
 4302 0313 27        		.uleb128 0x27
 4303 0314 19        		.uleb128 0x19
 4304 0315 8701      		.uleb128 0x87
 4305 0317 19        		.uleb128 0x19
 4306 0318 3C        		.uleb128 0x3c
 4307 0319 19        		.uleb128 0x19
 4308 031a 01        		.uleb128 0x1


 4309 031b 13        		.uleb128 0x13
 4310 031c 00        		.byte	0
 4311 031d 00        		.byte	0
 4312 031e 34        		.uleb128 0x34
 4313 031f 2E        		.uleb128 0x2e
 4314 0320 01        		.byte	0x1
 4315 0321 3F        		.uleb128 0x3f
 4316 0322 19        		.uleb128 0x19
 4317 0323 03        		.uleb128 0x3
 4318 0324 0E        		.uleb128 0xe
 4319 0325 3A        		.uleb128 0x3a
 4320 0326 0B        		.uleb128 0xb
 4321 0327 3B        		.uleb128 0x3b
 4322 0328 05        		.uleb128 0x5
 4323 0329 39        		.uleb128 0x39
 4324 032a 0B        		.uleb128 0xb
 4325 032b 27        		.uleb128 0x27
 4326 032c 19        		.uleb128 0x19
 4327 032d 49        		.uleb128 0x49
 4328 032e 13        		.uleb128 0x13
 4329 032f 3C        		.uleb128 0x3c
 4330 0330 19        		.uleb128 0x19
 4331 0331 01        		.uleb128 0x1
 4332 0332 13        		.uleb128 0x13
 4333 0333 00        		.byte	0
 4334 0334 00        		.byte	0
 4335 0335 35        		.uleb128 0x35
 4336 0336 2E        		.uleb128 0x2e
 4337 0337 01        		.byte	0x1
 4338 0338 3F        		.uleb128 0x3f
 4339 0339 19        		.uleb128 0x19
 4340 033a 03        		.uleb128 0x3
 4341 033b 0E        		.uleb128 0xe
 4342 033c 3A        		.uleb128 0x3a
 4343 033d 0B        		.uleb128 0xb
 4344 033e 3B        		.uleb128 0x3b
 4345 033f 05        		.uleb128 0x5
 4346 0340 39        		.uleb128 0x39
 4347 0341 0B        		.uleb128 0xb
 4348 0342 49        		.uleb128 0x49
 4349 0343 13        		.uleb128 0x13
 4350 0344 11        		.uleb128 0x11
 4351 0345 01        		.uleb128 0x1
 4352 0346 12        		.uleb128 0x12
 4353 0347 06        		.uleb128 0x6
 4354 0348 40        		.uleb128 0x40
 4355 0349 18        		.uleb128 0x18
 4356 034a 7A        		.uleb128 0x7a
 4357 034b 19        		.uleb128 0x19
 4358 034c 01        		.uleb128 0x1
 4359 034d 13        		.uleb128 0x13
 4360 034e 00        		.byte	0
 4361 034f 00        		.byte	0
 4362 0350 36        		.uleb128 0x36
 4363 0351 34        		.uleb128 0x34
 4364 0352 00        		.byte	0
 4365 0353 03        		.uleb128 0x3


 4366 0354 08        		.uleb128 0x8
 4367 0355 3A        		.uleb128 0x3a
 4368 0356 0B        		.uleb128 0xb
 4369 0357 3B        		.uleb128 0x3b
 4370 0358 05        		.uleb128 0x5
 4371 0359 39        		.uleb128 0x39
 4372 035a 0B        		.uleb128 0xb
 4373 035b 49        		.uleb128 0x49
 4374 035c 13        		.uleb128 0x13
 4375 035d 00        		.byte	0
 4376 035e 00        		.byte	0
 4377 035f 37        		.uleb128 0x37
 4378 0360 05        		.uleb128 0x5
 4379 0361 00        		.byte	0
 4380 0362 03        		.uleb128 0x3
 4381 0363 0E        		.uleb128 0xe
 4382 0364 3A        		.uleb128 0x3a
 4383 0365 0B        		.uleb128 0xb
 4384 0366 3B        		.uleb128 0x3b
 4385 0367 0B        		.uleb128 0xb
 4386 0368 39        		.uleb128 0x39
 4387 0369 0B        		.uleb128 0xb
 4388 036a 49        		.uleb128 0x49
 4389 036b 13        		.uleb128 0x13
 4390 036c 02        		.uleb128 0x2
 4391 036d 17        		.uleb128 0x17
 4392 036e B742      		.uleb128 0x2137
 4393 0370 17        		.uleb128 0x17
 4394 0371 00        		.byte	0
 4395 0372 00        		.byte	0
 4396 0373 38        		.uleb128 0x38
 4397 0374 34        		.uleb128 0x34
 4398 0375 00        		.byte	0
 4399 0376 03        		.uleb128 0x3
 4400 0377 0E        		.uleb128 0xe
 4401 0378 3A        		.uleb128 0x3a
 4402 0379 0B        		.uleb128 0xb
 4403 037a 3B        		.uleb128 0x3b
 4404 037b 0B        		.uleb128 0xb
 4405 037c 39        		.uleb128 0x39
 4406 037d 0B        		.uleb128 0xb
 4407 037e 49        		.uleb128 0x49
 4408 037f 13        		.uleb128 0x13
 4409 0380 02        		.uleb128 0x2
 4410 0381 18        		.uleb128 0x18
 4411 0382 00        		.byte	0
 4412 0383 00        		.byte	0
 4413 0384 39        		.uleb128 0x39
 4414 0385 0B        		.uleb128 0xb
 4415 0386 01        		.byte	0x1
 4416 0387 11        		.uleb128 0x11
 4417 0388 01        		.uleb128 0x1
 4418 0389 12        		.uleb128 0x12
 4419 038a 06        		.uleb128 0x6
 4420 038b 01        		.uleb128 0x1
 4421 038c 13        		.uleb128 0x13
 4422 038d 00        		.byte	0


 4423 038e 00        		.byte	0
 4424 038f 3A        		.uleb128 0x3a
 4425 0390 34        		.uleb128 0x34
 4426 0391 00        		.byte	0
 4427 0392 03        		.uleb128 0x3
 4428 0393 08        		.uleb128 0x8
 4429 0394 3A        		.uleb128 0x3a
 4430 0395 0B        		.uleb128 0xb
 4431 0396 3B        		.uleb128 0x3b
 4432 0397 0B        		.uleb128 0xb
 4433 0398 39        		.uleb128 0x39
 4434 0399 0B        		.uleb128 0xb
 4435 039a 49        		.uleb128 0x49
 4436 039b 13        		.uleb128 0x13
 4437 039c 02        		.uleb128 0x2
 4438 039d 18        		.uleb128 0x18
 4439 039e 00        		.byte	0
 4440 039f 00        		.byte	0
 4441 03a0 3B        		.uleb128 0x3b
 4442 03a1 2E        		.uleb128 0x2e
 4443 03a2 01        		.byte	0x1
 4444 03a3 3F        		.uleb128 0x3f
 4445 03a4 19        		.uleb128 0x19
 4446 03a5 03        		.uleb128 0x3
 4447 03a6 0E        		.uleb128 0xe
 4448 03a7 3A        		.uleb128 0x3a
 4449 03a8 0B        		.uleb128 0xb
 4450 03a9 3B        		.uleb128 0x3b
 4451 03aa 0B        		.uleb128 0xb
 4452 03ab 39        		.uleb128 0x39
 4453 03ac 0B        		.uleb128 0xb
 4454 03ad 11        		.uleb128 0x11
 4455 03ae 01        		.uleb128 0x1
 4456 03af 12        		.uleb128 0x12
 4457 03b0 06        		.uleb128 0x6
 4458 03b1 40        		.uleb128 0x40
 4459 03b2 18        		.uleb128 0x18
 4460 03b3 7A        		.uleb128 0x7a
 4461 03b4 19        		.uleb128 0x19
 4462 03b5 01        		.uleb128 0x1
 4463 03b6 13        		.uleb128 0x13
 4464 03b7 00        		.byte	0
 4465 03b8 00        		.byte	0
 4466 03b9 3C        		.uleb128 0x3c
 4467 03ba 34        		.uleb128 0x34
 4468 03bb 00        		.byte	0
 4469 03bc 03        		.uleb128 0x3
 4470 03bd 0E        		.uleb128 0xe
 4471 03be 3A        		.uleb128 0x3a
 4472 03bf 0B        		.uleb128 0xb
 4473 03c0 3B        		.uleb128 0x3b
 4474 03c1 0B        		.uleb128 0xb
 4475 03c2 39        		.uleb128 0x39
 4476 03c3 0B        		.uleb128 0xb
 4477 03c4 49        		.uleb128 0x49
 4478 03c5 13        		.uleb128 0x13
 4479 03c6 1C        		.uleb128 0x1c


 4480 03c7 0B        		.uleb128 0xb
 4481 03c8 00        		.byte	0
 4482 03c9 00        		.byte	0
 4483 03ca 3D        		.uleb128 0x3d
 4484 03cb 2E        		.uleb128 0x2e
 4485 03cc 00        		.byte	0
 4486 03cd 3F        		.uleb128 0x3f
 4487 03ce 19        		.uleb128 0x19
 4488 03cf 03        		.uleb128 0x3
 4489 03d0 0E        		.uleb128 0xe
 4490 03d1 3A        		.uleb128 0x3a
 4491 03d2 0B        		.uleb128 0xb
 4492 03d3 3B        		.uleb128 0x3b
 4493 03d4 0B        		.uleb128 0xb
 4494 03d5 39        		.uleb128 0x39
 4495 03d6 0B        		.uleb128 0xb
 4496 03d7 20        		.uleb128 0x20
 4497 03d8 0B        		.uleb128 0xb
 4498 03d9 00        		.byte	0
 4499 03da 00        		.byte	0
 4500 03db 3E        		.uleb128 0x3e
 4501 03dc 1D        		.uleb128 0x1d
 4502 03dd 01        		.byte	0x1
 4503 03de 31        		.uleb128 0x31
 4504 03df 13        		.uleb128 0x13
 4505 03e0 52        		.uleb128 0x52
 4506 03e1 01        		.uleb128 0x1
 4507 03e2 B842      		.uleb128 0x2138
 4508 03e4 0B        		.uleb128 0xb
 4509 03e5 11        		.uleb128 0x11
 4510 03e6 01        		.uleb128 0x1
 4511 03e7 12        		.uleb128 0x12
 4512 03e8 06        		.uleb128 0x6
 4513 03e9 58        		.uleb128 0x58
 4514 03ea 0B        		.uleb128 0xb
 4515 03eb 59        		.uleb128 0x59
 4516 03ec 0B        		.uleb128 0xb
 4517 03ed 57        		.uleb128 0x57
 4518 03ee 0B        		.uleb128 0xb
 4519 03ef 00        		.byte	0
 4520 03f0 00        		.byte	0
 4521 03f1 00        		.byte	0
 4522               		.section	.debug_loclists,"",@progbits
 4523 0000 0000 02D0 		.long	.Ldebug_loc3-.Ldebug_loc2
 4524               	.Ldebug_loc2:
 4525 0004 0005      		.word	0x5
 4526 0006 04        		.byte	0x4
 4527 0007 00        		.byte	0
 4528 0008 0000 0000 		.long	0
 4529               	.Ldebug_loc0:
 4530               	.LVUS29:
 4531 000c 00        		.uleb128 0
 4532 000d 00        		.uleb128 .LVU243
 4533 000e 00        		.uleb128 .LVU243
 4534 000f 00        		.uleb128 .LVU257
 4535 0010 00        		.uleb128 .LVU257
 4536 0011 00        		.uleb128 .LVU258


 4537 0012 00        		.uleb128 .LVU258
 4538 0013 00        		.uleb128 .LVU270
 4539 0014 00        		.uleb128 .LVU270
 4540 0015 00        		.uleb128 .LVU271
 4541 0016 00        		.uleb128 .LVU271
 4542 0017 00        		.uleb128 0
 4543               	.LLST29:
 4544 0018 06        		.byte	0x6
 4545 0019 0000 0000 		.long	.LVL97
 4546 001d 04        		.byte	0x4
 4547 001e 00        		.uleb128 .LVL97-.LVL97
 4548 001f 04        		.uleb128 .LVL98-.LVL97
 4549 0020 02        		.uleb128 0x2
 4550 0021 91        		.byte	0x91
 4551 0022 00        		.sleb128 0
 4552 0023 04        		.byte	0x4
 4553 0024 04        		.uleb128 .LVL98-.LVL97
 4554 0025 26        		.uleb128 .LVL102-.LVL97
 4555 0026 02        		.uleb128 0x2
 4556 0027 7E        		.byte	0x7e
 4557 0028 08        		.sleb128 8
 4558 0029 04        		.byte	0x4
 4559 002a 26        		.uleb128 .LVL102-.LVL97
 4560 002b 28        		.uleb128 .LVL103-.LVL97
 4561 002c 02        		.uleb128 0x2
 4562 002d 7F        		.byte	0x7f
 4563 002e 04        		.sleb128 4
 4564 002f 04        		.byte	0x4
 4565 0030 28        		.uleb128 .LVL103-.LVL97
 4566 0031 66        		.uleb128 .LVL108-.LVL97
 4567 0032 02        		.uleb128 0x2
 4568 0033 7E        		.byte	0x7e
 4569 0034 08        		.sleb128 8
 4570 0035 04        		.byte	0x4
 4571 0036 66        		.uleb128 .LVL108-.LVL97
 4572 0037 68        		.uleb128 .LVL109-.LVL97
 4573 0038 02        		.uleb128 0x2
 4574 0039 7F        		.byte	0x7f
 4575 003a 04        		.sleb128 4
 4576 003b 04        		.byte	0x4
 4577 003c 68        		.uleb128 .LVL109-.LVL97
 4578 003d 8201      		.uleb128 .LFE10-.LVL97
 4579 003f 02        		.uleb128 0x2
 4580 0040 7E        		.byte	0x7e
 4581 0041 08        		.sleb128 8
 4582 0042 00        		.byte	0
 4583               	.LVUS30:
 4584 0043 00        		.uleb128 .LVU249
 4585 0044 00        		.uleb128 .LVU256
 4586 0045 00        		.uleb128 .LVU258
 4587 0046 00        		.uleb128 .LVU269
 4588 0047 00        		.uleb128 .LVU275
 4589 0048 00        		.uleb128 0
 4590               	.LLST30:
 4591 0049 06        		.byte	0x6
 4592 004a 0000 0000 		.long	.LVL99
 4593 004e 04        		.byte	0x4


 4594 004f 00        		.uleb128 .LVL99-.LVL99
 4595 0050 12        		.uleb128 .LVL101-.LVL99
 4596 0051 01        		.uleb128 0x1
 4597 0052 52        		.byte	0x52
 4598 0053 04        		.byte	0x4
 4599 0054 16        		.uleb128 .LVL103-.LVL99
 4600 0055 52        		.uleb128 .LVL107-.LVL99
 4601 0056 01        		.uleb128 0x1
 4602 0057 52        		.byte	0x52
 4603 0058 04        		.byte	0x4
 4604 0059 60        		.uleb128 .LVL110-.LVL99
 4605 005a 70        		.uleb128 .LFE10-.LVL99
 4606 005b 01        		.uleb128 0x1
 4607 005c 52        		.byte	0x52
 4608 005d 00        		.byte	0
 4609               	.LVUS31:
 4610 005e 03        		.uleb128 .LVU252
 4611 005f 00        		.uleb128 .LVU267
 4612 0060 02        		.uleb128 .LVU277
 4613 0061 00        		.uleb128 0
 4614               	.LLST31:
 4615 0062 06        		.byte	0x6
 4616 0063 0000 0000 		.long	.LVL99
 4617 0067 04        		.byte	0x4
 4618 0068 00        		.uleb128 .LVL99-.LVL99
 4619 0069 4E        		.uleb128 .LVL106-.LVL99
 4620 006a 02        		.uleb128 0x2
 4621 006b 30        		.byte	0x30
 4622 006c 9F        		.byte	0x9f
 4623 006d 04        		.byte	0x4
 4624 006e 60        		.uleb128 .LVL110-.LVL99
 4625 006f 70        		.uleb128 .LFE10-.LVL99
 4626 0070 02        		.uleb128 0x2
 4627 0071 30        		.byte	0x30
 4628 0072 9F        		.byte	0x9f
 4629 0073 00        		.byte	0
 4630               	.LVUS18:
 4631 0074 00        		.uleb128 .LVU200
 4632 0075 00        		.uleb128 .LVU218
 4633 0076 00        		.uleb128 .LVU223
 4634 0077 00        		.uleb128 .LVU240
 4635               	.LLST18:
 4636 0078 06        		.byte	0x6
 4637 0079 0000 0000 		.long	.LVL79
 4638 007d 04        		.byte	0x4
 4639 007e 00        		.uleb128 .LVL79-.LVL79
 4640 007f 9201      		.uleb128 .LVL87-.LVL79
 4641 0081 01        		.uleb128 0x1
 4642 0082 52        		.byte	0x52
 4643 0083 04        		.byte	0x4
 4644 0084 A001      		.uleb128 .LVL88-.LVL79
 4645 0086 B202      		.uleb128 .LVL96-.LVL79
 4646 0088 01        		.uleb128 0x1
 4647 0089 52        		.byte	0x52
 4648 008a 00        		.byte	0
 4649               	.LVUS20:
 4650 008b 01        		.uleb128 .LVU203


 4651 008c 00        		.uleb128 .LVU209
 4652 008d 01        		.uleb128 .LVU225
 4653 008e 00        		.uleb128 .LVU231
 4654               	.LLST20:
 4655 008f 06        		.byte	0x6
 4656 0090 0000 0000 		.long	.LVL80
 4657 0094 04        		.byte	0x4
 4658 0095 00        		.uleb128 .LVL80-.LVL80
 4659 0096 3C        		.uleb128 .LVL82-.LVL80
 4660 0097 01        		.uleb128 0x1
 4661 0098 52        		.byte	0x52
 4662 0099 04        		.byte	0x4
 4663 009a A001      		.uleb128 .LVL89-.LVL80
 4664 009c DC01      		.uleb128 .LVL91-.LVL80
 4665 009e 01        		.uleb128 0x1
 4666 009f 52        		.byte	0x52
 4667 00a0 00        		.byte	0
 4668               	.LVUS22:
 4669 00a1 03        		.uleb128 .LVU205
 4670 00a2 00        		.uleb128 .LVU207
 4671 00a3 03        		.uleb128 .LVU227
 4672 00a4 00        		.uleb128 .LVU229
 4673               	.LLST22:
 4674 00a5 06        		.byte	0x6
 4675 00a6 0000 0000 		.long	.LVL80
 4676 00aa 04        		.byte	0x4
 4677 00ab 00        		.uleb128 .LVL80-.LVL80
 4678 00ac 1B        		.uleb128 .LVL81-1-.LVL80
 4679 00ad 05        		.uleb128 0x5
 4680 00ae 03        		.byte	0x3
 4681 00af 0000 0000 		.long	clock_pos_y
 4682 00b3 04        		.byte	0x4
 4683 00b4 A001      		.uleb128 .LVL89-.LVL80
 4684 00b6 BB01      		.uleb128 .LVL90-1-.LVL80
 4685 00b8 05        		.uleb128 0x5
 4686 00b9 03        		.byte	0x3
 4687 00ba 0000 0000 		.long	clock_pos_y
 4688 00be 00        		.byte	0
 4689               	.LVUS23:
 4690 00bf 03        		.uleb128 .LVU205
 4691 00c0 00        		.uleb128 .LVU207
 4692 00c1 03        		.uleb128 .LVU227
 4693 00c2 00        		.uleb128 .LVU229
 4694               	.LLST23:
 4695 00c3 06        		.byte	0x6
 4696 00c4 0000 0000 		.long	.LVL80
 4697 00c8 04        		.byte	0x4
 4698 00c9 00        		.uleb128 .LVL80-.LVL80
 4699 00ca 1B        		.uleb128 .LVL81-1-.LVL80
 4700 00cb 05        		.uleb128 0x5
 4701 00cc 03        		.byte	0x3
 4702 00cd 0000 0000 		.long	clock_pos_x
 4703 00d1 04        		.byte	0x4
 4704 00d2 A001      		.uleb128 .LVL89-.LVL80
 4705 00d4 BB01      		.uleb128 .LVL90-1-.LVL80
 4706 00d6 05        		.uleb128 0x5
 4707 00d7 03        		.byte	0x3


 4708 00d8 0000 0000 		.long	clock_pos_x
 4709 00dc 00        		.byte	0
 4710               	.LVUS24:
 4711 00dd 03        		.uleb128 .LVU205
 4712 00de 00        		.uleb128 .LVU207
 4713 00df 03        		.uleb128 .LVU227
 4714 00e0 00        		.uleb128 .LVU229
 4715               	.LLST24:
 4716 00e1 06        		.byte	0x6
 4717 00e2 0000 0000 		.long	.LVL80
 4718 00e6 04        		.byte	0x4
 4719 00e7 00        		.uleb128 .LVL80-.LVL80
 4720 00e8 1C        		.uleb128 .LVL81-.LVL80
 4721 00e9 01        		.uleb128 0x1
 4722 00ea 52        		.byte	0x52
 4723 00eb 04        		.byte	0x4
 4724 00ec A001      		.uleb128 .LVL89-.LVL80
 4725 00ee BC01      		.uleb128 .LVL90-.LVL80
 4726 00f0 01        		.uleb128 0x1
 4727 00f1 52        		.byte	0x52
 4728 00f2 00        		.byte	0
 4729               	.LVUS26:
 4730 00f3 01        		.uleb128 .LVU212
 4731 00f4 00        		.uleb128 .LVU215
 4732 00f5 01        		.uleb128 .LVU234
 4733 00f6 00        		.uleb128 .LVU237
 4734               	.LLST26:
 4735 00f7 06        		.byte	0x6
 4736 00f8 0000 0000 		.long	.LVL83
 4737 00fc 04        		.byte	0x4
 4738 00fd 00        		.uleb128 .LVL83-.LVL83
 4739 00fe 19        		.uleb128 .LVL85-1-.LVL83
 4740 00ff 05        		.uleb128 0x5
 4741 0100 03        		.byte	0x3
 4742 0101 0000 0000 		.long	chatlog_y
 4743 0105 04        		.byte	0x4
 4744 0106 A001      		.uleb128 .LVL92-.LVL83
 4745 0108 B901      		.uleb128 .LVL94-1-.LVL83
 4746 010a 05        		.uleb128 0x5
 4747 010b 03        		.byte	0x3
 4748 010c 0000 0000 		.long	chatlog_y
 4749 0110 00        		.byte	0
 4750               	.LVUS27:
 4751 0111 01        		.uleb128 .LVU212
 4752 0112 00        		.uleb128 .LVU214
 4753 0113 00        		.uleb128 .LVU214
 4754 0114 00        		.uleb128 .LVU215
 4755 0115 01        		.uleb128 .LVU234
 4756 0116 00        		.uleb128 .LVU236
 4757 0117 00        		.uleb128 .LVU236
 4758 0118 00        		.uleb128 .LVU237
 4759               	.LLST27:
 4760 0119 06        		.byte	0x6
 4761 011a 0000 0000 		.long	.LVL83
 4762 011e 04        		.byte	0x4
 4763 011f 00        		.uleb128 .LVL83-.LVL83
 4764 0120 0E        		.uleb128 .LVL84-.LVL83


 4765 0121 09        		.uleb128 0x9
 4766 0122 03        		.byte	0x3
 4767 0123 0000 0000 		.long	chatlog_x
 4768 0127 06        		.byte	0x6
 4769 0128 23        		.byte	0x23
 4770 0129 02        		.uleb128 0x2
 4771 012a 9F        		.byte	0x9f
 4772 012b 04        		.byte	0x4
 4773 012c 0E        		.uleb128 .LVL84-.LVL83
 4774 012d 19        		.uleb128 .LVL85-1-.LVL83
 4775 012e 01        		.uleb128 0x1
 4776 012f 50        		.byte	0x50
 4777 0130 04        		.byte	0x4
 4778 0131 A001      		.uleb128 .LVL92-.LVL83
 4779 0133 AE01      		.uleb128 .LVL93-.LVL83
 4780 0135 09        		.uleb128 0x9
 4781 0136 03        		.byte	0x3
 4782 0137 0000 0000 		.long	chatlog_x
 4783 013b 06        		.byte	0x6
 4784 013c 23        		.byte	0x23
 4785 013d 02        		.uleb128 0x2
 4786 013e 9F        		.byte	0x9f
 4787 013f 04        		.byte	0x4
 4788 0140 AE01      		.uleb128 .LVL93-.LVL83
 4789 0142 B901      		.uleb128 .LVL94-1-.LVL83
 4790 0144 01        		.uleb128 0x1
 4791 0145 50        		.byte	0x50
 4792 0146 00        		.byte	0
 4793               	.LVUS28:
 4794 0147 01        		.uleb128 .LVU212
 4795 0148 00        		.uleb128 .LVU215
 4796 0149 01        		.uleb128 .LVU234
 4797 014a 00        		.uleb128 .LVU237
 4798               	.LLST28:
 4799 014b 06        		.byte	0x6
 4800 014c 0000 0000 		.long	.LVL83
 4801 0150 04        		.byte	0x4
 4802 0151 00        		.uleb128 .LVL83-.LVL83
 4803 0152 1A        		.uleb128 .LVL85-.LVL83
 4804 0153 01        		.uleb128 0x1
 4805 0154 52        		.byte	0x52
 4806 0155 04        		.byte	0x4
 4807 0156 A001      		.uleb128 .LVL92-.LVL83
 4808 0158 BA01      		.uleb128 .LVL94-.LVL83
 4809 015a 01        		.uleb128 0x1
 4810 015b 52        		.byte	0x52
 4811 015c 00        		.byte	0
 4812               	.LVUS6:
 4813 015d 00        		.uleb128 .LVU93
 4814 015e 00        		.uleb128 .LVU126
 4815 015f 00        		.uleb128 .LVU131
 4816 0160 00        		.uleb128 .LVU163
 4817               	.LLST6:
 4818 0161 06        		.byte	0x6
 4819 0162 0000 0000 		.long	.LVL34
 4820 0166 04        		.byte	0x4
 4821 0167 00        		.uleb128 .LVL34-.LVL34


 4822 0168 F202      		.uleb128 .LVL50-.LVL34
 4823 016a 01        		.uleb128 0x1
 4824 016b 52        		.byte	0x52
 4825 016c 04        		.byte	0x4
 4826 016d 8203      		.uleb128 .LVL52-.LVL34
 4827 016f F405      		.uleb128 .LVL68-.LVL34
 4828 0171 01        		.uleb128 0x1
 4829 0172 52        		.byte	0x52
 4830 0173 00        		.byte	0
 4831               	.LVUS7:
 4832 0174 02        		.uleb128 .LVU95
 4833 0175 00        		.uleb128 .LVU127
 4834 0176 01        		.uleb128 .LVU132
 4835 0177 00        		.uleb128 0
 4836               	.LLST7:
 4837 0178 06        		.byte	0x6
 4838 0179 0000 0000 		.long	.LVL34
 4839 017d 04        		.byte	0x4
 4840 017e 00        		.uleb128 .LVL34-.LVL34
 4841 017f F602      		.uleb128 .LVL51-.LVL34
 4842 0181 03        		.uleb128 0x3
 4843 0182 08        		.byte	0x8
 4844 0183 2B        		.byte	0x2b
 4845 0184 9F        		.byte	0x9f
 4846 0185 04        		.byte	0x4
 4847 0186 8203      		.uleb128 .LVL52-.LVL34
 4848 0188 F805      		.uleb128 .LFE6-.LVL34
 4849 018a 03        		.uleb128 0x3
 4850 018b 08        		.byte	0x8
 4851 018c 2B        		.byte	0x2b
 4852 018d 9F        		.byte	0x9f
 4853 018e 00        		.byte	0
 4854               	.LVUS8:
 4855 018f 02        		.uleb128 .LVU95
 4856 0190 00        		.uleb128 .LVU127
 4857 0191 01        		.uleb128 .LVU132
 4858 0192 00        		.uleb128 0
 4859               	.LLST8:
 4860 0193 06        		.byte	0x6
 4861 0194 0000 0000 		.long	.LVL34
 4862 0198 04        		.byte	0x4
 4863 0199 00        		.uleb128 .LVL34-.LVL34
 4864 019a F602      		.uleb128 .LVL51-.LVL34
 4865 019c 03        		.uleb128 0x3
 4866 019d 08        		.byte	0x8
 4867 019e 84        		.byte	0x84
 4868 019f 9F        		.byte	0x9f
 4869 01a0 04        		.byte	0x4
 4870 01a1 8203      		.uleb128 .LVL52-.LVL34
 4871 01a3 F805      		.uleb128 .LFE6-.LVL34
 4872 01a5 03        		.uleb128 0x3
 4873 01a6 08        		.byte	0x8
 4874 01a7 84        		.byte	0x84
 4875 01a8 9F        		.byte	0x9f
 4876 01a9 00        		.byte	0
 4877               	.LVUS9:
 4878 01aa 01        		.uleb128 .LVU100


 4879 01ab 00        		.uleb128 .LVU127
 4880 01ac 01        		.uleb128 .LVU137
 4881 01ad 00        		.uleb128 0
 4882               	.LLST9:
 4883 01ae 06        		.byte	0x6
 4884 01af 0000 0000 		.long	.LVL38
 4885 01b3 04        		.byte	0x4
 4886 01b4 00        		.uleb128 .LVL38-.LVL38
 4887 01b5 9A02      		.uleb128 .LVL51-.LVL38
 4888 01b7 02        		.uleb128 0x2
 4889 01b8 33        		.byte	0x33
 4890 01b9 9F        		.byte	0x9f
 4891 01ba 04        		.byte	0x4
 4892 01bb 8203      		.uleb128 .LVL56-.LVL38
 4893 01bd 9C05      		.uleb128 .LFE6-.LVL38
 4894 01bf 02        		.uleb128 0x2
 4895 01c0 33        		.byte	0x33
 4896 01c1 9F        		.byte	0x9f
 4897 01c2 00        		.byte	0
 4898               	.LVUS10:
 4899 01c3 01        		.uleb128 .LVU104
 4900 01c4 00        		.uleb128 .LVU127
 4901 01c5 01        		.uleb128 .LVU141
 4902 01c6 00        		.uleb128 0
 4903               	.LLST10:
 4904 01c7 06        		.byte	0x6
 4905 01c8 0000 0000 		.long	.LVL41
 4906 01cc 04        		.byte	0x4
 4907 01cd 00        		.uleb128 .LVL41-.LVL41
 4908 01ce DC01      		.uleb128 .LVL51-.LVL41
 4909 01d0 02        		.uleb128 0x2
 4910 01d1 35        		.byte	0x35
 4911 01d2 9F        		.byte	0x9f
 4912 01d3 04        		.byte	0x4
 4913 01d4 8203      		.uleb128 .LVL59-.LVL41
 4914 01d6 DE04      		.uleb128 .LFE6-.LVL41
 4915 01d8 02        		.uleb128 0x2
 4916 01d9 35        		.byte	0x35
 4917 01da 9F        		.byte	0x9f
 4918 01db 00        		.byte	0
 4919               	.LVUS0:
 4920 01dc 02        		.uleb128 .LVU3
 4921 01dd 03        		.uleb128 .LVU10
 4922               	.LLST0:
 4923 01de 08        		.byte	0x8
 4924 01df 0000 0000 		.long	.LVL0
 4925 01e3 10        		.uleb128 .LVL2-.LVL0
 4926 01e4 02        		.uleb128 0x2
 4927 01e5 30        		.byte	0x30
 4928 01e6 9F        		.byte	0x9f
 4929 01e7 00        		.byte	0
 4930               	.LVUS2:
 4931 01e8 03        		.uleb128 .LVU4
 4932 01e9 03        		.uleb128 .LVU10
 4933 01ea 00        		.uleb128 .LVU20
 4934 01eb 00        		.uleb128 .LVU39
 4935 01ec 00        		.uleb128 .LVU46


 4936 01ed 00        		.uleb128 0
 4937               	.LLST2:
 4938 01ee 06        		.byte	0x6
 4939 01ef 0000 0000 		.long	.LVL0
 4940 01f3 04        		.byte	0x4
 4941 01f4 00        		.uleb128 .LVL0-.LVL0
 4942 01f5 10        		.uleb128 .LVL2-.LVL0
 4943 01f6 02        		.uleb128 0x2
 4944 01f7 30        		.byte	0x30
 4945 01f8 9F        		.byte	0x9f
 4946 01f9 04        		.byte	0x4
 4947 01fa 2A        		.uleb128 .LVL4-.LVL0
 4948 01fb 64        		.uleb128 .LVL11-.LVL0
 4949 01fc 01        		.uleb128 0x1
 4950 01fd 52        		.byte	0x52
 4951 01fe 04        		.byte	0x4
 4952 01ff 72        		.uleb128 .LVL14-.LVL0
 4953 0200 7A        		.uleb128 .LFE5-.LVL0
 4954 0201 01        		.uleb128 0x1
 4955 0202 52        		.byte	0x52
 4956 0203 00        		.byte	0
 4957               	.LVUS3:
 4958 0204 03        		.uleb128 .LVU4
 4959 0205 03        		.uleb128 .LVU10
 4960 0206 00        		.uleb128 .LVU16
 4961 0207 00        		.uleb128 .LVU39
 4962 0208 00        		.uleb128 .LVU43
 4963 0209 00        		.uleb128 0
 4964               	.LLST3:
 4965 020a 06        		.byte	0x6
 4966 020b 0000 0000 		.long	.LVL0
 4967 020f 04        		.byte	0x4
 4968 0210 00        		.uleb128 .LVL0-.LVL0
 4969 0211 10        		.uleb128 .LVL2-.LVL0
 4970 0212 02        		.uleb128 0x2
 4971 0213 30        		.byte	0x30
 4972 0214 9F        		.byte	0x9f
 4973 0215 04        		.byte	0x4
 4974 0216 22        		.uleb128 .LVL3-.LVL0
 4975 0217 64        		.uleb128 .LVL11-.LVL0
 4976 0218 01        		.uleb128 0x1
 4977 0219 5A        		.byte	0x5a
 4978 021a 04        		.byte	0x4
 4979 021b 6C        		.uleb128 .LVL12-.LVL0
 4980 021c 7A        		.uleb128 .LFE5-.LVL0
 4981 021d 01        		.uleb128 0x1
 4982 021e 5A        		.byte	0x5a
 4983 021f 00        		.byte	0
 4984               	.LVUS4:
 4985 0220 03        		.uleb128 .LVU4
 4986 0221 00        		.uleb128 .LVU16
 4987 0222 00        		.uleb128 .LVU16
 4988 0223 00        		.uleb128 .LVU22
 4989 0224 02        		.uleb128 .LVU30
 4990 0225 00        		.uleb128 0
 4991               	.LLST4:
 4992 0226 06        		.byte	0x6


 4993 0227 0000 0000 		.long	.LVL0
 4994 022b 04        		.byte	0x4
 4995 022c 00        		.uleb128 .LVL0-.LVL0
 4996 022d 22        		.uleb128 .LVL3-.LVL0
 4997 022e 02        		.uleb128 0x2
 4998 022f 30        		.byte	0x30
 4999 0230 9F        		.byte	0x9f
 5000 0231 04        		.byte	0x4
 5001 0232 22        		.uleb128 .LVL3-.LVL0
 5002 0233 2E        		.uleb128 .LVL5-.LVL0
 5003 0234 01        		.uleb128 0x1
 5004 0235 5B        		.byte	0x5b
 5005 0236 04        		.byte	0x4
 5006 0237 4A        		.uleb128 .LVL7-.LVL0
 5007 0238 7A        		.uleb128 .LFE5-.LVL0
 5008 0239 01        		.uleb128 0x1
 5009 023a 5B        		.byte	0x5b
 5010 023b 00        		.byte	0
 5011               	.LVUS5:
 5012 023c 03        		.uleb128 .LVU4
 5013 023d 01        		.uleb128 .LVU8
 5014 023e 01        		.uleb128 .LVU8
 5015 023f 00        		.uleb128 .LVU16
 5016 0240 02        		.uleb128 .LVU30
 5017 0241 00        		.uleb128 .LVU35
 5018 0242 00        		.uleb128 .LVU35
 5019 0243 00        		.uleb128 .LVU39
 5020 0244 00        		.uleb128 .LVU39
 5021 0245 00        		.uleb128 .LVU46
 5022 0246 00        		.uleb128 .LVU46
 5023 0247 00        		.uleb128 .LVU50
 5024 0248 00        		.uleb128 .LVU50
 5025 0249 00        		.uleb128 0
 5026               	.LLST5:
 5027 024a 06        		.byte	0x6
 5028 024b 0000 0000 		.long	.LVL0
 5029 024f 04        		.byte	0x4
 5030 0250 00        		.uleb128 .LVL0-.LVL0
 5031 0251 10        		.uleb128 .LVL2-.LVL0
 5032 0252 02        		.uleb128 0x2
 5033 0253 30        		.byte	0x30
 5034 0254 9F        		.byte	0x9f
 5035 0255 04        		.byte	0x4
 5036 0256 10        		.uleb128 .LVL2-.LVL0
 5037 0257 22        		.uleb128 .LVL3-.LVL0
 5038 0258 02        		.uleb128 0x2
 5039 0259 31        		.byte	0x31
 5040 025a 9F        		.byte	0x9f
 5041 025b 04        		.byte	0x4
 5042 025c 4A        		.uleb128 .LVL7-.LVL0
 5043 025d 58        		.uleb128 .LVL10-.LVL0
 5044 025e 01        		.uleb128 0x1
 5045 025f 5C        		.byte	0x5c
 5046 0260 04        		.byte	0x4
 5047 0261 58        		.uleb128 .LVL10-.LVL0
 5048 0262 64        		.uleb128 .LVL11-.LVL0
 5049 0263 01        		.uleb128 0x1


 5050 0264 50        		.byte	0x50
 5051 0265 04        		.byte	0x4
 5052 0266 64        		.uleb128 .LVL11-.LVL0
 5053 0267 72        		.uleb128 .LVL14-.LVL0
 5054 0268 01        		.uleb128 0x1
 5055 0269 5C        		.byte	0x5c
 5056 026a 04        		.byte	0x4
 5057 026b 72        		.uleb128 .LVL14-.LVL0
 5058 026c 78        		.uleb128 .LVL16-.LVL0
 5059 026d 01        		.uleb128 0x1
 5060 026e 50        		.byte	0x50
 5061 026f 04        		.byte	0x4
 5062 0270 78        		.uleb128 .LVL16-.LVL0
 5063 0271 7A        		.uleb128 .LFE5-.LVL0
 5064 0272 01        		.uleb128 0x1
 5065 0273 5C        		.byte	0x5c
 5066 0274 00        		.byte	0
 5067               	.LVUS11:
 5068 0275 01        		.uleb128 .LVU167
 5069 0276 00        		.uleb128 .LVU169
 5070               	.LLST11:
 5071 0277 08        		.byte	0x8
 5072 0278 0000 0000 		.long	.LVL70
 5073 027c 1B        		.uleb128 .LVL71-1-.LVL70
 5074 027d 05        		.uleb128 0x5
 5075 027e 03        		.byte	0x3
 5076 027f 0000 0000 		.long	clock_pos_y
 5077 0283 00        		.byte	0
 5078               	.LVUS12:
 5079 0284 01        		.uleb128 .LVU167
 5080 0285 00        		.uleb128 .LVU169
 5081               	.LLST12:
 5082 0286 08        		.byte	0x8
 5083 0287 0000 0000 		.long	.LVL70
 5084 028b 1B        		.uleb128 .LVL71-1-.LVL70
 5085 028c 05        		.uleb128 0x5
 5086 028d 03        		.byte	0x3
 5087 028e 0000 0000 		.long	clock_pos_x
 5088 0292 00        		.byte	0
 5089               	.LVUS13:
 5090 0293 01        		.uleb128 .LVU167
 5091 0294 00        		.uleb128 .LVU169
 5092               	.LLST13:
 5093 0295 08        		.byte	0x8
 5094 0296 0000 0000 		.long	.LVL70
 5095 029a 1C        		.uleb128 .LVL71-.LVL70
 5096 029b 01        		.uleb128 0x1
 5097 029c 52        		.byte	0x52
 5098 029d 00        		.byte	0
 5099               	.LVUS14:
 5100 029e 00        		.uleb128 .LVU177
 5101 029f 00        		.uleb128 .LVU192
 5102               	.LLST14:
 5103 02a0 08        		.byte	0x8
 5104 02a1 0000 0000 		.long	.LVL74
 5105 02a5 68        		.uleb128 .LVL77-.LVL74
 5106 02a6 02        		.uleb128 0x2


 5107 02a7 91        		.byte	0x91
 5108 02a8 70        		.sleb128 -16
 5109 02a9 00        		.byte	0
 5110               	.LVUS15:
 5111 02aa 02        		.uleb128 .LVU179
 5112 02ab 00        		.uleb128 .LVU181
 5113               	.LLST15:
 5114 02ac 08        		.byte	0x8
 5115 02ad 0000 0000 		.long	.LVL74
 5116 02b1 1D        		.uleb128 .LVL75-1-.LVL74
 5117 02b2 05        		.uleb128 0x5
 5118 02b3 03        		.byte	0x3
 5119 02b4 0000 0000 		.long	chatlog_y
 5120 02b8 00        		.byte	0
 5121               	.LVUS16:
 5122 02b9 02        		.uleb128 .LVU179
 5123 02ba 00        		.uleb128 .LVU181
 5124               	.LLST16:
 5125 02bb 08        		.byte	0x8
 5126 02bc 0000 0000 		.long	.LVL74
 5127 02c0 1D        		.uleb128 .LVL75-1-.LVL74
 5128 02c1 05        		.uleb128 0x5
 5129 02c2 03        		.byte	0x3
 5130 02c3 0000 0000 		.long	chatlog_x
 5131 02c7 00        		.byte	0
 5132               	.LVUS17:
 5133 02c8 02        		.uleb128 .LVU179
 5134 02c9 00        		.uleb128 .LVU181
 5135               	.LLST17:
 5136 02ca 08        		.byte	0x8
 5137 02cb 0000 0000 		.long	.LVL74
 5138 02cf 1E        		.uleb128 .LVL75-.LVL74
 5139 02d0 02        		.uleb128 0x2
 5140 02d1 91        		.byte	0x91
 5141 02d2 70        		.sleb128 -16
 5142 02d3 00        		.byte	0
 5143               	.Ldebug_loc3:
 5144               		.section	.debug_aranges,"",@progbits
 5145 0000 0000 0024 		.long	0x24
 5146 0004 0002      		.word	0x2
 5147 0006 0000 0000 		.long	.Ldebug_info0
 5148 000a 04        		.byte	0x4
 5149 000b 00        		.byte	0
 5150 000c 0000      		.word	0
 5151 000e 0000      		.word	0
 5152 0010 0000 0000 		.long	.Ltext0
 5153 0014 0000 07A6 		.long	.Letext0-.Ltext0
 5154 0018 0000 0000 		.long	.LFB13
 5155 001c 0000 003C 		.long	.LFE13-.LFB13
 5156 0020 0000 0000 		.long	0
 5157 0024 0000 0000 		.long	0
 5158               		.section	.debug_rnglists,"",@progbits
 5159               	.Ldebug_ranges0:
 5160 0000 0000 0040 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 5161               	.Ldebug_ranges2:
 5162 0004 0005      		.word	0x5
 5163 0006 04        		.byte	0x4


 5164 0007 00        		.byte	0
 5165 0008 0000 0000 		.long	0
 5166               	.LLRL19:
 5167 000c 05        		.byte	0x5
 5168 000d 0000 0000 		.long	.LBB32
 5169 0011 04        		.byte	0x4
 5170 0012 00        		.uleb128 .LBB32-.LBB32
 5171 0013 3C        		.uleb128 .LBE32-.LBB32
 5172 0014 04        		.byte	0x4
 5173 0015 A001      		.uleb128 .LBB42-.LBB32
 5174 0017 DC01      		.uleb128 .LBE42-.LBB32
 5175 0019 00        		.byte	0
 5176               	.LLRL21:
 5177 001a 05        		.byte	0x5
 5178 001b 0000 0000 		.long	.LBB34
 5179 001f 04        		.byte	0x4
 5180 0020 00        		.uleb128 .LBB34-.LBB34
 5181 0021 1C        		.uleb128 .LBE34-.LBB34
 5182 0022 04        		.byte	0x4
 5183 0023 A001      		.uleb128 .LBB37-.LBB34
 5184 0025 BC01      		.uleb128 .LBE37-.LBB34
 5185 0027 00        		.byte	0
 5186               	.LLRL25:
 5187 0028 05        		.byte	0x5
 5188 0029 0000 0000 		.long	.LBB39
 5189 002d 04        		.byte	0x4
 5190 002e 00        		.uleb128 .LBB39-.LBB39
 5191 002f 1A        		.uleb128 .LBE39-.LBB39
 5192 0030 04        		.byte	0x4
 5193 0031 A001      		.uleb128 .LBB43-.LBB39
 5194 0033 BA01      		.uleb128 .LBE43-.LBB39
 5195 0035 00        		.byte	0
 5196               	.LLRL32:
 5197 0036 07        		.byte	0x7
 5198 0037 0000 0000 		.long	.Ltext0
 5199 003b A60F      		.uleb128 .Letext0-.Ltext0
 5200 003d 07        		.byte	0x7
 5201 003e 0000 0000 		.long	.LFB13
 5202 0042 3C        		.uleb128 .LFE13-.LFB13
 5203 0043 00        		.byte	0
 5204               	.Ldebug_ranges3:
 5205               		.section	.debug_line,"",@progbits
 5206               	.Ldebug_line0:
 5207 0000 0000 0698 		.section	.debug_str,"MS",@progbits,1
 5207      0003 0000 
 5207      00E2 0201 
 5207      FB0E 0D00 
 5207      0101 0101 
 5208               	.LASF142:
 5209 0000 4D49 4C49 		.string	"MILISECONDDIVIDER"
 5209      5345 434F 
 5209      4E44 4449 
 5209      5649 4445 
 5209      5200 
 5210               	.LASF138:
 5211 0012 7363 7265 		.string	"screen_width"
 5211      656E 5F77 


 5211      6964 7468 
 5211      00
 5212               	.LASF39:
 5213 001f 5F73 697A 		.string	"_size"
 5213      6500 
 5214               	.LASF76:
 5215 0025 5F72 616E 		.string	"_rand48"
 5215      6434 3800 
 5216               	.LASF103:
 5217 002d 676C 6F62 		.string	"global_hour"
 5217      616C 5F68 
 5217      6F75 7200 
 5218               	.LASF63:
 5219 0039 5F65 6D65 		.string	"_emergency"
 5219      7267 656E 
 5219      6379 00
 5220               	.LASF130:
 5221 0044 696E 7075 		.string	"input_index"
 5221      745F 696E 
 5221      6465 7800 
 5222               	.LASF53:
 5223 0050 5F64 6174 		.string	"_data"
 5223      6100 
 5224               	.LASF144:
 5225 0056 6C61 7374 		.string	"last_runtime"
 5225      5F72 756E 
 5225      7469 6D65 
 5225      00
 5226               	.LASF95:
 5227 0063 5F77 6372 		.string	"_wcrtomb_state"
 5227      746F 6D62 
 5227      5F73 7461 
 5227      7465 00
 5228               	.LASF122:
 5229 0072 7365 745F 		.string	"set_task"
 5229      7461 736B 
 5229      00
 5230               	.LASF96:
 5231 007b 5F77 6373 		.string	"_wcsrtombs_state"
 5231      7274 6F6D 
 5231      6273 5F73 
 5231      7461 7465 
 5231      00
 5232               	.LASF7:
 5233 008c 6C6F 6E67 		.string	"long long unsigned int"
 5233      206C 6F6E 
 5233      6720 756E 
 5233      7369 676E 
 5233      6564 2069 
 5234               	.LASF118:
 5235 00a3 696E 6974 		.string	"init_kernel"
 5235      5F6B 6572 
 5235      6E65 6C00 
 5236               	.LASF43:
 5237 00af 5F6C 6266 		.string	"_lbfsize"
 5237      7369 7A65 
 5237      00


 5238               	.LASF113:
 5239 00b8 6368 6174 		.string	"chatlog_write_index"
 5239      6C6F 675F 
 5239      7772 6974 
 5239      655F 696E 
 5239      6465 7800 
 5240               	.LASF156:
 5241 00cc 5F5F 6C6F 		.string	"__locale_t"
 5241      6361 6C65 
 5241      5F74 00
 5242               	.LASF93:
 5243 00d7 5F6D 6272 		.string	"_mbrtowc_state"
 5243      746F 7763 
 5243      5F73 7461 
 5243      7465 00
 5244               	.LASF88:
 5245 00e6 5F77 6374 		.string	"_wctomb_state"
 5245      6F6D 625F 
 5245      7374 6174 
 5245      6500 
 5246               	.LASF28:
 5247 00f4 5F5F 746D 		.string	"__tm_sec"
 5247      5F73 6563 
 5247      00
 5248               	.LASF6:
 5249 00fd 6C6F 6E67 		.string	"long long int"
 5249      206C 6F6E 
 5249      6720 696E 
 5249      7400 
 5250               	.LASF0:
 5251 010b 7369 676E 		.string	"signed char"
 5251      6564 2063 
 5251      6861 7200 
 5252               	.LASF152:
 5253 0117 5F5F 6275 		.string	"__builtin_fwrite"
 5253      696C 7469 
 5253      6E5F 6677 
 5253      7269 7465 
 5253      00
 5254               	.LASF49:
 5255 0128 5F75 6275 		.string	"_ubuf"
 5255      6600 
 5256               	.LASF154:
 5257 012e 7465 7374 		.string	"test3.c"
 5257      332E 6300 
 5258               	.LASF38:
 5259 0136 5F62 6173 		.string	"_base"
 5259      6500 
 5260               	.LASF140:
 5261 013c 696E 7374 		.string	"instruction_box_size"
 5261      7275 6374 
 5261      696F 6E5F 
 5261      626F 785F 
 5261      7369 7A65 
 5262               	.LASF30:
 5263 0151 5F5F 746D 		.string	"__tm_hour"
 5263      5F68 6F75 


 5263      7200 
 5264               	.LASF124:
 5265 015b 6664 6F70 		.string	"fdopen"
 5265      656E 00
 5266               	.LASF44:
 5267 0162 5F63 6F6F 		.string	"_cookie"
 5267      6B69 6500 
 5268               	.LASF4:
 5269 016a 6C6F 6E67 		.string	"long int"
 5269      2069 6E74 
 5269      00
 5270               	.LASF129:
 5271 0173 6765 745F 		.string	"get_client_input"
 5271      636C 6965 
 5271      6E74 5F69 
 5271      6E70 7574 
 5271      00
 5272               	.LASF105:
 5273 0184 676C 6F62 		.string	"global_sec"
 5273      616C 5F73 
 5273      6563 00
 5274               	.LASF41:
 5275 018f 5F66 6C61 		.string	"_flags"
 5275      6773 00
 5276               	.LASF98:
 5277 0196 4649 4C45 		.string	"FILE"
 5277      00
 5278               	.LASF59:
 5279 019b 5F73 7464 		.string	"_stdin"
 5279      696E 00
 5280               	.LASF51:
 5281 01a2 5F62 6C6B 		.string	"_blksize"
 5281      7369 7A65 
 5281      00
 5282               	.LASF114:
 5283 01ab 6368 6174 		.string	"chatlog_size"
 5283      6C6F 675F 
 5283      7369 7A65 
 5283      00
 5284               	.LASF100:
 5285 01b8 636F 6D30 		.string	"com0out"
 5285      6F75 7400 
 5286               	.LASF71:
 5287 01c0 5F63 7674 		.string	"_cvtbuf"
 5287      6275 6600 
 5288               	.LASF52:
 5289 01c8 5F6F 6666 		.string	"_offset"
 5289      7365 7400 
 5290               	.LASF94:
 5291 01d0 5F6D 6273 		.string	"_mbsrtowcs_state"
 5291      7274 6F77 
 5291      6373 5F73 
 5291      7461 7465 
 5291      00
 5292               	.LASF92:
 5293 01e1 5F6D 6272 		.string	"_mbrlen_state"
 5293      6C65 6E5F 


 5293      7374 6174 
 5293      6500 
 5294               	.LASF147:
 5295 01ef 676F 746F 		.string	"gotoxy"
 5295      7879 00
 5296               	.LASF24:
 5297 01f6 5F73 6967 		.string	"_sign"
 5297      6E00 
 5298               	.LASF21:
 5299 01fc 5F66 6C6F 		.string	"_flock_t"
 5299      636B 5F74 
 5299      00
 5300               	.LASF61:
 5301 0205 5F73 7464 		.string	"_stderr"
 5301      6572 7200 
 5302               	.LASF26:
 5303 020d 5F42 6967 		.string	"_Bigint"
 5303      696E 7400 
 5304               	.LASF83:
 5305 0215 5F67 616D 		.string	"_gamma_signgam"
 5305      6D61 5F73 
 5305      6967 6E67 
 5305      616D 00
 5306               	.LASF45:
 5307 0224 5F72 6561 		.string	"_read"
 5307      6400 
 5308               	.LASF67:
 5309 022a 5F72 6573 		.string	"_result_k"
 5309      756C 745F 
 5309      6B00 
 5310               	.LASF27:
 5311 0234 5F5F 746D 		.string	"__tm"
 5311      00
 5312               	.LASF9:
 5313 0239 756E 7369 		.string	"unsigned int"
 5313      676E 6564 
 5313      2069 6E74 
 5313      00
 5314               	.LASF15:
 5315 0246 5F5F 7763 		.string	"__wchb"
 5315      6862 00
 5316               	.LASF60:
 5317 024d 5F73 7464 		.string	"_stdout"
 5317      6F75 7400 
 5318               	.LASF70:
 5319 0255 5F63 7674 		.string	"_cvtlen"
 5319      6C65 6E00 
 5320               	.LASF5:
 5321 025d 6C6F 6E67 		.string	"long unsigned int"
 5321      2075 6E73 
 5321      6967 6E65 
 5321      6420 696E 
 5321      7400 
 5322               	.LASF42:
 5323 026f 5F66 696C 		.string	"_file"
 5323      6500 
 5324               	.LASF102:


 5325 0275 636F 6D31 		.string	"com1out"
 5325      6F75 7400 
 5326               	.LASF127:
 5327 027d 636C 6965 		.string	"client1"
 5327      6E74 3100 
 5328               	.LASF126:
 5329 0285 636C 6965 		.string	"client2"
 5329      6E74 3200 
 5330               	.LASF3:
 5331 028d 7368 6F72 		.string	"short unsigned int"
 5331      7420 756E 
 5331      7369 676E 
 5331      6564 2069 
 5331      6E74 00
 5332               	.LASF90:
 5333 02a0 5F73 6967 		.string	"_signal_buf"
 5333      6E61 6C5F 
 5333      6275 6600 
 5334               	.LASF81:
 5335 02ac 5F61 7363 		.string	"_asctime_buf"
 5335      7469 6D65 
 5335      5F62 7566 
 5335      00
 5336               	.LASF66:
 5337 02b9 5F72 6573 		.string	"_result"
 5337      756C 7400 
 5338               	.LASF14:
 5339 02c1 5F5F 7763 		.string	"__wch"
 5339      6800 
 5340               	.LASF10:
 5341 02c7 7769 6E74 		.string	"wint_t"
 5341      5F74 00
 5342               	.LASF107:
 5343 02ce 636C 6F63 		.string	"clock_pos_y"
 5343      6B5F 706F 
 5343      735F 7900 
 5344               	.LASF149:
 5345 02da 5F5F 6275 		.string	"__builtin_memcpy"
 5345      696C 7469 
 5345      6E5F 6D65 
 5345      6D63 7079 
 5345      00
 5346               	.LASF54:
 5347 02eb 5F6C 6F63 		.string	"_lock"
 5347      6B00 
 5348               	.LASF56:
 5349 02f1 5F66 6C61 		.string	"_flags2"
 5349      6773 3200 
 5350               	.LASF132:
 5351 02f9 6472 6177 		.string	"draw_client_ui"
 5351      5F63 6C69 
 5351      656E 745F 
 5351      7569 00
 5352               	.LASF46:
 5353 0308 5F77 7269 		.string	"_write"
 5353      7465 00
 5354               	.LASF33:


 5355 030f 5F5F 746D 		.string	"__tm_year"
 5355      5F79 6561 
 5355      7200 
 5356               	.LASF150:
 5357 0319 5F5F 6275 		.string	"__builtin_fprintf"
 5357      696C 7469 
 5357      6E5F 6670 
 5357      7269 6E74 
 5357      6600 
 5358               	.LASF20:
 5359 032b 5F4C 4F43 		.string	"_LOCK_RECURSIVE_T"
 5359      4B5F 5245 
 5359      4355 5253 
 5359      4956 455F 
 5359      5400 
 5360               	.LASF139:
 5361 033d 7765 6C63 		.string	"welcome_box_size"
 5361      6F6D 655F 
 5361      626F 785F 
 5361      7369 7A65 
 5361      00
 5362               	.LASF141:
 5363 034e 7275 6E74 		.string	"runtime_clock"
 5363      696D 655F 
 5363      636C 6F63 
 5363      6B00 
 5364               	.LASF32:
 5365 035c 5F5F 746D 		.string	"__tm_mon"
 5365      5F6D 6F6E 
 5365      00
 5366               	.LASF11:
 5367 0365 5F6F 6666 		.string	"_off_t"
 5367      5F74 00
 5368               	.LASF101:
 5369 036c 636F 6D31 		.string	"com1in"
 5369      696E 00
 5370               	.LASF145:
 5371 0373 686F 7572 		.string	"hour"
 5371      00
 5372               	.LASF137:
 5373 0378 7363 7265 		.string	"screen_height"
 5373      656E 5F68 
 5373      6569 6768 
 5373      7400 
 5374               	.LASF69:
 5375 0386 5F66 7265 		.string	"_freelist"
 5375      656C 6973 
 5375      7400 
 5376               	.LASF106:
 5377 0390 636C 6F63 		.string	"clock_pos_x"
 5377      6B5F 706F 
 5377      735F 7800 
 5378               	.LASF155:
 5379 039c 2F68 6F6D 		.string	"/home/students/7527360469/\343\203\211\343\202\255\343\203\245\343\203\241\343\203\263\34
 5379      652F 7374 
 5379      7564 656E 
 5379      7473 2F37 


 5379      3532 3733 
 5380               	.LASF153:
 5381 03d5 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 5381      4331 3720 
 5381      3131 2E34 
 5381      2E30 202D 
 5381      6D63 7075 
 5382               	.LASF117:
 5383 0419 6265 6769 		.string	"begin_sch"
 5383      6E5F 7363 
 5383      6800 
 5384               	.LASF131:
 5385 0423 696E 7075 		.string	"input_buffer"
 5385      745F 6275 
 5385      6666 6572 
 5385      00
 5386               	.LASF1:
 5387 0430 756E 7369 		.string	"unsigned char"
 5387      676E 6564 
 5387      2063 6861 
 5387      7200 
 5388               	.LASF72:
 5389 043e 5F6E 6577 		.string	"_new"
 5389      00
 5390               	.LASF99:
 5391 0443 636F 6D30 		.string	"com0in"
 5391      696E 00
 5392               	.LASF108:
 5393 044a 6368 6174 		.string	"chatlog_start_x"
 5393      6C6F 675F 
 5393      7374 6172 
 5393      745F 7800 
 5394               	.LASF109:
 5395 045a 6368 6174 		.string	"chatlog_start_y"
 5395      6C6F 675F 
 5395      7374 6172 
 5395      745F 7900 
 5396               	.LASF97:
 5397 046a 5F68 5F65 		.string	"_h_errno"
 5397      7272 6E6F 
 5397      00
 5398               	.LASF2:
 5399 0473 7368 6F72 		.string	"short int"
 5399      7420 696E 
 5399      7400 
 5400               	.LASF35:
 5401 047d 5F5F 746D 		.string	"__tm_yday"
 5401      5F79 6461 
 5401      7900 
 5402               	.LASF37:
 5403 0487 5F5F 7362 		.string	"__sbuf"
 5403      7566 00
 5404               	.LASF75:
 5405 048e 5F5F 4649 		.string	"__FILE"
 5405      4C45 00
 5406               	.LASF18:
 5407 0495 5F6D 6273 		.string	"_mbstate_t"


 5407      7461 7465 
 5407      5F74 00
 5408               	.LASF112:
 5409 04a0 6368 6174 		.string	"chatlog_read_index"
 5409      6C6F 675F 
 5409      7265 6164 
 5409      5F69 6E64 
 5409      6578 00
 5410               	.LASF40:
 5411 04b3 5F5F 7346 		.string	"__sFILE"
 5411      494C 4500 
 5412               	.LASF111:
 5413 04bb 6368 6174 		.string	"chatlog_y"
 5413      6C6F 675F 
 5413      7900 
 5414               	.LASF55:
 5415 04c5 5F6D 6273 		.string	"_mbstate"
 5415      7461 7465 
 5415      00
 5416               	.LASF84:
 5417 04ce 5F72 616E 		.string	"_rand_next"
 5417      645F 6E65 
 5417      7874 00
 5418               	.LASF86:
 5419 04d9 5F6D 626C 		.string	"_mblen_state"
 5419      656E 5F73 
 5419      7461 7465 
 5419      00
 5420               	.LASF62:
 5421 04e6 5F69 6E63 		.string	"_inc"
 5421      00
 5422               	.LASF121:
 5423 04eb 6578 6974 		.string	"exit"
 5423      00
 5424               	.LASF157:
 5425 04f0 696E 6974 		.string	"initPort"
 5425      506F 7274 
 5425      00
 5426               	.LASF64:
 5427 04f9 5F6C 6F63 		.string	"_locale"
 5427      616C 6500 
 5428               	.LASF65:
 5429 0501 5F5F 636C 		.string	"__cleanup"
 5429      6561 6E75 
 5429      7000 
 5430               	.LASF23:
 5431 050b 5F6D 6178 		.string	"_maxwds"
 5431      7764 7300 
 5432               	.LASF57:
 5433 0513 5F72 6565 		.string	"_reent"
 5433      6E74 00
 5434               	.LASF119:
 5435 051a 6673 6361 		.string	"fscanf"
 5435      6E66 00
 5436               	.LASF77:
 5437 0521 5F73 6565 		.string	"_seed"
 5437      6400 


 5438               	.LASF16:
 5439 0527 5F5F 636F 		.string	"__count"
 5439      756E 7400 
 5440               	.LASF17:
 5441 052f 5F5F 7661 		.string	"__value"
 5441      6C75 6500 
 5442               	.LASF47:
 5443 0537 5F73 6565 		.string	"_seek"
 5443      6B00 
 5444               	.LASF120:
 5445 053d 696E 6279 		.string	"inbyte"
 5445      7465 00
 5446               	.LASF12:
 5447 0544 5F66 706F 		.string	"_fpos_t"
 5447      735F 7400 
 5448               	.LASF8:
 5449 054c 6C6F 6E67 		.string	"long double"
 5449      2064 6F75 
 5449      626C 6500 
 5450               	.LASF58:
 5451 0558 5F65 7272 		.string	"_errno"
 5451      6E6F 00
 5452               	.LASF74:
 5453 055f 6368 6172 		.string	"char"
 5453      00
 5454               	.LASF29:
 5455 0564 5F5F 746D 		.string	"__tm_min"
 5455      5F6D 696E 
 5455      00
 5456               	.LASF115:
 5457 056d 6368 6174 		.string	"chatlog_sender"
 5457      6C6F 675F 
 5457      7365 6E64 
 5457      6572 00
 5458               	.LASF78:
 5459 057c 5F6D 756C 		.string	"_mult"
 5459      7400 
 5460               	.LASF110:
 5461 0582 6368 6174 		.string	"chatlog_x"
 5461      6C6F 675F 
 5461      7800 
 5462               	.LASF22:
 5463 058c 5F6E 6578 		.string	"_next"
 5463      7400 
 5464               	.LASF80:
 5465 0592 5F73 7472 		.string	"_strtok_last"
 5465      746F 6B5F 
 5465      6C61 7374 
 5465      00
 5466               	.LASF148:
 5467 059f 6D65 6D63 		.string	"memcpy"
 5467      7079 00
 5468               	.LASF146:
 5469 05a6 6D69 6C69 		.string	"milisec"
 5469      7365 6300 
 5470               	.LASF79:
 5471 05ae 5F61 6464 		.string	"_add"


 5471      00
 5472               	.LASF19:
 5473 05b3 5F5F 554C 		.string	"__ULong"
 5473      6F6E 6700 
 5474               	.LASF91:
 5475 05bb 5F67 6574 		.string	"_getdate_err"
 5475      6461 7465 
 5475      5F65 7272 
 5475      00
 5476               	.LASF134:
 5477 05c8 7265 6672 		.string	"refresh_clock"
 5477      6573 685F 
 5477      636C 6F63 
 5477      6B00 
 5478               	.LASF151:
 5479 05d6 6677 7269 		.string	"fwrite"
 5479      7465 00
 5480               	.LASF25:
 5481 05dd 5F77 6473 		.string	"_wds"
 5481      00
 5482               	.LASF34:
 5483 05e2 5F5F 746D 		.string	"__tm_wday"
 5483      5F77 6461 
 5483      7900 
 5484               	.LASF13:
 5485 05ec 5F73 7369 		.string	"_ssize_t"
 5485      7A65 5F74 
 5485      00
 5486               	.LASF89:
 5487 05f5 5F6C 3634 		.string	"_l64a_buf"
 5487      615F 6275 
 5487      6600 
 5488               	.LASF136:
 5489 05ff 6368 616E 		.string	"channel"
 5489      6E65 6C00 
 5490               	.LASF73:
 5491 0607 5F73 6967 		.string	"_sig_func"
 5491      5F66 756E 
 5491      6300 
 5492               	.LASF123:
 5493 0611 7065 7272 		.string	"perror"
 5493      6F72 00
 5494               	.LASF50:
 5495 0618 5F6E 6275 		.string	"_nbuf"
 5495      6600 
 5496               	.LASF36:
 5497 061e 5F5F 746D 		.string	"__tm_isdst"
 5497      5F69 7364 
 5497      7374 00
 5498               	.LASF82:
 5499 0629 5F6C 6F63 		.string	"_localtime_buf"
 5499      616C 7469 
 5499      6D65 5F62 
 5499      7566 00
 5500               	.LASF48:
 5501 0638 5F63 6C6F 		.string	"_close"
 5501      7365 00


 5502               	.LASF85:
 5503 063f 5F72 3438 		.string	"_r48"
 5503      00
 5504               	.LASF135:
 5505 0644 7765 6C63 		.string	"welcome_ui"
 5505      6F6D 655F 
 5505      7569 00
 5506               	.LASF87:
 5507 064f 5F6D 6274 		.string	"_mbtowc_state"
 5507      6F77 635F 
 5507      7374 6174 
 5507      6500 
 5508               	.LASF68:
 5509 065d 5F70 3573 		.string	"_p5s"
 5509      00
 5510               	.LASF116:
 5511 0662 6368 6174 		.string	"chatlog"
 5511      6C6F 6700 
 5512               	.LASF104:
 5513 066a 676C 6F62 		.string	"global_min"
 5513      616C 5F6D 
 5513      696E 00
 5514               	.LASF128:
 5515 0675 6D61 696E 		.string	"main"
 5515      00
 5516               	.LASF125:
 5517 067a 6670 7269 		.string	"fprintf"
 5517      6E74 6600 
 5518               	.LASF143:
 5519 0682 7275 6E74 		.string	"runtime"
 5519      696D 6500 
 5520               	.LASF31:
 5521 068a 5F5F 746D 		.string	"__tm_mday"
 5521      5F6D 6461 
 5521      7900 
 5522               	.LASF133:
 5523 0694 7265 6672 		.string	"refresh_chat"
 5523      6573 685F 
 5523      6368 6174 
 5523      00
 5524               		.ident	"GCC: (GNU) 11.4.0"


